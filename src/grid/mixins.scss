
/* =========================================================================
 * Svelto - Grid (Mixins)
 * =========================================================================
 * Copyright (c) 2015 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @requires ../mixins/responsive.scss
 * ========================================================================= */

/* GRID WIDTHS */

// XSMALL

@include xsmall-up {

  @for $nr from 1 through $grid-columns {

    $percentage: ( 100% / $grid-columns ) * $nr;

    .xs-#{$nr} {
      width: $percentage;
    }

    //FIXME: Is too ugly, and we generate too much CSS

    %xs-#{$nr}-without-gutter {
      width: calc(#{$percentage} - #{$gutter});
    }

    .multiple > .xs-#{$nr} {

      &:not(.multiple) {
        @extend %xs-#{$nr}-without-gutter;
      }

      &.multiple {

        &.no-wrap, &.vertical, &.joined {
          @extend %xs-#{$nr}-without-gutter;
        }

      }

    }

  }

}

// SMALL

@include small-up {

  @for $nr from 1 through $grid-columns {

    $percentage: ( 100% / $grid-columns ) * $nr;

    .sm-#{$nr} {
      width: $percentage;
    }

    //FIXME: Is too ugly, and we generate too much CSS

    %sm-#{$nr}-without-gutter {
      width: calc(#{$percentage} - #{$gutter});
    }

    .multiple > .sm-#{$nr} {

      &:not(.multiple) {
        @extend %sm-#{$nr}-without-gutter;
      }

      &.multiple {

        &.no-wrap, &.vertical, &.joined {
          @extend %sm-#{$nr}-without-gutter;
        }

      }

    }

  }

}

// MEDIUM

@include medium-up {

  @for $nr from 1 through $grid-columns {

    $percentage: ( 100% / $grid-columns ) * $nr;

    .md-#{$nr} {
      width: $percentage;
    }

    //FIXME: Is too ugly, and we generate too much CSS

    %md-#{$nr}-without-gutter {
      width: calc(#{$percentage} - #{$gutter});
    }

    .multiple > .md-#{$nr} {

      &:not(.multiple) {
        @extend %md-#{$nr}-without-gutter;
      }

      &.multiple {

        &.no-wrap, &.vertical, &.joined {
          @extend %md-#{$nr}-without-gutter;
        }

      }

    }

  }

}

// LARGE

@include large-up {

  @for $nr from 1 through $grid-columns {

    $percentage: ( 100% / $grid-columns ) * $nr;

    .lg-#{$nr} {
      width: $percentage;
    }

    //FIXME: Is too ugly, and we generate too much CSS

    %lg-#{$nr}-without-gutter {
      width: calc(#{$percentage} - #{$gutter});
    }

    .multiple > .lg-#{$nr} {

      &:not(.multiple) {
        @extend %lg-#{$nr}-without-gutter;
      }

      &.multiple {

        &.no-wrap, &.vertical, &.joined {
          @extend %lg-#{$nr}-without-gutter;
        }

      }

    }

  }

}

// XLARGE

@include xlarge-up {

  @for $nr from 1 through $grid-columns {

    $percentage: ( 100% / $grid-columns ) * $nr;

    .xl-#{$nr} {
      width: $percentage;
    }

    //FIXME: Is too ugly, and we generate too much CSS

    %xl-#{$nr}-without-gutter {
      width: calc(#{$percentage} - #{$gutter});
    }

    .multiple > .xl-#{$nr} {

      &:not(.multiple) {
        @extend %xl-#{$nr}-without-gutter;
      }

      &.multiple {

        &.no-wrap, &.vertical, &.joined {
          @extend %xl-#{$nr}-without-gutter;
        }

      }

    }

  }

}
