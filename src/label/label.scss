
/* =========================================================================
 * Svelto - Label
 * =========================================================================
 * Copyright (c) 2015 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @requires ../normalize/normalize.scss
 * @requires ../widget/widget.scss
 * ========================================================================= */

/* DEFAULT */

label {
  @extend .widget;
  display: block;
}

/* LABEL */

.label {

  @extend .widget;
  @include color ( $label-color, $label-color-basic );
  font-weight: bold;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border-radius: $label-border-radius;
  padding: $label-padding-vertical $label-padding-horizontal;
  min-height: $line-height-em + ( $label-padding-vertical * 2 );
  min-width: $line-height-em + ( $label-padding-horizontal * 2 );

  /* CHILDREN NO MARGIN BOTTOM */

  > :not(.sub) {
    margin-bottom: 0 !important;
  }

  /* TEXT GROW */

  > :not(.sub):not(.label):not(.button):not(.icon):not(.icons):not(input):not(.ripple-circle) {
    flex-grow: 1;
    flex-shrink: 1; //INFO: IE-10-11 default it to 0 instead
  }

  /* OUTLINED */

  &.outlined { //FIXME: Ugly fix for keeping the aspect ratio even in this condition
    min-height: calc(#{$line-height-em + ( $label-padding-vertical * 2 )} + #{$outline-width * 2});
    min-width: calc(#{$line-height-em + ( $label-padding-horizontal * 2 )} + #{$outline-width * 2});
  }

  /* INVALID */

  &.invalid {

    border: $outline-width solid $color-error !important;

    /* ICON */

    .icon {
      color: $color-error !important;
    }

  }

  /* VALID */

  &.valid {

    border: $outline-width solid $color-success !important;

    /* ICON */

    .icon {
      color: $color-success !important;
    }

  }

  /* COMPACT */

  &.compact {

    padding: $label-compact-padding-vertical $label-compact-padding-horizontal;
    min-height: $line-height-em + ( $label-compact-padding-vertical * 2 );
    min-width: $line-height-em + ( $label-compact-padding-horizontal * 2 );

    &.outlined { //FIXME: Ugly fix for keeping the aspect ratio even in this condition
      min-height: calc(#{$line-height-em + ( $label-compact-padding-vertical * 2 )} + #{$outline-width * 2});
      min-width: calc(#{$line-height-em + ( $label-compact-padding-horizontal * 2 )} + #{$outline-width * 2});
    }

  }

  /* FLUID */

  &.fluid {
    display: flex;
  }

  /* LEFT / RIGHT */

  > .sub {

    @include last-child-no-gutter ();
    display: inline-flex;
    align-self: stretch;
    align-items: center;
    justify-content: center;
    background-color: $label-sub-bg-color;
    padding: $label-compact-padding-vertical $label-compact-padding-horizontal;
    min-height: $line-height-em + ( $label-compact-padding-vertical * 2 );
    min-width: $line-height-em + ( $label-compact-padding-horizontal * 2 );

    &.left {
      @include border-left-radius ( inherit );
      margin: ( - $label-padding-vertical ) $label-padding-horizontal ( - $label-padding-vertical ) ( - $label-padding-horizontal ) !important; //FIXME: The `!important` shouldn't be needed
    }

    &.right {
      @include border-right-radius ( inherit );
      margin: ( - $label-padding-vertical ) ( - $label-padding-horizontal ) ( - $label-padding-vertical ) $label-padding-horizontal !important; //FIXME: The `!important` shouldn't be needed
    }

  }

  &.compact > .sub {

    &.left {
      margin: ( - $label-compact-padding-vertical ) $label-compact-padding-horizontal ( - $label-compact-padding-vertical ) ( - $label-compact-padding-horizontal ) !important; //FIXME: The `!important` shouldn't be needed
    }

    &.right {
      margin: ( - $label-compact-padding-vertical ) ( - $label-compact-padding-horizontal ) ( - $label-compact-padding-vertical ) $label-compact-padding-horizontal !important; //FIXME: The `!important` shouldn't be needed
    }

  }

  &.outlined > .sub {

    &.left {
      border-right: 1px solid;
      border-color: inherit !important; //FIXME: The `!important` shouldn't be needed
    }

    &.right {
      border-left: 1px solid;
      border-color: inherit !important; //FIXME: The `!important` shouldn't be needed
    }

  }

  /* CENTER */

  > :not(.label):not(.button):not(.sub):not(.overlay):not(.ripple-circle) { //INFO: Both `.label` and `.button`

    & + :not(.sub):not(.icon):not(.overlay):not(.ripple-circle) {
      margin-left: $label-center-extra-spacing;
    }

    & + i.icon { //FIXME: Ugly fix for normalizing the icons scale factor
      margin-left: $label-center-extra-spacing / $icon-scale-amount;
    }

  }

  &.compact {

    > :not(.label):not(.button):not(.sub):not(.overlay):not(.ripple-circle) { //INFO: Both `.label` and `.button`

      & + :not(.sub):not(.icon):not(.overlay):not(.ripple-circle) {
        margin-left: $label-compact-center-extra-spacing;
      }

      & + i.icon { //FIXME: Ugly fix for normalizing the icons scale factor
        margin-left: $label-compact-center-extra-spacing / $icon-scale-amount;
      }

    }

  }

  /* BADGE */

  //TODO: Maybe move to it's own component

  &.badge {

    position: absolute;
    margin: 0;

    &.top-left {
      top: $label-badge-spacing;
      left: $label-badge-spacing;
    }

    &.top-right {
      top: $label-badge-spacing;
      right: $label-badge-spacing;
    }

    &.bottom-left {
      bottom: $label-badge-spacing;
      left: $label-badge-spacing;
    }

    &.bottom-right {
      bottom: $label-badge-spacing;
      right: $label-badge-spacing;
    }

  }

  /* FLOATING */

  &.floating {

    //TODO: Add it while scrolling to bottom, show him when scrolling to top
    //TODO: Add sub floating actions

    @include z-depth ( $label-floating-z-depth );
    position: fixed;
    z-index: $label-floating-z-index;
    right: $label-floating-right;
    bottom: $label-floating-bottom;
    margin-bottom: 0;
    padding: $label-floating-padding-vertical $label-floating-padding-horizontal;
    min-height: $line-height-em + ( $label-floating-padding-vertical * 2 );
    min-width: $line-height-em + ( $label-floating-padding-horizontal * 2 );

    &.compact {
      padding: $label-floating-compact-padding-vertical $label-floating-compact-padding-horizontal;
      min-height: $line-height-em + ( $label-floating-compact-padding-vertical * 2 );
      min-width: $line-height-em + ( $label-floating-compact-padding-horizontal * 2 );
    }

  }

  /* RIBBON */

  //TODO: Maybe move it to it's own component

  &.ribbon {

    /* BEFORE / AFTER */

    &.ribbon-left:before,
    &.ribbon-right:after {
      position: absolute;
      z-index: -1;
      content: '';
      border: $label-ribbon-size solid transparent;
      border-top-color: inherit;
      bottom: - $label-ribbon-size * 2;
    }

    /* LEFT */

    &.ribbon-left {

      @include border-left-radius ( 0 );
      left: - ( $gutter + ( $label-ribbon-size * 2 ) );
      padding-left: calc(#{$label-padding-horizontal} + #{$gutter});

      &:before {
        left: 0;
        border-right-color: inherit;
      }

    }

    /* LEFT & RIGHT */

    &.ribbon-left.ribbon-right {
      width: calc(100% + #{( $gutter * 2 ) + ( $label-ribbon-size * 4)});
    }

    /* RIGHT */

    &.ribbon-right {

      @include border-right-radius ( 0 );
      padding-right: calc(#{$label-padding-horizontal} + #{$gutter});

      &:after {
        right: 0;
        border-left-color: inherit;
      }

    }

    /* ONLY RIGHT */

    //FIXME: It is a pixel too far

    &.ribbon-right:not(.ribbon-left) {
      left: calc(100% + #{( $gutter * 2 ) + $label-ribbon-size});
      transform: translateX(-100%);
    }

    /* OUTLINED */

    &.outlined {

      /* BEFORE / AFTER */

      &.ribbon-left:before,
      &.ribbon-right:after {
        bottom: - ( $label-ribbon-size * 2 + $outline-width );
      }

      /* BEFORE */

      &.ribbon-left:before {
        left: - $outline-width;
      }

      /* AFTER */

      &.ribbon-right:after {
        right: - $outline-width;
      }

    }

  }

}

/* LABEL CORNER */

.label-corner {

  position: absolute;
  z-index: $label-corner-z-index;
  visibility: hidden;
  overflow: hidden;
  pointer-events: none;

  &.top-left {

    top: 0;
    left: 0;
    border-top-left-radius: inherit;

    > * { //INFO: Both `.label` and `.button`
      transform: translateX(-($label-corner-padding-horizontal * 2 / 4 + $line-height-em / 8)) translateY(-($label-corner-padding-vertical * 2 / 4 + $line-height-em / 8 ));
    }

    &:before {
      top: 0;
      left: 0;
      transform: translateX(-( $line-height-em + ( $label-corner-padding-horizontal * 2 ) ) / $SQRT2) translateY(-( $line-height-em + ( $label-corner-padding-vertical * 2 ) ) / $SQRT2) rotate(45deg);
    }

  }

  &.top-right {

    top: 0;
    right: 0;
    border-top-right-radius: inherit;

    > * { //INFO: Both `.label` and `.button`
      transform: translateX($label-corner-padding-horizontal * 2 / 4 + $line-height-em / 8) translateY(-($label-corner-padding-vertical * 2 / 4 + $line-height-em / 8));
    }

    &:before {
      top: 0;
      right: 0;
      transform: translateX(( $line-height-em + ( $label-corner-padding-horizontal * 2 ) ) / $SQRT2) translateY(-( $line-height-em + ( $label-corner-padding-vertical * 2 ) ) / $SQRT2) rotate(45deg);
    }

  }

  &.bottom-left {

    bottom: 0;
    left: 0;
    border-bottom-left-radius: inherit;

    > * { //INFO: Both `.label` and `.button`
      transform: translateX(-($label-corner-padding-horizontal * 2 / 4 + $line-height-em / 8)) translateY($label-corner-padding-vertical * 2 / 4 + $line-height-em / 8);
    }

    &:before {
      bottom: 0;
      left: 0;
      transform: translateX(-( $line-height-em + ( $label-corner-padding-horizontal * 2 ) ) / $SQRT2) translateY(( $line-height-em + ( $label-corner-padding-vertical * 2 ) ) / $SQRT2) rotate(45deg);
    }

  }

  &.bottom-right {

    bottom: 0;
    right: 0;
    border-bottom-right-radius: inherit;

    > * { //INFO: Both `.label` and `.button`
      transform: translateX($label-corner-padding-horizontal * 2 / 4 + $line-height-em / 8) translateY($label-corner-padding-vertical * 2 / 4 + $line-height-em / 8);
    }

    &:before {
      bottom: 0;
      right: 0;
      transform: translateX(( $line-height-em + ( $label-corner-padding-horizontal * 2 ) ) / $SQRT2) translateY(( $line-height-em + ( $label-corner-padding-vertical * 2 ) ) / $SQRT2) rotate(45deg);
    }

  }

  &:before {
    pointer-events: auto;
    position: absolute;
    content: '';
    height: ( $line-height-em + ( $label-corner-padding-vertical * 2 ) ) * $SQRT2;
    width: ( $line-height-em + ( $label-corner-padding-horizontal * 2 ) ) * $SQRT2;
    background-color: inherit;
    visibility: visible;
  }

  > * { //INFO: Both `.label` and `.button`
    padding: $label-corner-padding-vertical $label-corner-padding-horizontal;
    height: $line-height-em + ( $label-corner-padding-vertical * 2 );
    width: $line-height-em + ( $label-corner-padding-horizontal * 2 );
    margin: 0;
    border-radius: 0;
    background-color: transparent !important;
    color: inherit;
    margin: 0;
    visibility: visible;
  }

}

/* LABEL TAG */

//FIXME: Missing pointer outline in IE10
//FIXME: The pointer is not clickable

.label-tag {

  margin-bottom: $gutter;
  z-index: 1;

  > * { //INFO: Both `.label` and `.button`

    margin-left: ( $label-tag-smooth-size * $SQRT2 ) / 2 - $label-border-radius;
    margin-bottom: 0;

    &:before,
    &:after {
      content: '';
      position: absolute;
      top: 50%;
      height: $label-tag-smooth-size;
      width: $label-tag-smooth-size;
      transform: translateX(50%) translateY(-50%) rotate(45deg);
    }

    &:before {
      @include color ( 'inherit' );
      z-index: -1;
    }

    &:after {
      background-color: $label-tab-circle-background-color;
      border-radius: 50%;
      box-shadow: $label-tag-circle-box-shadow;
      transform: translateX(50%) translateY(-50%) rotate(45deg) scale($label-tag-circle-scale);
    }

    &.compact {

      margin-left: ( $label-tag-smooth-compact-size * $SQRT2 ) / 2 - $label-border-radius;

      &:before,
      &:after {
        height: $label-tag-smooth-compact-size;
        width: $label-tag-smooth-compact-size;
      }

    }

    &.outlined {

      border-left-width: 0;

      &:before {
        border-width: $outline-width;
        border-style: solid;
      }

    }

    &:not(.sharp) {

      &:before,
      &:after {
        right: calc(100% - #{$label-border-radius / 2});
      }

      &:before {
        border-radius: $label-border-radius;
      }

    }

    &.sharp {

      margin-left: ( $label-tag-sharp-size * $SQRT2 ) / 2;

      &:before,
      &:after {
        height: $label-tag-sharp-size;
        width: $label-tag-sharp-size;
        right: 100%;
      }

      &.compact {

        margin-left: ( $label-tag-sharp-compact-size * $SQRT2 ) / 2;

        &:before,
        &:after {
          height: $label-tag-sharp-compact-size;
          width: $label-tag-sharp-compact-size;
        }

      }

    }

    /* COLORS */

    @each $name, $datas in $colors {

      $bg: nth($datas, 1);

      &.tag-circle-#{$name}:after {
        background-color: $bg;
      }

    }

  }

}
