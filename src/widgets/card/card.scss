
/* =========================================================================
 * Svelto - Widgets - Card
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require decorators/colors/colors.scss
 * @require widgets/container/container.scss
 * ========================================================================= */

//FIXME: There's an overflow bug when scrolling the block-content, it goes a bit over the footer, but not if we zoom the page
//FIXME: It's not good on Dolphin browser

/* CARD */

.card {

  @extend %widget;
  @include color ( $card-color );
  display: flex;
  flex-direction: column;
  border-radius: $card-border-radius;

  /* HEADER / BLOCK / FOOTER */

  &-header,
  &-block,
  &-footer {

    &:not(.multiple) {
      @extend %container;
      border-radius: 0;
    }

    &.multiple {

      margin-bottom: 0 !important;

      > * {
        border-radius: 0;
        margin-bottom: 0 !important;
      }

    }

  }

  /* HEADER / FOOTER */

  &-header,
  &-footer {
    flex-shrink: 0; // So that when there's an overflow just `.card-block` scrolls
  }

  /* FOOTER */

  div.card-footer.multiple[class*="multiple"] { //FIXME: Ugly fix
    margin-bottom: 0 !important;
  }

  /* BLOCK */

  &-block {
    flex-grow: 1; // Takes the remaining space, if any
    flex-shrink: 1; // IE-10-11 default it to 0 instead
    overflow: auto;
  }

  /* NO MARGIN BOTTOM FOR CHILDREN (WIDGETS) */

  > :not(.overlay):not(.ripple-circle) {
    margin-bottom: 0 !important; //FIXME: The `!important` shouldn't be necessary
  }

  /* BORDER RADIUS INHERITANCE */

  > :first-child:not(.overlay):not(.ripple-circle),
  > :first-child.overlay + *,
  > :first-child.ripple-circle + * {
    @include border-top-radius ( inherit );
  }

  > .multiple:first-child {

    > :first-child {
      border-top-left-radius: inherit;
    }

    > :last-child {
      border-top-right-radius: inherit;
    }

  }

  > :last-child {
    @include border-bottom-radius ( inherit );
  }

  > .multiple:last-child {

    > :first-child {
      border-bottom-left-radius: inherit;
    }

    > :last-child {
      border-bottom-right-radius: inherit;
    }

  }

  /* NEXT CHILDREN OUTLINED */

  > .outlined + .outlined:not(img) {
    border-top-width: 0;
  }

}
