
/* =========================================================================
 * Svelto - Multiple
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * ========================================================================= */

/* MULTIPLE */

//TODO: Add a 'lefted', 'righted' (like 'centered') classes for aligning the content to the left or right

.multiple {

  border-color: inherit; // So that when the children also inherit the border color is actually inherited
  position: relative;
  display: flex;
  flex-wrap: wrap;
  align-items: flex-start;

  /* HORIZONTAL GUTTER */

  &:not(.no-wrap):not(.vertical):not(.joined) { // Here the gutter is needed

    @include margin-horizontal ( - $gutter-half );

    > * {
      @include margin-horizontal ( $gutter-half );
    }

  }

  &.no-wrap:not(.joined):not(.vertical) > :not(.multiple) { // Here we just need the gutter in between

    &:not(:first-child) {
      margin-left: $gutter-half;
    }

    &:not(:last-child) {
      margin-right: $gutter-half;
    }

  }

  &.vertical > .multiple {

    @include margin-horizontal ( 0 !important ); //FIXME: We shouldn't use `!important`

    > :first-child {
      margin-left: 0;
    }

    > :last-child {
      margin-right: 0;
    }

  }

  /* CENTERED */

  &.centered-x,
  &.centered {
    justify-content: center;
  }

  &.centered-y,
  &.centered {
    align-items: center;
  }

  /* LIMITED */

  &.limited { //FIXME: It's not perfect... It's padded by the gutter, fix it if possible, or just remove it

    @if $max-width-enabled {

      max-width: $max-width;

      @include min-screen ( $max-width ) {
        @include margin-horizontal ( auto !important );
        display: flex;
      }

    }

  }

  /* NO WRAP */

  &.no-wrap {
    flex-wrap: nowrap;
  }

  /* FLUID / EQUAL */

  &.fluid,
  &.equal {

    &:not(.vertical) {

      > * {
        flex-grow: 1;
        flex-shrink: 0;
      }

      > input,
      > textarea {
        flex-basis: 0%; // IE-10-11 misinterpreter a unitless 0 flex-basis
      }

    }

    &.vertical > * {
      width: 100%;
    }

  }

  /* EQUAL */

  &.equal > * {
    flex-basis: 0%; // IE-10-11 misinterpreter a unitless 0 flex-basis
  }

  /* JOINED */

  &.joined {

    flex-wrap: nowrap;
    align-items: stretch;

    &:not(.vertical) {

      > :not(:last-child) {

        @include border-right-radius ( 0 !important );
        margin-right: 0;
        border-right-width: 0;

        &.multiple > :last-child {
          @include border-right-radius ( 0 !important );
        }

      }

      > :not(:first-child) {

        @include border-left-radius ( 0 !important );
        margin-left: 0;

        &.multiple > :not(:last-child) {
          @include border-left-radius ( 0 !important );
        }

      }

      &.no-separators {

        > :not(:first-child) {

          border-left-width: 0;

          &.multiple > * {
            border-left-width: 0;
          }

        }

      }

    }

    &.vertical {

      > :not(:last-child) {

        @include border-bottom-radius ( 0 !important );
        margin-bottom: 0;
        border-bottom-width: 0;

        &.multiple > * {
          @include border-bottom-radius ( 0 !important );
        }

        &.multiple.no-wrap > *,
        &.multiple.joined > * {
          margin-bottom: 0;
          border-bottom-width: 0;
        }

      }

      > :not(:first-child) {

        @include border-top-radius ( 0 !important );

        &.multiple > * {
          @include border-top-radius ( 0 !important );
        }

      }

      &.no-separators {

        > :not(:first-child) {

          border-top-width: 0;

          &.multiple > * {
            border-top-width: 0;
          }

        }

      }

    }

  }

  /* STRETCHED */

  &.stretched {

    align-items: stretch;

    > .multiple.vertical {

      display: flex;

      > * {
        flex-grow: 1;
        flex-shrink: 1; // IE-10-11 default it to 0 instead
      }

    }

  }

  /* VERTICAL */

  &.vertical {
    flex-direction: column;
  }

  /* HORIZONTAL GUTTER */

  > .multiple.no-wrap {

    &:not(:first-child) {
      margin-left: $gutter-half;
    }

    &:not(:last-child) {
      margin-right: $gutter-half;
    }

  }

}

/* MULTIPLE IN TABLE CELL */

table > :not(tfoot) td .multiple:only-child { // Here the `multiple` shouldn't take as much space as possible (`display: flex`) but just the required, so that the columns can be better spaced //FIXME: It's ugly
  display: inline-flex;
}
