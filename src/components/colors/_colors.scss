
/* =========================================================================
 * Svelto - Colors v0.1.0
 * =========================================================================
 * Copyright (c) 2015 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @requires _settings.scss
 * ========================================================================= */

//TODO: Add transparentize classes, maybe even the transparent-initial class

/* MIXIN */

@mixin color ( $color_name, $basic: false, $gradient: false, $extra: '' ) {

  $colors: map-get($colors, $color_name);

  $bg: nth($colors, 1);
  $bg-hover: nth($colors, 2);
  $bg-active: nth($colors, 3);
  $border: nth($colors, 4);
  $accent: nth($colors, 5);
  $text: nth($colors, 6);
  $link: nth($colors, 7);
  $link-hover: nth($colors, 8);
  $support-gradient: nth($colors, 9);

  border-color: $border #{$extra};
  color: $text #{$extra};

  @if $basic == false {

    background: $bg #{$extra};

    @if $support-gradient == true {

      &.gradient {
        @include gradient ( $color_name, $extra );
      }

    }

    &.actionable {

      &.active {
        background: $bg-active #{$extra};
      }

      &:not(.active):not(.dragging):not(.disabled):not([class*='-disabled']) {

        &:hover {
          background: $bg-hover #{$extra};
        }

        &:not(.ripple):active {
          background: $bg-active #{$extra};
        }

      }

    }

    &.highlight:after {
      border-color: $accent #{$extra};
    }

  } @else {

    @if $gradient == true {

      @if $support-gradient == true {

        @include gradient ( $color_name, $extra );

      }

    } @else {

      background: $bg #{$extra};

    }

  }

  @if $color_name != 'inherit' { //INFO: Otherwise it will not work for example under .container-content that has color: `inherit`

    p > a { //INFO: We do it just under `p`s, because elsewhere might be an unwanted style

      color: $link #{$extra};

      &:before {
        border-color: $link-hover #{$extra};
      }

      &:hover {
        color: $link-hover #{$extra};
      }

    }

  }

}

@mixin color-text ( $color_name, $extra: '' ) {

  $colors: map-get($colors, $color_name);

  $bg: nth($colors, 1);

  color: $bg #{$extra};
}

/* COLORS */

@each $name, $datas in $colors {

  .#{$name} {
    @include color ( $name, false, false, '!important' );
  }

  .text-#{$name} {
    color: nth($datas, 1);
  }

}
