
/* =========================================================================
 * Svelto - Multiple v0.2.0
 * =========================================================================
 * Copyright (c) 2015 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @requires _settings.scss
 * ========================================================================= */

/* MULTIPLE */

//TODO: Add a 'lefted', 'righted' (like 'centered') classes for aligning the content to the left or right

.multiple {

  position: relative;
  display: flex;
  flex-wrap: wrap;
  align-items: flex-start;

  /* HORIZONTAL GUTTER */

  &:not(.no-wrap):not(.vertical):not(.joined) { //INFO: Here the gutter is needed

    @include margin-horizontal ( - $gutter-half );

    > * {
      @include margin-horizontal ( $gutter-half );
    }

  }

  &.no-wrap > :not(.multiple) { //INFO: Here we just need the gutter in between

    &:not(:first-child) {
      margin-left: $gutter-half;
    }

    &:not(:last-child) {
      margin-right: $gutter-half;
    }

  }

  &.vertical > .multiple {

    @include margin-horizontal ( 0 !important ); //FIXME: We shouldn't use `!important`

    > :first-child {
      margin-left: 0;
    }

    > :last-child {
      margin-right: 0;
    }

  }

  /* CENTERED */

  &.centered {
    justify-content: center;
  }

  /* LIMITED */

  &.limited { //FIXME: It's not perfect... It's padded by the gutter

    @if $max-width-enabled {

      max-width: $max-width;

      @include min-screen ( $max-width ) {
        @include margin-horizontal ( auto !important );
        display: flex;
      }

    }

  }

  /* NO WRAP */

  &.no-wrap {
    flex-wrap: nowrap;
  }

  /* FLUID / EQUAL */

  &.fluid, &.equal {

    &:not(.vertical) > * {
      flex-grow: 1;
      flex-shrink: 0;
    }

    &.vertical > * {
      width: 100%;
    }

  }

  /* EQUAL */

  &.equal > * {
    flex-basis: 0;
  }

  /* JOINED */

  &.joined {

    flex-wrap: nowrap;
    align-items: stretch;

    &:not(.vertical) {

      > :not(:last-child) {

        @include border-right-radius ( 0 );
        margin-right: 0;
        border-right-width: 0;

        &.multiple > :last-child {
          @include border-right-radius ( 0 );
        }

      }

      > :not(:first-child) {

        @include border-left-radius ( 0 );
        margin-left: 0;

        &.multiple > :not(:last-child) {
          @include border-left-radius ( 0 );
        }

      }

      &.no-separators {

        > :not(:first-child) {

          border-left-width: 0;

          &.multiple > * {
            border-left-width: 0;
          }

        }

      }

    }

    &.vertical {

      > :not(:last-child) {

        @include border-bottom-radius ( 0 );
        margin-bottom: 0;
        border-bottom-width: 0;

        &.multiple > :last-child {
          @include border-bottom-radius ( 0 );
        }

      }

      > :not(:first-child) {

        @include border-top-radius ( 0 );

        &.multiple > :not(:last-child) {
          @include border-top-radius ( 0 );
        }

      }

      &.no-separators {

        > :not(:first-child) {

          border-top-width: 0;

          &.multiple > * {
            border-top-width: 0;
          }

        }

      }

    }

  }

  /* STRETCHED */

  &.stretched {

    align-items: stretch;

    > .multiple.vertical {

      display: flex;

      > * {
        flex-grow: 1;
      }

    }

  }

  /* VERTICAL */

  &.vertical {
    flex-direction: column;
  }

  /* Z-DEPTH */

  &[class*="z-depth-"] {

    box-shadow: none !important;

    &:before {
      @include fill-absolute ();
      z-index: $multiple-z-depth-z-index;
      content: '';
      pointer-events: none;
      border-radius: $border-radius-medium;
      bottom: $gutter;
    }

    &:not(.no-wrap):not(.vertical):not(.joined):before {
      right: $gutter-half;
      left: $gutter-half;
    }

    > [class*="z-depth-"] {
      box-shadow: none !important;
    }

    /* Z-DEPTHS */

    @each $depth, $shadow in $z-depths {

      &.z-depth-#{$depth}:before {
        @include z-depth ( $depth );
      }

    }

  }

  /* HORIZONTAL GUTTER */

  > .multiple.no-wrap {

    &:not(:first-child) {
      margin-left: $gutter-half;
    }

    &:not(:last-child) {
      margin-right: $gutter-half;
    }

  }

  /* MULTIPLE SUB SPACER */

  > .multiple-sub-spacer {

    display: none;

    &:first-child,
    &:last-child {
      display: block;
      flex-grow: 1;
      flex-basis: 0;
      margin: 0;
    }

    &:first-child {
      order: 1;
    }

    &:last-child {
      order: 3;
    }

  }

  /* MULTIPLE SUB */

  & > .multiple-sub {

    //FIXME: It doesn't work very well if we don't wrap plain text in a `p` ( the `p` has a margin-bottom)

    flex-grow: 0 !important;
    flex-basis: 0;
    align-self: center;
    margin: 0 !important;

    > .multiple {

      display: flex;
      flex-wrap: nowrap;

      > * {
        flex-shrink: 0;
      }

    }

    &.left {
      order: 0;
      margin-right: - $gutter-half !important;
      margin-left: $gutter-half !important;
    }

    &.center {

      order: 2;

      > .multiple {
        justify-content: center;
      }

    }

    &.right {

      order: 4;
      margin-right: $gutter-half !important;
      margin-left: - $gutter-half !important;

      > .multiple {
        justify-content: flex-end;
      }

    }

  }

}

/* MULTIPLE IN TABLE CELL */

table > :not(tfoot) td .multiple:only-child { //INFO: Here the `multiple` shouldn't take as much space as possible (`display: flex`) but just the required, so that the columns can be better spaced //FIXME: It's ugly
  display: inline-flex;
}
