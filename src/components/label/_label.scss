
/* =========================================================================
 * Svelto - Label v0.3.0
 * =========================================================================
 * Copyright (c) 2015 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @requires _settings.scss
 * @requires ../widget/_widget.scss
 * @requires ../icons/_settings.scss
 * ========================================================================= */

/* DEFAULT */

label {
  @extend .widget;
  display: block;
}

/* LABEL */

.label {

  @extend .widget;
  @include color ( $label-color, $label-color-basic );
  font-weight: bold;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border-radius: $label-border-radius;
  padding: $label-vertical-padding $label-horizontal-padding;
  min-height: $line-height-em + ( $label-vertical-padding * 2 );
  min-width: $line-height-em + ( $label-horizontal-padding * 2 );

  /* CHILDREN NO MARGIN BOTTOM */

  > :not(.label-left):not(.label-right) {
    margin-bottom: 0 !important;
  }

  /* TEXT GROW */

  > :not(.label-left):not(.label-right):not(i.icon) {
    flex-grow: 1;
  }

  /* OUTLINED */

  &.outlined { //FIXME: Ugly fix for keeping the aspect ratio even in this condition
    min-height: calc(#{$line-height-em + ( $label-vertical-padding * 2 )} + #{$outline-width * 2});
    min-width: calc(#{$line-height-em + ( $label-horizontal-padding * 2 )} + #{$outline-width * 2});
  }

  /* COMPACT */

  &.compact {

    padding: $label-compact-vertical-padding $label-compact-horizontal-padding;
    min-height: $line-height-em + ( $label-compact-vertical-padding * 2 );
    min-width: $line-height-em + ( $label-compact-horizontal-padding * 2 );

    &.outlined { //FIXME: Ugly fix for keeping the aspect ratio even in this condition
      min-height: calc(#{$line-height-em + ( $label-compact-vertical-padding * 2 )} + #{$outline-width * 2});
      min-width: calc(#{$line-height-em + ( $label-compact-horizontal-padding * 2 )} + #{$outline-width * 2});
    }

  }

  /* FLUID */

  &.fluid {
    display: flex;
  }

  /* LEFT / RIGHT */

  > .label-left,
  > .label-right {
    @include last-child-no-gutter ();
    display: inline-flex;
    align-self: stretch;
    align-items: center;
    justify-content: center;
    background-color: $label-left-right-bg-color;
    padding: $label-compact-vertical-padding $label-compact-horizontal-padding;
    min-height: $line-height-em + ( $label-compact-vertical-padding * 2 );
    min-width: $line-height-em + ( $label-compact-horizontal-padding * 2 );
  }

  > .label-left {
    @include border-left-radius ( inherit );
    margin: ( - $label-vertical-padding ) $label-horizontal-padding ( - $label-vertical-padding ) ( - $label-horizontal-padding ) !important; //FIXME: The `!important` shouldn't be needed
  }

  > .label-right {
    @include border-right-radius ( inherit );
    margin: ( - $label-vertical-padding ) ( - $label-horizontal-padding ) ( - $label-vertical-padding ) $label-horizontal-padding !important; //FIXME: The `!important` shouldn't be needed
  }

  &.compact {

    > .label-left {
      margin: ( - $label-compact-vertical-padding ) $label-compact-horizontal-padding ( - $label-compact-vertical-padding ) ( - $label-compact-horizontal-padding ) !important; //FIXME: The `!important` shouldn't be needed
    }

    > .label-right {
      margin: ( - $label-compact-vertical-padding ) ( - $label-compact-horizontal-padding ) ( - $label-compact-vertical-padding ) $label-compact-horizontal-padding !important; //FIXME: The `!important` shouldn't be needed
    }

  }

  &.outlined {

    > .label-left {
      border-right: 1px solid;
      border-color: inherit !important; //FIXME: The `!important` shouldn't be needed
    }

    > .label-right {
      border-left: 1px solid;
      border-color: inherit !important; //FIXME: The `!important` shouldn't be needed
    }

  }

  /* CENTER */

  > :not(.label):not(.label-left) + :not(.label-right):not(i.icon) {
    padding-left: $label-center-extra-spacing;
  }

  > :not(.label):not(.label-left) + i.icon { //FIXME: Ugly fix for normalizing the icons scale factor
    padding-left: $label-center-extra-spacing / $icon-scale-amount;
  }

  &.compact {

    > :not(.label):not(.label-left) + :not(.label-right):not(i.icon) {
      padding-left: $label-compact-center-extra-spacing;
    }

    > :not(.label):not(.label-left) + i.icon { //FIXME: Ugly fix for normalizing the icons scale factor
      padding-left: $label-compact-center-extra-spacing / $icon-scale-amount;
    }

  }

  /* BADGE */

  &.badge {

    position: absolute;
    margin: 0;

    &.top-left {
      top: $label-badge-spacing;
      left: $label-badge-spacing;
    }

    &.top-right {
      top: $label-badge-spacing;
      right: $label-badge-spacing;
    }

    &.bottom-left {
      bottom: $label-badge-spacing;
      left: $label-badge-spacing;
    }

    &.bottom-right {
      bottom: $label-badge-spacing;
      right: $label-badge-spacing;
    }

  }

  /* FLOATING */

  &.floating {

    //TODO: add sub floating actions
    @include z-depth ( $label-floating-z-depth );
    position: fixed;
    z-index: 10;
    right: $label-floating-right;
    bottom: $label-floating-bottom;
    margin-bottom: 0;
    padding: $label-floating-vertical-padding $label-floating-horizontal-padding;
    min-height: $line-height-em + ( $label-floating-vertical-padding * 2 );
    min-width: $line-height-em + ( $label-floating-horizontal-padding * 2 );

    &.compact {
      padding: $label-floating-compact-vertical-padding $label-floating-compact-horizontal-padding;
      min-height: $line-height-em + ( $label-floating-compact-vertical-padding * 2 );
      min-width: $line-height-em + ( $label-floating-compact-horizontal-padding * 2 );
    }

  }

  /* RIBBON */

  &.ribbon {

    position: absolute;

    &.ribbon-left:before,
    &.ribbon-right:after {
      position: absolute;
      z-index: -1;
      content: '';
      border: $label-ribbon-size solid transparent;
      border-top-color: inherit;
      bottom: - $label-ribbon-size * 2;
    }

    &.ribbon-left {

      @include border-left-radius ( 0 );
      left: - ( $gutter + $label-ribbon-size - ( $outline-width * 2 ) );
      padding-left: calc(#{$label-horizontal-padding} + #{$gutter});

      &:before {
        left: 0;
        border-right-color: inherit;
      }

    }

    &.ribbon-right {

      @include border-right-radius ( 0 );
      right: - ( $gutter + $label-ribbon-size - ( $outline-width * 2 ) );
      padding-right: calc(#{$label-horizontal-padding} + #{$gutter});

      &:after {
        right: 0;
        border-left-color: inherit;
      }

    }

    &.outlined {

      &.ribbon-left:before,
      &.ribbon-right:after {
        bottom: - ( $label-ribbon-size * 2 + $outline-width );
      }

      &.ribbon-left:before {
        left: - $outline-width;
      }

      &.ribbon-right:after {
        right: - $outline-width;
      }

    }

  }

}

/* LABEL CORNER */

&.label-corner {

  position: absolute;
  z-index: 10;
  visibility: hidden;
  overflow: hidden;
  pointer-events: none;

  &.top-left {

    top: 0;
    left: 0;
    border-top-left-radius: inherit;

    & > .label {
      transform: translateX(-($label-corner-horizontal-padding * 2 / 4 + $line-height-em / 8)) translateY(-($label-corner-vertical-padding * 2 / 4 + $line-height-em / 8 ));
    }

    &:before {
      top: 0;
      left: 0;
      transform: translateX(-( $line-height-em + ( $label-corner-horizontal-padding * 2 ) ) / $SQRT2) translateY(-( $line-height-em + ( $label-corner-vertical-padding * 2 ) ) / $SQRT2) rotate(45deg);
    }

  }

  &.top-right {

    top: 0;
    right: 0;
    border-top-right-radius: inherit;

    > .label {
      transform: translateX($label-corner-horizontal-padding * 2 / 4 + $line-height-em / 8) translateY(-($label-corner-vertical-padding * 2 / 4 + $line-height-em / 8));
    }

    &:before {
      top: 0;
      right: 0;
      transform: translateX(( $line-height-em + ( $label-corner-horizontal-padding * 2 ) ) / $SQRT2) translateY(-( $line-height-em + ( $label-corner-vertical-padding * 2 ) ) / $SQRT2) rotate(45deg);
    }

  }

  &.bottom-left {

    bottom: 0;
    left: 0;
    border-bottom-left-radius: inherit;

    > .label {
      transform: translateX(-($label-corner-horizontal-padding * 2 / 4 + $line-height-em / 8)) translateY($label-corner-vertical-padding * 2 / 4 + $line-height-em / 8);
    }

    &:before {
      bottom: 0;
      left: 0;
      transform: translateX(-( $line-height-em + ( $label-corner-horizontal-padding * 2 ) ) / $SQRT2) translateY(( $line-height-em + ( $label-corner-vertical-padding * 2 ) ) / $SQRT2) rotate(45deg);
    }

  }

  &.bottom-right {

    bottom: 0;
    right: 0;
    border-bottom-right-radius: inherit;

    > .label {
      transform: translateX($label-corner-horizontal-padding * 2 / 4 + $line-height-em / 8) translateY($label-corner-vertical-padding * 2 / 4 + $line-height-em / 8);
    }

    &:before {
      bottom: 0;
      right: 0;
      transform: translateX(( $line-height-em + ( $label-corner-horizontal-padding * 2 ) ) / $SQRT2) translateY(( $line-height-em + ( $label-corner-vertical-padding * 2 ) ) / $SQRT2) rotate(45deg);
    }

  }

  &:before {
    position: absolute;
    content: '';
    height: ( $line-height-em + ( $label-corner-vertical-padding * 2 ) ) * $SQRT2;
    width: ( $line-height-em + ( $label-corner-horizontal-padding * 2 ) ) * $SQRT2;
    background-color: inherit;
    visibility: visible;
    pointer-events: auto;
  }

  > .label {
    padding: $label-corner-vertical-padding $label-corner-horizontal-padding;
    height: $line-height-em + ( $label-corner-vertical-padding * 2 );
    width: $line-height-em + ( $label-corner-horizontal-padding * 2 );
    margin: 0;
    border-radius: 0;
    background-color: transparent !important;
    color: inherit;
    margin: 0;
    visibility: visible;
  }

}

/* LABEL TAG */

.label-tag {

  margin-bottom: $gutter;

  & > .label {

    margin-left: ( $label-tag-smooth-size * $SQRT2 ) / 2 - $label-border-radius;
    margin-bottom: 0;

    &:before,
    &:after {
      content: '';
      position: absolute;
      top: 50%;
      height: $label-tag-smooth-size;
      width: $label-tag-smooth-size;
      transform: translateX(50%) translateY(-50%) rotate(45deg);
    }

    &:before {
      @include color ( 'inherit' );
      z-index: -1;
    }

    &:after {
      background-color: $label-tab-circle-background-color;
      border-radius: 50%;
      box-shadow: $label-tag-circle-box-shadow;
      transform: translateX(50%) translateY(-50%) rotate(45deg) scale($label-tag-circle-scale);
    }

    &.compact {

      margin-left: ( $label-tag-smooth-compact-size * $SQRT2 ) / 2 - $label-border-radius;

      &:before,
      &:after {
        height: $label-tag-smooth-compact-size;
        width: $label-tag-smooth-compact-size;
      }

    }

    &.outlined {

      border-left-width: 0;

      &:before {
        border-width: $outline-width;
        border-style: solid;
      }

    }

    &:not(.sharp) {

      &:before,
      &:after {
        right: calc(100% - #{$label-border-radius / 2});
      }

      &:before {
        border-radius: $label-border-radius;
      }

    }

    &.sharp {

      margin-left: ( $label-tag-sharp-size * $SQRT2 ) / 2;

      &:before,
      &:after {
        height: $label-tag-sharp-size;
        width: $label-tag-sharp-size;
        right: 100%;
      }

      &.compact {

        margin-left: ( $label-tag-sharp-compact-size * $SQRT2 ) / 2;

        &:before,
        &:after {
          height: $label-tag-sharp-compact-size;
          width: $label-tag-sharp-compact-size;
        }

      }

    }

    /* COLORS */

    @each $name, $datas in $colors {

      $bg: nth($datas, 1);

      &.tag-circle-#{$name}:after {
        background-color: $bg;
      }

    }

  }

}
