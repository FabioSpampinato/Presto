
/* =========================================================================
 * Svelto - Grid v0.1.0
 * =========================================================================
 * Copyright (c) 2015 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @requires _settings.scss
 * @requires ../mixins/_responsive.scss
 * ========================================================================= */

/* GRID WIDTHS */

// XSMALL

@include xsmall-up {

  @for $nr from 1 through $grid-columns {

    $percentage: ( 100% / $grid-columns ) * $nr;

    .xs-#{$nr} {
      width: $percentage;
    }

    .multiple-wrp > .multiple > :not(.multiple-wrp).xs-#{$nr}, //FIXME: Is too ugly, and we generate too much CSS
    .multiple-wrp > .multiple > .multiple-wrp:not(:not(.no-wrap):not(.vertical):not(.joined)).xs-#{$nr} { //FIXME: Is too ugly, and we generate too much CSS
      width: calc(#{$percentage} - #{$gutter});
    }

  }

}

// SMALL

@include small-up {

  @for $nr from 1 through $grid-columns {

    $percentage: ( 100% / $grid-columns ) * $nr;

    .sm-#{$nr} {
      width: $percentage;
    }

    .multiple-wrp > .multiple > :not(.multiple-wrp).sm-#{$nr}, //FIXME: Is too ugly, and we generate too much CSS
    .multiple-wrp > .multiple > .multiple-wrp:not(:not(.no-wrap):not(.vertical):not(.joined)).sm-#{$nr} { //FIXME: Is too ugly, and we generate too much CSS
      width: calc(#{$percentage} - #{$gutter});
    }

  }

}

// MEDIUM

@include medium-up {

  @for $nr from 1 through $grid-columns {

    $percentage: ( 100% / $grid-columns ) * $nr;

    .md-#{$nr} {
      width: $percentage;
    }

    .multiple-wrp > .multiple > :not(.multiple-wrp).md-#{$nr}, //FIXME: Is too ugly, and we generate too much CSS
    .multiple-wrp > .multiple > .multiple-wrp:not(:not(.no-wrap):not(.vertical):not(.joined)).md-#{$nr} { //FIXME: Is too ugly, and we generate too much CSS
      width: calc(#{$percentage} - #{$gutter});
    }

  }

}

// LARGE

@include large-up {

  @for $nr from 1 through $grid-columns {

    $percentage: ( 100% / $grid-columns ) * $nr;

    .lg-#{$nr} {
      width: $percentage;
    }

    .multiple-wrp > .multiple > :not(.multiple-wrp).lg-#{$nr}, //FIXME: Is too ugly, and we generate too much CSS
    .multiple-wrp > .multiple > .multiple-wrp:not(:not(.no-wrap):not(.vertical):not(.joined)).lg-#{$nr} { //FIXME: Is too ugly, and we generate too much CSS
      width: calc(#{$percentage} - #{$gutter});
    }

  }

}

// XLARGE

@include xlarge-up {

  @for $nr from 1 through $grid-columns {

    $percentage: ( 100% / $grid-columns ) * $nr;

    .xl-#{$nr} {
      width: $percentage;
    }

    .multiple-wrp > .multiple > :not(.multiple-wrp).xl-#{$nr}, //FIXME: Is too ugly, and we generate too much CSS
    .multiple-wrp > .multiple > .multiple-wrp:not(:not(.no-wrap):not(.vertical):not(.joined)).xl-#{$nr} { //FIXME: Is too ugly, and we generate too much CSS
      width: calc(#{$percentage} - #{$gutter});
    }

  }

}
