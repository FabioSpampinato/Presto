
/* TABLE */

//TODO: Add responsive tables
//TODO: Add .reflow (see bootstrap v4)
//TODO: Better .outlined support, we should outlined the header and footer and use their borders
//TODO: Add ability to easily set per-columm text alignment

table.table { //INFO: So that if we need a plain basic table we can, just by don't using the `table` class

    @extend %widget;
    @include color ( $table-color, $table-color-basic );
    width: 100%;
    border-collapse: separate;
    border-radius: inherit;

    /* CELLS */

    & > * > tr > * {
        @include last-child-gutter-fix ();
        padding: $layout-gutter;
        text-align: left;
        border-width: 0;
        border-style: solid;
        border-color: $table-bordered-border-color ;
    }

    /* THEAD */

    & > thead {

        @include border-top-radius ( inherit );
        background-color: $table-header-footer-bg-color;

        & > tr {

            @include border-top-radius ( inherit );

            &:first-child > th {

                &:first-child {
                    border-top-left-radius: inherit;
                }

                &:last-child {
                    border-top-right-radius: inherit;
                }

            }

        }

    }

    /* TBODY */

    & > tbody {

        border-radius: inherit;

        & > tr {

            &.empty > td {
                height: $table-row-empty-height;
                text-align: center;
            }

            &:first-child, &.empty + tr {

                @include border-top-radius ( inherit );

                & > td {

                    &:first-child {
                        border-top-left-radius: inherit;
                    }

                    &:last-child {
                        border-top-right-radius: inherit;
                    }

                }

            }

            &:last-child {

                @include border-bottom-radius ( inherit );

                & > td {

                    &:first-child {
                        border-bottom-left-radius: inherit;
                    }

                    &:last-child {
                        border-bottom-right-radius: inherit;
                    }

                }

            }

        }

    }

    & > thead ~ tbody > tr:first-child > td, & > thead ~ tbody > .empty + tr > td {

        &:first-child {
            border-top-left-radius: 0;
        }

        &:last-child {
            border-top-right-radius: 0;
        }

    }

    & > tfoot + tbody > tr:last-child > td {

        &:first-child {
            border-bottom-left-radius: 0;
        }

        &:last-child {
            border-bottom-right-radius: 0;
        }

    }

    /* TFOOT */

    & > tfoot {

        @include border-bottom-radius ( inherit );
        background-color: $table-header-footer-bg-color;

        & > tr {

            @include border-bottom-radius ( inherit );

            &:last-child > td {

                &:first-child {
                    border-bottom-left-radius: inherit;
                }

                &:last-child {
                    border-bottom-right-radius: inherit;
                }

            }

        }

    }

    /* COMPACT */

    &.compact > * > tr  > * {
        padding: $layout-gutter-half;
    }

    /* COLLAPSE */

    &.collapse {
        width: auto;
    }

    /* EQUAL */

    &.equal {

        table-layout: fixed;

        & > * > tr  > * {
            width: 100%;
        }

    }

    /* SEPARATED / BORDERED */

    &.separated, &.bordered {

        & > thead > tr > th {
            border-bottom-width: $table-bordered-border-width;
        }

        & > tbody > tr:not(:last-child) > td {
            border-bottom-width: $table-bordered-border-width;
        }

        & > tfoot > tr > td {
            border-top-width: $table-bordered-border-width;
        }

    }

    /* BORDERED */

    &.bordered {

        & > * > tr > * {

            border-left-width: $table-bordered-border-width;

            &:last-child {
                border-right-width: $table-bordered-border-width;
            }

        }

        & > tbody > tr {

            &:first-child > td, &.empty + tr > td {
                border-top-width: $table-bordered-border-width;
            }

            &:last-child > td {
                border-bottom-width: $table-bordered-border-width;
            }

        }

        & > thead {

            & > tr > th {
                border-top-width: $table-bordered-border-width;
            }

            & ~ tbody > tr:first-child > td, & ~ tbody > tr.empty + tr > td {
                border-top-width: 0;
            }

        }

        & > tfoot {

            & > tr > td {
                border-bottom-width: $table-bordered-border-width;
            }

            & + tbody > tr:last-child > td {
                border-bottom-width: 0;
            }

        }

    }

    /* STRIPED */

    &.striped > tbody > tr {

        &:first-child.empty ~ tr {

            &:nth-child(even) {
                background-color: $table-striped-row-even-color;
            }

            &:nth-child(odd) {
                background-color: $table-striped-row-odd-color;
            }

        }

        &:first-child:not(.empty) {

            background-color: $table-striped-row-even-color;

            & ~ tr {

                &:nth-child(odd) {
                    background-color: $table-striped-row-even-color;
                }

                &:nth-child(even) {
                    background-color: $table-striped-row-odd-color;
                }

            }

        }

    }

    /* HOVERABLE */

    &.hoverable > tbody > tr:not(.empty):hover {
        background-color: $table-hoverable-row-even-color-hover;
    }

    /* STRIPED & HOVERABLE */

    &.striped.hoverable > tbody > tr {

        &:first-child.empty ~ tr {

            &:nth-child(even):hover {
                background-color: $table-hoverable-row-even-color-hover;
            }

            &:nth-child(odd):hover {
                background-color: $table-hoverable-row-odd-color-hover;
            }

        }

        &:first-child:not(.empty) {

            &:hover {
                background-color: $table-hoverable-row-even-color-hover;
            }

            & ~ tr {

                &:nth-child(odd):hover {
                    background-color: $table-hoverable-row-even-color-hover;
                }

                &:nth-child(even):hover {
                    background-color: $table-hoverable-row-odd-color-hover;
                }

            }

        }

    }

}
