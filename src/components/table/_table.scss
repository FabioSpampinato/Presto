
/* =========================================================================
 * Svelto - Table v0.2.0
 * =========================================================================
 * Copyright (c) 2015 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @requires _settings.scss
 * ========================================================================= */

/* TABLE */

//TODO: Add responsive tables
//TODO: Add .reflow (see bootstrap v4)
//FIXME: The striped table doesn't work anymore

table.table { //INFO: So that if someone need a plain basic table he can, just by don't using the `table` class

  @extend .widget;
  @include color ( $table-color, $table-color-basic );
  width: 100%;
  border-collapse: separate;
  border-radius: inherit;

  /* CELLS */

  tr > * {
    @include last-child-no-gutter ();
    padding: $gutter;
    text-align: left;
    border-width: 0;
    border-style: solid;
    border-color: $table-bordered-border-color;
  }

  /* THEAD */

  thead {

    @include border-top-radius ( inherit );
    background-color: $table-header-footer-bg-color;

    tr {

      @include border-top-radius ( inherit );

      &:first-child th {

        &:first-child {
          border-top-left-radius: inherit;
        }

        &:last-child {
          border-top-right-radius: inherit;
        }

      }

    }

  }

  /* TBODY */

  tbody {

    border-radius: inherit;

    tr {

      &.table-row-empty td {
        height: $table-row-empty-height;
        text-align: center;
      }

      &:first-child,
      &.table-row-empty + tr {

        @include border-top-radius ( inherit );

        td {

          &:first-child {
            border-top-left-radius: inherit;
          }

          &:last-child {
            border-top-right-radius: inherit;
          }

        }

      }

      &:last-child {

        @include border-bottom-radius ( inherit );

        td {

          &:first-child {
            border-bottom-left-radius: inherit;
          }

          &:last-child {
            border-bottom-right-radius: inherit;
          }

        }

      }

    }

  }

  thead ~ tbody tr:first-child td,
  thead ~ tbody .table-row-empty + tr td {

    &:first-child {
      border-top-left-radius: 0;
    }

    &:last-child {
      border-top-right-radius: 0;
    }

  }

  tfoot + tbody tr:last-child td {

    &:first-child {
      border-bottom-left-radius: 0;
    }

    &:last-child {
      border-bottom-right-radius: 0;
    }

  }

  /* TFOOT */

  tfoot {

    @include border-bottom-radius ( inherit );
    background-color: $table-header-footer-bg-color;

    tr {

      @include border-bottom-radius ( inherit );

      &:last-child td {

        &:first-child {
          border-bottom-left-radius: inherit;
        }

        &:last-child {
          border-bottom-right-radius: inherit;
        }

      }

    }

  }

  /* COMPACT */

  &.compact tr > * {
    padding: $gutter-half;
  }

  /* COLLAPSE */

  &.collapse {
    width: auto;
  }

  /* EQUAL */

  &.equal {

    table-layout: fixed;

    tr > * {
      width: 100%;
    }

  }

  /* SEPARATED / BORDERED */

  &.separated,
  &.bordered {

    thead th {
      border-bottom-width: $table-bordered-border-width;
    }

    tbody tr:not(:last-child) td {
      border-bottom-width: $table-bordered-border-width;
    }

    tfoot td {
      border-top-width: $table-bordered-border-width;
    }

  }

  /* BORDERED */

  &.bordered {

    tr > * {

      border-left-width: $table-bordered-border-width;

      &:last-child {
        border-right-width: $table-bordered-border-width;
      }

    }

    tbody tr {

      &:first-child td,
      &.table-row-empty + tr td {
        border-top-width: $table-bordered-border-width;
      }

      &:last-child td {
        border-bottom-width: $table-bordered-border-width;
      }

    }

    thead {

      th {
        border-top-width: $table-bordered-border-width;
      }

      ~ tbody tr:first-child td,
      ~ tbody tr.table-row-empty + tr td {
        border-top-width: 0;
      }

    }

    tfoot {

      td {
        border-bottom-width: $table-bordered-border-width;
      }

      + tbody tr:last-child td {
        border-bottom-width: 0;
      }

    }

  }

  /* STRIPED */

  &.striped tbody tr {

    &:first-child.table-row-empty ~ tr {

      &:nth-child(even) {
        background-color: $table-striped-row-even-color;
      }

      &:nth-child(odd) {
        background-color: $table-striped-row-odd-color;
      }

    }

    &:first-child:not(.table-row-empty) {

      background-color: $table-striped-row-even-color;

      ~ tr {

        &:nth-child(odd) {
          background-color: $table-striped-row-even-color;
        }

        &:nth-child(even) {
          background-color: $table-striped-row-odd-color;
        }

      }

    }

  }

  /* HOVERABLE */

  &.hoverable tbody tr:not(.table-row-empty):hover {
    background-color: $table-hoverable-row-even-color-hover;
  }

  /* STRIPED & HOVERABLE */

  &.striped.hoverable tbody tr {

    &:first-child.table-row-empty ~ tr {

      &:nth-child(even):hover {
        background-color: $table-hoverable-row-even-color-hover;
      }

      &:nth-child(odd):hover {
        background-color: $table-hoverable-row-odd-color-hover;
      }

    }

    &:first-child:not(.table-row-empty) {

      &:hover {
        background-color: $table-hoverable-row-even-color-hover;
      }

      ~ tr {

        &:nth-child(odd):hover {
          background-color: $table-hoverable-row-even-color-hover;
        }

        &:nth-child(even):hover {
          background-color: $table-hoverable-row-odd-color-hover;
        }

      }

    }

  }

}
