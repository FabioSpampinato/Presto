
/* =========================================================================
 * Svelto - Breakpoints (Functions)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require _/map/functions.scss
 * @require _/unit/functions.scss
 * ========================================================================= */

/* BREAKPOINTS */

@function breakpoint-previous ( $breakpoint ) {

  @return map-previous( $breakpoints, $breakpoint );

}

@function breakpoint-next ( $breakpoint ) {

  @return map-next( $breakpoints, $breakpoint );

}

@function breakpoint-min ( $breakpoint ) {

  $value: map-get( $breakpoints, $breakpoint );

  @return if( unit-strip( $value ) != 0, $value, null );

}

@function breakpoint-max ( $breakpoint ) {

  $value: breakpoint-next( $breakpoint );

  @return if( $value, breakpoint-min( $value ) - .01px, null );

}

/* CLASSES */

//TODO: Write in a more general way, using a str-repeat and a map

@function breakpoints-get-classes () {

  $shorthands: (
    'xxxxsmall': 'xxxxs',
    'xxxsmall': 'xxxs',
    'xxsmall': 'xxs',
    'xsmall': 'xs',
    'small': 'sm',
    'medium': 'md',
    'large': 'lg',
    'xlarge': 'xl',
    'xxlarge': 'xxl',
    'xxxlarge': 'xxxl',
    'xxxxlarge': 'xxxxl'
  );

  $classes: ();

  @each $breakpoint, $value in $breakpoints {

    $shorthand: map-get( $shorthands, $breakpoint );

    $classes: append( $classes, if( $shorthand, $shorthand, $breakpoint ) );

  }

  @return $classes;

}
