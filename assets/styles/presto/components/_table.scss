
/* TABLE */

//TODO: Add responsive tables
//TODO: Add ability to easily set per-columm text alignment
//TODO: add .equal
//TODO: add .collapse (not width:100%)
//TODO: add .compact

table.table { //INFO: So that if we need a plain basic table we can, just by don't using the `table` class

    @extend %widget;
    @include color ( $table-color, $table-color-basic );
    width: 100%;

    /* CELLS */

    & > * {

        border-color: $table-bordered-border-color !important;
        border-style: solid;
        border-width: 0;

        & > tr {

            border-color: $table-bordered-border-color !important;
            border-style: solid;
            border-width: 0;

            & > * {
                @include last-child-gutter-fix ();
                padding: $layout-gutter;
                text-align: left;
                border-color: $table-bordered-border-color  !important;
                border-style: solid;
                border-width: 0;
            }

        }

    }

    /* THEAD */

    & > thead {

        @include color ( $table-header-color, $table-header-color-basic );

        & > tr {

            & > th {
                height: $table-header-min-height;
            }

            &:first-child > th {

                &:first-child {
                    border-top-left-radius: inherit;
                }

                &:last-child {
                    border-top-right-radius: inherit;
                }

            }

        }

    }

    /* TBODY */

    & > tbody {

        @include color ( $table-body-color, $table-body-color-basic );

        & > tr {

            & > td {
                height: $table-row-min-height;
            }

            &.empty > td {
                height: $table-row-empty-min-height;
                text-align: center;
            }

            &:last-child > th {

                &:first-child {
                    border-bottom-left-radius: inherit;
                }

                &:last-child {
                    border-bottom-right-radius: inherit;
                }

            }

        }

    }

    & > tfoot + tbody > tr:last-child > th {

        &:first-child {
            border-bottom-left-radius: inherit;
        }

        &:last-child {
            border-bottom-right-radius: inherit;
        }

    }

    /* TFOOT */

    & > tfoot {

        @include color ( $table-footer-color, $table-footer-color-basic );

        & > tr {

            & > td {
                height: $table-footer-min-height;
            }

            &:last-child > th {

                &:first-child {
                    border-bottom-left-radius: inherit;
                }

                &:last-child {
                    border-bottom-right-radius: inherit;
                }

            }

        }

    }

    /* SEPARATED / BORDERED */

    &.separated, &.bordered {

        & > thead > tr {
            border-bottom-width: ( $table-bordered-border-width * 2 );
        }

        & > tbody > tr:not(:last-child) {
            border-bottom-width: $table-bordered-border-width;
        }

        & > tfoot > tr {
            border-top-width: ( $table-bordered-border-width * 2 );
        }

    }

    /* BORDERED */

    &.bordered {

        & > * > tr > * {

            border-left-width: $table-bordered-border-width;

            &:last-child {
                border-right-width: $table-bordered-border-width;
            }

        }

        & > tbody > tr {

            &:first-child, &.empty + tr {
                border-top-width: $table-bordered-border-width;
            }

            &:last-child {
                border-bottom-width: $table-bordered-border-width;
            }

        }

        & > thead {

            border-top-width: $table-bordered-border-width;

            & ~ tbody > tr:first-child, & ~ tbody > tr.empty + tr {
                border-top-width: 0;
            }

        }

        & > tfoot {

            border-bottom-width: $table-bordered-border-width;

            & + tbody > tr:last-child {
                border-bottom-width: 0;
            }

        }

    }

    /* STRIPED */

    &.striped > tbody > tr {

        &:first-child.empty ~ tr {

            &:nth-child(even) {
                background-color: $table-striped-row-even-color;
            }

            &:nth-child(odd) {
                background-color: $table-striped-row-odd-color;
            }

        }

        &:first-child:not(.empty) {

            background-color: $table-striped-row-even-color;

            & ~ tr {

                &:nth-child(odd) {
                    background-color: $table-striped-row-even-color;
                }

                &:nth-child(even) {
                    background-color: $table-striped-row-odd-color;
                }

            }

        }

    }

    /* HOVERABLE */

    &.hoverable > tbody > tr:not(.empty):hover {
        background-color: $table-hoverable-row-even-color-hover;
    }

    /* STRIPED & HOVERABLE */

    &.striped.hoverable > tbody > tr {

        &:first-child.empty ~ tr {

            &:nth-child(even):hover {
                background-color: $table-hoverable-row-even-color-hover;
            }

            &:nth-child(odd):hover {
                background-color: $table-hoverable-row-odd-color-hover;
            }

        }

        &:first-child:not(.empty) {

            &:hover {
                background-color: $table-hoverable-row-even-color-hover;
            }

            & ~ tr {

                &:nth-child(odd):hover {
                    background-color: $table-hoverable-row-even-color-hover;
                }

                &:nth-child(even):hover {
                    background-color: $table-hoverable-row-odd-color-hover;
                }

            }

        }

    }

}
