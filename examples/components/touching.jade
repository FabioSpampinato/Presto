
extends ../layout.jade

//- Touching

append main
  +divider-block Squares - All matches

  +container.squares_all.outlined
    +multiple
      - var squares_nr = 32;
      - var nr = 1;
      while nr <= squares_nr
        +square.xxxxlarge.centerer
          .small= nr++

  +divider-block Actions

  +multiple.joined
    +input({ name: "input_populate_all", label: "Search number..." }).no-floating.white.text-field-secondary.outlined
    +button("populate_all ()").secondary.outlined Populate

  +divider-block Squares - Most significant match

  +container.squares_most.outlined
    +multiple
      - var squares_nr = 32;
      - var nr = 1;
      while nr <= squares_nr
        +square.xxxxlarge.centerer
          .small= nr++

  +divider-block Actions

  +multiple.joined
    +input({ name: "input_populate_most", label: "Square number..." }).no-floating.white.text-field-secondary.outlined
    +button("populate_most ()").secondary.outlined Populate

  +divider-block Squares - Punctual

  +container.squares_punctual.outlined
    +multiple
      - var squares_nr = 32;
      - var nr = 1;
      while nr <= squares_nr
        +square.xxxxlarge.centerer
          .small= nr++

  +divider-block Actions

  +multiple.joined
    +input({ name: "input_populate_punctual", label: "Square number..." }).no-floating.white.text-field-secondary.outlined
    +button("populate_punctual ()").secondary.outlined Populate

append body-end
  +noty({ body: 'Drag the squares, the green ones are the returned ones', ttl: 'forever' })
  +script.
    // Populate

    function get_squares_html ( nr ) {

      var html = '';

      for ( var i = 0; i < Number(nr); i++ ) {
        html += '<div class="square xxxxlarge centerer" style=""><div class="small">' + (i + 1) + '</div></div>';
      }

      return html;

    }

    function populate_all () {

      $('.squares_all .multiple').empty ().append ( get_squares_html ( $('input[name="input_populate_all"]').val () ) );

      init_drag_all ();

    }

    function populate_most () {

      $('.squares_most .multiple').empty ().append ( get_squares_html ( $('input[name="input_populate_most"]').val () ) );

      init_drag_most ();

    }

    function populate_punctual () {

      $('.squares_punctual .multiple').empty ().append ( get_squares_html ( $('input[name="input_populate_punctual"]').val () ) );

      init_drag_punctual ();

    }

    // Dragging

    function init_drag_all () {

      dragging ( '.squares_all .square', 'all' );

    }

    function init_drag_most () {

      dragging ( '.squares_most .square', 'most' );

    }

    function init_drag_punctual () {

      dragging ( '.squares_punctual .square', 'punctual' );

    }

    function dragging ( selector, select ) {

      var $squares = $(selector);

      $squares.draggable ({
        revertable: true,
        callbacks: {
          move: function ( data ) {
            $squares.removeClass ( 'green' );
            if ( select === 'punctual') {
              $squares.touching ({ point: data.moveXY, $not: data.$draggable }).addClass ( 'green' );
            } else {
              $squares.touching ({ $comparer: data.$draggable, $not: data.$draggable, select: select }).addClass ( 'green' );
            }
          },
          end: function () {
            $squares.removeClass ( 'green' );
          }
        }
      });

    }

    // Ready

    $(function () {
      init_drag_all ();
      init_drag_most ();
      init_drag_punctual ();
    });
