
/* =========================================================================
 * Svelto - Helpers - Map (Functions)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * ========================================================================= */

/* MAP */

@function map-previous ( $map, $key ) {

  $all: map-keys( $map );
  $index: index( $all, $key );

  @return if( $index > 1, nth( $all, $index - 1 ), null );

}

@function map-next ( $map, $key ) {

  $all: map-keys( $map );
  $index: index( $all, $key );

  @return if( $index < length( $all ), nth( $all, $index + 1 ), null );

}

/* DEEP */

//SOURCE: https://css-tricks.com/snippets/sass/deep-getset-maps

@function map-deep-get($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}

@function map-deep-set($map, $keys, $value) {
  $maps: ($map,);
  $result: null;

  // If the last key is a map already
  // Warn the user we will be overriding it with $value
  @if type-of(nth($keys, -1)) == "map" {
    @warn "The last key you specified is a map; it will be overrided with `#{$value}`.";
  }

  // If $keys is a single key
  // Just merge and return
  @if length($keys) == 1 {
    @return map-merge($map, ($keys: $value));
  }

  // Loop from the first to the second to last key from $keys
  // Store the associated map to this key in the $maps list
  // If the key doesn't exist, throw an error
  @for $i from 1 through length($keys) - 1 {
    $current-key: nth($keys, $i);
    $current-map: nth($maps, -1);
    $current-get: map-get($current-map, $current-key);
    @if $current-get == null {
      @error "Key `#{$key}` doesn't exist at current level in map.";
    }
    $maps: append($maps, $current-get);
  }

  // Loop from the last map to the first one
  // Merge it with the previous one
  @for $i from length($maps) through 1 {
    $current-map: nth($maps, $i);
    $current-key: nth($keys, $i);
    $current-val: if($i == length($maps), $value, $result);
    $result: map-merge($current-map, ($current-key: $current-val));
  }

  // Return result
  @return $result;
}


/* =========================================================================
 * Svelto - Helpers - Units (Fuctions)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * ========================================================================= */

/* UNITS */

@function unit-strip ( $num ) {

  @return $num / ( $num * 0 + 1 );

}


/* =========================================================================
 * Svelto - Breakpoints (Functions)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../helpers/map/functions.scss
 * @require ../helpers/units/functions.scss
 * ========================================================================= */

/* BREAKPOINTS */

@function breakpoint-previous ( $breakpoint ) {

  @return map-previous( $breakpoints, $breakpoint );

}

@function breakpoint-next ( $breakpoint ) {

  @return map-next( $breakpoints, $breakpoint );

}

@function breakpoint-min ( $breakpoint ) {

  $value: map-get( $breakpoints, $breakpoint );

  @return if( unit-strip( $value ) != 0, $value, null );

}

@function breakpoint-max ( $breakpoint ) {

  $value: breakpoint-next( $breakpoint );

  @return if( $value, breakpoint-min( $value ) - .01px, null );

}

/* CLASSES */

@function breakpoints-get-classes () {

  //TODO: Write in a more general way, using a str-repeat and a map

  $shorthands: (
    'xxxxsmall': 'xxxxs',
    'xxxsmall': 'xxxs',
    'xxsmall': 'xxs',
    'xsmall': 'xs',
    'small': 'sm',
    'medium': 'md',
    'large': 'lg',
    'xlarge': 'xl',
    'xxlarge': 'xxl',
    'xxxlarge': 'xxxl',
    'xxxxlarge': 'xxxxl'
  );

  $classes: ();

  @each $breakpoint, $value in $breakpoints {

    $shorthand: map-get( $shorthands, $breakpoint );

    $classes: append( $classes, if( $shorthand, $shorthand, $breakpoint ) );

  }

  @return $classes;

}


/* =========================================================================
 * Svelto - Helpers - Selector (Functions)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * ========================================================================= */

/* QUANTITY */

//SOURCE: https://github.com/danielguillan/quantity-queries

// -----------------------------------------------------------------------------
// 1. Last Simple Selector
// -----------------------------------------------------------------------------

/// Find the last simple selector in a given selector
/// @access private
/// @param  {list | string} $selector - A single selector
/// @return {string}                  - The last simple selector in $selector
/// @example scss
///   $result: _last-simple-selector(ul > li); // li

@function _last-simple-selector($selector) {
    $parsed: selector-parse($selector);

    @if length($parsed) > 1 {
      @error '`#{$selector}` contains #{length($parsed)} selectors and the `_last-simple-selector()`function accepts only 1.';
    }
    $last-simple-selector: nth(nth($parsed, 1), -1);

    @return $last-simple-selector;
}

// -----------------------------------------------------------------------------
// 2. Build Quantity Selector
// -----------------------------------------------------------------------------

/// Builds the selector for the quantity query
/// @access private
/// @param  {string} $selector-append      - The selector to be appended
/// @param  {string} $last-selector        - The item's selector
/// @return {list}                         - The final quantity query selector

@function _build-quantity-selector($selector-append, $last-selector) {
    $quantity-selector: ();

    @each $s in & {
        $last-simple-selector: '~' + if($last-selector, $last-selector, _last-simple-selector($s));
        $sel: selector-append($s, $selector-append);
        $sel2: selector-nest($sel, $last-simple-selector);
        $quantity-selector: append($quantity-selector, $sel, 'comma');
        $quantity-selector: append($quantity-selector, $sel2 , 'comma');
    }

    @return $quantity-selector;
}


/* =========================================================================
 * Svelto - Sizes (Functions)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * ========================================================================= */

/* SIZE */

@function size-from-icon-size ( $icon-size ) {

  // Returning the proper font-size at which the icons will look `$icon-size`x`$icon-size`

  @return ( $icon-size / $font-size / $icon-scale-amount ) * 1em;

}
