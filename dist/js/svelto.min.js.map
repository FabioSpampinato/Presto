!function(t,e,i,s){"use strict";t.mixin({nowSecs:function(){return t.floor(t.now()/1e3)},timeAgo:function(e){var i=t.nowSecs()-e,s=5,n=["year","month","week","day","hour","minute","second"],o=[31536e3,2592e3,604800,86400,3600,60,1];if(s>i)return{str:"Just now",next:s-i};for(var r=0,a=o.length;a>r;r++){var h=n[r],c=o[r],l=t.floor(i/c);if(l>=1)return{str:l+" "+h+(l>1?"s":"")+" ago",next:c-(i-l*c)}}},fuzzyMatch:function(t,e,i){i!==!1&&(t=t.toLowerCase(),e=e.toLowerCase());for(var s=-1,n=t.length,o=0,r=e.length;r>o;o++){for(var a=s+1;n>a;a++)t[a]===e[o]&&(s=a,a=n+1);if(a===n)return!1}return!0},clamp:function(e,i,s){return t.isUndefined(e)||e>i&&(i=e),t.isUndefined(s)||i>s&&(i=s),i},btEach:function(e,i,s){for(var n,o=0,r=e.length-1,a=t.isNumber(s)?s:t.ceil((o+r)/2);r>=o;){if(n=i.call(e[a],a,e[a]),0>n)r=a-1;else{if(!(n>0))return a;o=a+1}a=t.ceil((o+r)/2)}return-1},"true":t.constant(!0),"false":t.constant(!1)})}(_,window,document),function(t,e,i,s,n){"use strict";t.easing={def:"easeOutQuad",swing:function(e,i,s,n,o){return t.easing[t.easing.def](e,i,s,n,o)},linear:function(t,e,i,s,n){return(s-i)/n*e+i},easeInQuad:function(t,e,i,s,n){return s*(e/=n)*e+i},easeOutQuad:function(t,e,i,s,n){return-s*(e/=n)*(e-2)+i},easeInOutQuad:function(t,e,i,s,n){return(e/=n/2)<1?s/2*e*e+i:-s/2*(--e*(e-2)-1)+i},easeInCubic:function(t,e,i,s,n){return s*(e/=n)*e*e+i},easeOutCubic:function(t,e,i,s,n){return s*((e=e/n-1)*e*e+1)+i},easeInOutCubic:function(t,e,i,s,n){return(e/=n/2)<1?s/2*e*e*e+i:s/2*((e-=2)*e*e+2)+i},easeInQuart:function(t,e,i,s,n){return s*(e/=n)*e*e*e+i},easeOutQuart:function(t,e,i,s,n){return-s*((e=e/n-1)*e*e*e-1)+i},easeInOutQuart:function(t,e,i,s,n){return(e/=n/2)<1?s/2*e*e*e*e+i:-s/2*((e-=2)*e*e*e-2)+i},easeInQuint:function(t,e,i,s,n){return s*(e/=n)*e*e*e*e+i},easeOutQuint:function(t,e,i,s,n){return s*((e=e/n-1)*e*e*e*e+1)+i},easeInOutQuint:function(t,e,i,s,n){return(e/=n/2)<1?s/2*e*e*e*e*e+i:s/2*((e-=2)*e*e*e*e+2)+i},easeInSine:function(t,e,i,s,n){return-s*Math.cos(e/n*(Math.PI/2))+s+i},easeOutSine:function(t,e,i,s,n){return s*Math.sin(e/n*(Math.PI/2))+i},easeInOutSine:function(t,e,i,s,n){return-s/2*(Math.cos(Math.PI*e/n)-1)+i},easeInExpo:function(t,e,i,s,n){return 0==e?i:s*Math.pow(2,10*(e/n-1))+i},easeOutExpo:function(t,e,i,s,n){return e==n?i+s:s*(-Math.pow(2,-10*e/n)+1)+i},easeInOutExpo:function(t,e,i,s,n){return 0==e?i:e==n?i+s:(e/=n/2)<1?s/2*Math.pow(2,10*(e-1))+i:s/2*(-Math.pow(2,-10*--e)+2)+i}}}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";t.reflow=function(){s.documentElement.offsetHeight},t.eventXY=function(e){return e.isPointerEvent&&(e=e.originalEvent),t.browser.hasTouch&&e.originalEvent.touches&&(e=e.originalEvent.changedTouches?e.originalEvent.changedTouches[0]:e.originalEvent.touches[0]),{X:e.pageX,Y:e.pageY}},t(function(){i.$window=t(i),i.$document=t(s),i.$html=t(s.documentElement),i.$body=t(s.body),i.$empty=t()})}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";var o=function(t,e){var i=/[^\w\-\.:]/.test(t)?new Function(o.arg+",tmpl","var _e=_.escape"+o.helper+",_s='"+t.replace(o.regexp,o.func)+"';return _s;"):o.cache[t]=o.cache[t]||o(s.getElementById(t).innerHTML);return e?i(e,o):function(t){return i(t,o)}};o.cache={},o.regexp=/([\s'\\])(?!(?:[^{]|\{(?!%))*%\})|(?:\{%(=|#)([\s\S]+?)%\})|(\{%)|(%\})/g,o.func=function(t,e,i,s,n,o){return e?{"\n":"\\n","\r":"\\r","	":"\\t"," ":" "}[e]||"\\"+e:i?"="===i?"'+_e("+s+")+'":"'+("+s+"==null?'':"+s+")+'":n?"';":o?"_s+='":void 0},o.arg="o",o.helper=",print=function(s,e){_s+=e?(s==null?'':s):_e(s);},include=function(s,d){_s+=tmpl(s,d);}",t.tmpl=o}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";var o=navigator.userAgent.toLowerCase();t.browser={isMobile:/iphone|ipad|android|ipod|opera mini|opera mobile|blackberry|iemobile|webos|windows phone|playbook|tablet|kindle/i.test(o),isTablet:/ipad|playbook|tablet|kindle/i.test(o),isAndroid:/android/i.test(o),isIOS:/(iphone|ipad|ipod)/i.test(o),isMac:/mac/i.test(o),isIE:/msie [\w.]+/.test(o),isChrome:/chrome/i.test(o)},t.browser.hasTouch="ontouchstart"in i&&!(t.browser.isChrome&&!t.browser.isAndroid)}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";t.Pointer={pressDuration:300,doubleTapInterval:300,flickDuration:150,motionThreshold:5};var o=["tap","dbltap","press","dragstart","dragmove","dragend","flick"],r="pointer";e.each(o,function(e){var i=r+e;t.Pointer[e]=i,t.fn[e]=function(t){return t?this.on(i,t):this.trigger(i)}});var a,h,c,l,d,u,p,_,g,f,m,v,w=t.browser.hasTouch?"touchstart":"mousedown",b=t.browser.hasTouch?"touchmove":"mousemove",$=t.browser.hasTouch?"touchend touchcancel":"mouseup mouseleave",y=t(s.documentElement),k=0,x=function(e,i){var s=t.Event(e);return s.originalEvent=i,s.isPointerEvent=!0,s},C=function(i){a=t.eventXY(i),d=i.target,u=t(d),p=i.timeStamp||e.now(),g=!1,v=setTimeout(e.wrap(i,Y),t.Pointer.pressDuration),u.trigger(x(t.Pointer.dragstart,i),{startXY:a}),y.on(b,X),y.on($,T)},Y=function(e){u.trigger(x(t.Pointer.press,e))},X=function(e){clearTimeout(v),h=t.eventXY(e),c={X:h.X-a.X,Y:h.Y-a.Y},(Math.abs(c.X)>t.Pointer.motionThreshold||Math.abs(c.Y)>t.Pointer.motionThreshold)&&(g=!0,u.trigger(x(t.Pointer.dragmove,e),{startXY:a,moveXY:h,deltaXY:c}))},T=function(i){clearTimeout(v),l=t.eventXY(i),c={X:l.X-a.X,Y:l.Y-a.Y},d===i.target&&(_=i.timeStamp||e.now(),t.browser.hasTouch&&g||(u.trigger(x(t.Pointer.tap,i)),_-k<=t.Pointer.doubleTapInterval&&u.trigger(x(t.Pointer.dbltap,i)),k=_),g&&_-p<=t.Pointer.flickDuration&&(Math.abs(c.X)>Math.abs(c.Y)?(f="horizontal",m=c.X>0?1:-1):(f="vertical",m=c.Y>0?1:-1),u.trigger(x(t.Pointer.flick,i),{startXY:a,endXY:l,deltaXY:c,orientation:f,direction:m}))),y.off(b,X),y.off($,T),u.trigger(x(t.Pointer.dragend,i),{startXY:a,endXY:l,deltaXY:c})};y.on(w,C)}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";t.Widget=function(){},t.Widget._childConstructors=[],t.Widget.prototype={widgetOriginalName:"widget",widgetName:"widget",widgetFullName:"widget",defaultElement:!1,templates:{},options:{callbacks:{}},_createWidget:function(i,s){this.initializationType=s?"element":this.defaultElement?"html":this.templates.base?"template":"none",this.options=e.merge({},this.options,this._getCreateOptions(),i),"element"===this.initializationType&&e.merge(this.options,t(s).data(this.widgetName)),s=t(s||this.defaultElement||(this.templates.base?this._tmpl("base",this.options):!1)||this).get(0),this.element=s,this.$element=t(s),this.guid=e.uniqueId(),this.options.disabled=i&&i.disabled?i.disabled:this.$element.hasClass(this.widgetName+"-disabled"),t.data(this.element,this.widgetFullName,this),this._on(!0,this.$element,"remove",function(t){t.target===this.element&&this.destroy()}),this._create(),this._trigger("create",this._getCreateEventData()),this._variables(),this._init(),this._events()},_getCreateOptions:e.noop,_getCreateEventData:e.noop,_create:e.noop,_variables:e.noop,_init:e.noop,_events:e.noop,destroy:function(){this._destroy(),t.removeData(this.element,this.widgetFullName)},_destroy:e.noop,widget:function(){return this.$element},option:function(t,i){if(0===arguments.length)return e.cloneDeep(this.options);var s,o,r,a=t;if("string"==typeof t)if(a={},s=t.split("."),t=s.shift(),s.length){for(o=a[t]=e.extend({},this.options[t]),r=0;r<s.length-1;r++)o[s[r]]=o[s[r]]||{},o=o[s[r]];if(t=s.pop(),1===arguments.length)return o[t]===n?null:o[t];o[t]=i}else{if(1===arguments.length)return this.options[t]===n?null:this.options[t];a[t]=i}return this._setOptions(a),this},_setOptions:function(t){for(var e in t)this._setOption(e,t[e]);return this},_setOption:function(t,e){return this.options[t]=e,"disabled"===t&&this.$element.toggleClass(this.widgetName+"-disabled",!!e),this},enable:function(){return this._setOptions({disabled:!1})},disable:function(){return this._setOptions({disabled:!0})},_on:function(i,s,n,o,r){function a(){if(i||!h.options.disabled&&!h.$element.hasClass(h.widgetName+"-disabled")){var t=e.slice(arguments);return t.push(this),r.apply(h,t)}}var h=this;"boolean"!=typeof i&&(r=o,o=n,n=s,s=i,i=!1),s instanceof t||(r=o,o=n,n=s,s=this.$element),o&&!r&&(r=o,o=!1),r=e.isString(r)?this[r]:r,a.guid=r.guid=r.guid||a.guid||t.guid++,o?s.on(n,o,a):s.on(n,a)},_off:function(t,i,s){s||(s=i,i=t,t=this.$element),s=e.isString(s)?this[s]:s,t.off(i,s)},_trigger:function(t,e){e=e||{},t=t.split(" ");for(var i=0,s=t.length;s>i;i++)this.$element.trigger(this.widgetName+":"+t[i],e),"function"==typeof this.options.callbacks[t[i]]&&this.options.callbacks[t[i]].call(this.element,e)},_delay:function(t,e){var i=this;return setTimeout(function(){t.apply(i,arguments)},e||0)},_tmpl:function(e,i){return t.tmpl(this.widgetOriginalName+"."+e,i)},insertBefore:function(t){return this.$element.insertBefore(t),this},insertAfter:function(t){return this.$element.insertAfter(t),this},prependTo:function(t){return this.$element.prependTo(t),this},appendTo:function(t){return this.$element.appendTo(t),this}}}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";t.widget=function(i,s,n){var o,r,a,h,c={},l=i.split("."),d=l.length>1?l[0]:!1,u=l.length>1?l[1]:l[0];o=d?d+"-"+u:u,n||(n=s,s=t.Widget),d&&(t[d]=t[d]||{}),r=d?t[d][u]:t[u],a=function(t,e){return this._createWidget?void(arguments.length&&this._createWidget(t,e)):new a(t,e)},d?t[d][u]=a:t[u]=a,e.extend(a,r,{_proto:e.extend({},n),_childConstructors:[]}),h=new s,h.options=e.extend({},h.options);for(var p in n)"function"==typeof n[p]?c[p]=function(t){var e=function(){return s.prototype[t].apply(this,arguments)},i=function(e){return s.prototype[t].apply(this,e)};return function(){var s,o=this._super,r=this._superApply;return this._super=e,this._superApply=i,s=n[t].apply(this,arguments),this._super=o,this._superApply=r,s}}(p):c[p]=n[p];a.prototype=e.extend(h,c,{constructor:a,namespace:d,widgetOriginalName:i,widgetName:u,widgetFullName:o});for(var _ in n.templates)t.tmpl.cache[i+"."+_]=t.tmpl(n.templates[_]);if(r){for(var g=0,f=r._childConstructors.length;f>g;g++){var m=r._childConstructors[g].prototype;t.widget(m.namespace?m.namespace+"."+m.widgetName:m.widgetName,a,r._childConstructors[g]._proto)}delete r._childConstructors}else s._childConstructors.push(a);return t.widget.bridge(u,a),a},t.widget.bridge=function(i,s){var o=s.prototype.widgetFullName||i;t.fn[i]=function(i){if(0!==this.length||s.prototype.defaultElement||s.prototype.templates.base){var r="string"==typeof i,a=e.tail(arguments),h=this;return r?this.each(function(){var e,s=t.data(this,o);if("instance"===i)return h=s,!1;if(s&&"function"==typeof s[i]&&"_"!==i.charAt(0))return e=s[i].apply(s,a),e!==s&&e!==n?(h=e,!1):void 0}):(a.length&&(i=e.extend.apply(null,[i].concat(a))),this.each(function(){var e=t.data(this,o);e?e.option(i||{}):t.data(this,o,new s(i,this))})),h}}}}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";t.ui={keyCode:{BACKSPACE:8,COMMA:188,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,LEFT:37,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SPACE:32,TAB:9,UP:38},mouseButton:{LEFT:0,MIDDLE:1,RIGHT:2}}}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";t.widget("presto.accordion",{_variables:function(){this.$accordion=this.$element,this.$expanders=this.$accordion.children(".expander"),this.expanders_instances=Array(this.$expanders.length),this.isMultiple=this.$accordion.hasClass("multiple")},_init:function(){for(var t=0,e=this.$expanders.length;e>t;t++)this.expanders_instances[t]=this.$expanders.eq(t).expander("instance")},_events:function(){this._on("expander:open",".expander",this._handler_open)},_handler_open:function(t,e,i){if(!this.isMultiple)for(var s=0,n=this.$expanders.length;n>s;s++)this.$expanders[s]!==i&&this.expanders_instances[s].close()},toggle:function(t){this.expanders_instances[t].toggle()},toggleAll:function(){e.each(this.expanders_instances,function(t){t.toggle()})},open:function(t){this.expanders_instances[t].open()},openAll:function(){e.each(this.expanders_instances,function(t){t.open()})},close:function(t){this.expanders_instances[t].close()},closeAll:function(){e.each(this.expanders_instances,function(t){t.close()})}}),t(function(){t(".accordion").accordion()})}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";t.widget("presto.autogrow",{options:{minimum_width:0,minimum_height:0,callbacks:{update:e.noop}},_variables:function(){this.$growable=this.$element,this.isInput=this.$growable.is("input"),this.isTextarea=this.$growable.is("textarea")},_init:function(){this.update()},_events:function(){this._on("input change",this.update)},_update_input_width:function(){var t=this._get_input_needed_width(this.$growable);this.$growable.width(Math.max(t,this.options.minimum_width))},_get_input_needed_width:function(){var e=t("<span>"+this.$growable.val()+"</span>");e.css({font:this.$growable.css("font"),position:"absolute",opacity:0}),e.appendTo($body);var i=e.width();return e.remove(),i},_update_textarea_height:function(){var t=this.$growable.height(1).get(0).scrollHeight-parseFloat(this.$growable.css("padding-top"))-parseFloat(this.$growable.css("padding-bottom"));this.$growable.height(Math.max(t,this.options.minimum_height))},update:function(){this.isInput?(this._update_input_width(),this._trigger("update")):this.isTextarea&&(this._update_textarea_height(),this._trigger("update"))}}),t(function(){t("input.autogrow, textarea.autogrow, .input-wrp.autogrow input, .textarea-wrp.autogrow textarea").autogrow()})}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";t.fn.blurred=function(t){return this.toggleClass("blurred",t)}}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";t.fn.btEach=function(t,i){return e.btEach(this,t,i)}}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";t.widget("presto.checkbox",{options:{callbacks:{checked:e.noop,unchecked:e.noop}},_variables:function(){this.$checkbox=this.$element,this.$input=this.$checkbox.find("input")},_init:function(){var t=this.$checkbox.hasClass("checked");this.get()?t||this.$checkbox.addClass("checked"):t&&this.$checkbox.removeClass("checked")},_events:function(){this._on("click",function(){this.toggle()}),this._on(!0,"change",this._handler_change)},_handler_change:function(){var t=this.get();this.$checkbox.toggleClass("checked",t),this._trigger(t?"checked":"unchecked")},get:function(){return this.$input.prop("checked")},toggle:function(t){var i=this.get();e.isUndefined(t)&&(t=!i),t!==i&&(this.$input.prop("checked",t).trigger("change"),this._trigger(t?"checked":"unchecked"))},check:function(){this.toggle(!0)},uncheck:function(){this.toggle(!1)}}),t(function(){t(".checkbox").checkbox()})}(jQuery,_,window,document),function(t,e,i,s){"use strict";e.ColorHelper={hex2rgb:function(t){return{r:this.hex2dec(t.r),g:this.hex2dec(t.g),b:this.hex2dec(t.b)}},hex2hsv:function(t){return this.rgb2hsv(this.hex2rgb(t))},rgb2hex:function(t){return{r:this.dec2hex(t.r),g:this.dec2hex(t.g),b:this.dec2hex(t.b)}},rgb2hsv:function(t){var e,i,s=t.r/255,n=t.g/255,o=t.b/255,r=Math.max(s,n,o),a=r-Math.min(s,n,o),h=function(t){return(r-t)/6/a+.5};if(0===a)e=i=0;else{i=a/r;var c=h(s),l=h(n),d=h(o);s===r?e=d-l:n===r?e=1/3+c-d:o===r&&(e=2/3+l-c),0>e?e+=1:e>1&&(e-=1)}return{h:360*e,s:100*i,v:100*r}},hsv2hex:function(t){return this.rgb2hex(this.hsv2rgb(t))},hsv2rgb:function(t){var e,i,s,n=t.h,o=t.s,r=t.v;if(o/=100,r/=100,0===o)e=i=s=r;else{var a,h,c,l,d;switch(n/=60,a=Math.floor(n),h=n-a,c=r*(1-o),l=r*(1-o*h),d=r*(1-o*(1-h)),a){case 0:e=r,i=d,s=c;break;case 1:e=l,i=r,s=c;break;case 2:e=c,i=r,s=d;break;case 3:e=c,i=l,s=r;break;case 4:e=d,i=c,s=r;break;default:e=r,i=c,s=l}}return{r:Math.round(255*e),g:Math.round(255*i),b:Math.round(255*s)}},hsv2hsl:function(t){var e=t.s/100,i=t.v/100,s=(2-e)*i,n=e*i;return{h:t.h,s:n/(1>=s?s:2-s)*100,l:s/2*100}},hsl2hsv:function(t){var e=t.l/100*2,i=t.s/100*(1>=e?e:2-e);return{h:t.h,s:2*i/(e+i)*100,v:(e+i)/2*100}},dec2hex:function(e){return t.padLeft(e.toString(16),2,"0")},hex2dec:function(t){return parseInt(t,16)}}}(_,window,document),function(t,e,i,s){"use strict";e.HexColor=function(e){if(t.isString(e)){if(e=e.replace("#",""),/^([0-9a-f]{3}){2}$/i.test(e))this.hsv=ColorHelper.hex2hsv({r:e[0]+e[1],g:e[2]+e[3],b:e[4]+e[5]});else{if(!/^[0-9a-f]{3}$/i.test(e))return this;this.hsv=ColorHelper.hex2hsv({r:e[0]+e[0],g:e[1]+e[1],b:e[2]+e[2]})}this.isValid=!0}},HexColor.prototype={isValid:!1,hsv:{h:0,s:0,v:0},getHexStr:function(){var t=ColorHelper.hsv2hex(this.hsv);return"#"+t.r+t.g+t.b}}}(_,window,document),function(t,e,i,s,n){"use strict";t.widget("presto.colorpicker",{options:{default_color:"#ff0000",live:!0,callbacks:{change:e.noop}},_variables:function(){this.$colorpicker=this.$element,this.$sb_wrp=this.$colorpicker.find(".colorpicker-saturation-brightness-wrp"),this.$handler_sb=this.$sb_wrp.find(".colorpicker-handler"),this.$hue_wrp=this.$colorpicker.find(".colorpicker-hue-wrp"),this.$handler_hue=this.$hue_wrp.find(".colorpicker-handler"),this.id=this.$colorpicker.attr("id"),this.$inputs=t('input[name="'+this.id+'"]'),this.color=new HexColor,this.hex="",this._update_variables(),this.sb_wrp_size=this.$sb_wrp.width(),this.hue_wrp_height=this.sb_wrp_size},_init:function(){this.set(this.$inputs.val())||(this.color=new HexColor(this.options.default_color),this._update_sb(),this._update_hue())},_events:function(){this._on($window,"resize",this._handler_resize),this._on(this.$inputs,"keydown",this._handler_input_keydown),this._on(this.$sb_wrp,"mouseenter",this._handler_sb_wrp_arrows_in),this._on(this.$sb_wrp,"mouseleave",this._handler_sb_wrp_arrows_out),this._on(this.$sb_wrp,t.Pointer.dragmove,this._handler_sb_drag_move),this._on(this.$sb_wrp,t.Pointer.dragend,this._handler_sb_drag_end),this._on(this.$hue_wrp,"mouseenter",this._handler_hue_wrp_arrows_in),this._on(this.$hue_wrp,"mouseleave",this._handler_hue_wrp_arrows_out),this._on(this.$hue_wrp,t.Pointer.dragmove,this._handler_hue_drag_move),this._on(this.$hue_wrp,t.Pointer.dragend,this._handler_hue_drag_end)},_update_variables:function(){this.sb_wrp_offset=this.$sb_wrp.offset(),this.hue_wrp_offset=this.$hue_wrp.offset()},_handler_resize:function(){this._update_variables()},_handler_sb_wrp_arrows_in:function(){this._on($document,"keydown",this._handler_sb_wrp_arrows_keydown)},_handler_sb_wrp_arrows_out:function(){this._off($document,"keydown",this._handler_sb_wrp_arrows_keydown)},_handler_sb_wrp_arrows_keydown:function(){switch(event.keyCode){case t.ui.keyCode.UP:this.color.hsv.v=Math.min(100,this.color.hsv.v+1);break;case t.ui.keyCode.RIGHT:this.color.hsv.s=Math.min(100,this.color.hsv.s+1);break;case t.ui.keyCode.DOWN:this.color.hsv.v=Math.max(0,this.color.hsv.v-1);break;case t.ui.keyCode.LEFT:this.color.hsv.s=Math.max(0,this.color.hsv.s-1);break;default:return}this._update_sb(),this._update_input()},_sb_drag_set:function(t,i){this.color.hsv.s=100*e.clamp(0,t.X-this.sb_wrp_offset.left,this.sb_wrp_size)/this.sb_wrp_size,this.color.hsv.v=100-100*e.clamp(0,t.Y-this.sb_wrp_offset.top,this.sb_wrp_size)/this.sb_wrp_size,this._update_sb(),i&&this._update_input()},_handler_sb_drag_move:function(t,e){this._sb_drag_set(e.moveXY,this.options.live)},_handler_sb_drag_end:function(t,e){this._sb_drag_set(e.endXY,!0)},_handler_hue_wrp_arrows_in:function(){this._on($document,"keydown",this._handler_hue_wrp_arrows_keydown)},_handler_hue_wrp_arrows_out:function(){this._off($document,"keydown",this._handler_hue_wrp_arrows_keydown)},_handler_hue_wrp_arrows_keydown:function(){switch(event.keyCode){case t.ui.keyCode.UP:this.color.hsv.h=Math.min(359,this.color.hsv.h+1);break;case t.ui.keyCode.DOWN:this.color.hsv.h=Math.max(0,this.color.hsv.h-1);break;default:return}this._update_hue(),this._update_input()},_hue_drag_set:function(t,i){this.color.hsv.h=359-359*e.clamp(0,t.Y-this.hue_wrp_offset.top,this.hue_wrp_height)/this.hue_wrp_height,this._update_hue(),i&&this._update_input()},_handler_hue_drag_move:function(t,e){this._hue_drag_set(e.moveXY,this.options.live)},_handler_hue_drag_end:function(t,e){this._hue_drag_set(e.endXY,!0)},_handler_input_keydown:function(e){e.keyCode===t.ui.keyCode.ENTER&&(this.set(this.$inputs.val())||this.$inputs.val(this.hex))},_update_input:function(){this.hex=this.color.getHexStr(),this.$inputs.val(this.hex).css("background-color",this.hex).trigger("change"),this._trigger("change")},_update_sb:function(){var t=ColorHelper.hsv2hsl(this.color.hsv);this.$handler_sb.css({"background-color":"hsl("+t.h+","+t.s+"%,"+t.l+"%)",transform:"translate3d("+this.sb_wrp_size/100*this.color.hsv.s+"px,"+this.sb_wrp_size/100*(100-this.color.hsv.v)+"px,0)"})},_update_hue:function(){var t=ColorHelper.hsv2hsl(this.color.hsv);this.$handler_hue.css({"background-color":"hsl("+this.color.hsv.h+",100%,50%)",transform:"translate3d(0,"+this.hue_wrp_height/100*(100-this.color.hsv.h/360*100)+"px,0)"}),this.$handler_sb.css("background-color","hsl("+t.h+","+t.s+"%,"+t.l+"%)"),this.$sb_wrp.css("background-color","hsl("+this.color.hsv.h+",100%,50%)")},_update:function(){this._update_sb(),this._update_hue(),this._update_input()},get:function(){return this.color.getHexStr()},set:function(t){var i=new HexColor(t);return i.isValid&&!e.isEqual(i.hsv,this.color.hsv)&&(this.color=i,this._update()),i.isValid}}),t(function(){t(".colorpicker").colorpicker()})}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";var o=encodeURIComponent,r=decodeURIComponent;t.cookie={get:function(t){return t?r(s.cookie.replace(new RegExp("(?:(?:^|.*;)\\s*"+o(t).replace(/[\-\.\+\*]/g,"\\$&")+"\\s*\\=\\s*([^;]*).*$)|^.*$"),"$1"))||null:null},set:function(t,e,i,n,r,a){if(!t||/^(?:expires|max\-age|path|domain|secure)$/i.test(t))return!1;var h="";if(i)switch(i.constructor){case Number:h=i===1/0?"; expires=Fri, 31 Dec 9999 23:59:59 GMT":"; max-age="+i;break;case String:h="; expires="+i;break;case Date:h="; expires="+i.toUTCString()}return s.cookie=o(t)+"="+o(e)+h+(r?"; domain="+r:"")+(n?"; path="+n:"")+(a?"; secure":""),!0},remove:function(t,e,i){return this.has(t)?(s.cookie=o(t)+"=; expires=Thu, 01 Jan 1970 00:00:00 GMT"+(i?"; domain="+i:"")+(e?"; path="+e:""),!0):!1},has:function(t){return t?new RegExp("(?:^|;\\s*)"+o(t).replace(/[\-\.\+\*]/g,"\\$&")+"\\s*\\=").test(s.cookie):!1},keys:function(){for(var t=s.cookie.replace(/((?:^|\s*;)[^\=]+)(?=;|$)|^\s*|\s*(?:\=[^;]*)?(?:\1|$)/g,"").split(/\s*(?:\=[^;]*)?;\s*/),e=0,i=t.length;i>e;e++)t[e]=r(t[e]);return t}}}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";t.widget("presto.datepicker",{options:{names:{months:["January","February","March","April","May","June","July","August","September","October","November","December"]},date:{today:!1,current:!1,selected:null},callbacks:{change:e.noop,refresh:e.noop}},_variables:function(){this.$datepicker=this.$element,this.id=this.$datepicker.attr("id"),this.$inputs=this.id?t('input[name="'+this.id+'"]'):$empty,this.$navigation_prev=this.$datepicker.find(".datepicker-navigation-prev"),this.$navigation_title=this.$datepicker.find(".datepicker-navigation-title"),this.$navigation_next=this.$datepicker.find(".datepicker-navigation-next"),this.$days_prev=this.$datepicker.find(".datepicker-day-prev"),this.$days_current=this.$datepicker.find(".datepicker-day"),this.$days_next=this.$datepicker.find(".datepicker-day-next"),this.$days_all=this.$days_prev.add(this.$days_current).add(this.$days_next),this.options.date.today===!1&&(this.options.date.today=new Date),this.options.date.current===!1&&(this.options.date.current=new Date),this.$day_today=!1,this.$day_selected=!1},_init:function(){this._refresh()},_events:function(){this._on("mouseenter",this._handler_arrows_in),this._on("mouseleave",this._handler_arrows_out),this._on(this.$inputs,"keydown",this._handler_input_keydown),this._on(this.$navigation_prev,"click",this._handler_prev_click),this._on(this.$navigation_next,"click",this._handler_next_click),this._on("click",".datepicker-day",this._handler_day_current_click)},_handler_arrows_in:function(){this._on($document,"keydown",this._handler_arrows_keydown)},_handler_arrows_out:function(){this._off($document,"keydown",this._handler_arrows_keydown)},_handler_arrows_keydown:function(e){switch(e.keyCode){case t.ui.keyCode.UP:case t.ui.keyCode.LEFT:this.navigate_month(-1);break;case t.ui.keyCode.RIGHT:case t.ui.keyCode.DOWN:this.navigate_month(1)}},_handler_input_keydown:function(e){e.keyCode===t.ui.keyCode.ENTER&&this.set(this.$inputs.val())},_handler_prev_click:function(){this.navigate_month(-1)},_handler_next_click:function(){this.navigate_month(1)},_handler_day_current_click:function(e,i){this._unhighlight_selected();var s=parseInt(t(i).html(),10);this.options.date.selected=new Date(this.options.date.current.getFullYear(),this.options.date.current.getMonth(),s),this._highlight_selected(),this._update_input()},_build_calendar:function(){var t=new Date(this.options.date.current.getFullYear(),this.options.date.current.getMonth(),0).getDate(),e=new Date(this.options.date.current.getFullYear(),this.options.date.current.getMonth()+1,0).getDate(),i=new Date(this.options.date.current.getFullYear(),this.options.date.current.getMonth(),1).getDay();i=0===i?6:i-1,this.$days_all.removeClass("hidden");var s=31-t,n=i,o=9-s-n;this.$days_prev.slice(o+n,this.$days_prev.length).addClass("hidden"),this.$days_prev.slice(0,o).addClass("hidden"),this.$days_current.slice(e,this.$days_current.lenght).addClass("hidden");var o=(e+i)%7;this.$days_next.slice(0===o?0:7-o).addClass("hidden")},_highlight_day:function(t,e){if(t&&t.getFullYear()===this.options.date.current.getFullYear()){var i=t.getMonth()-this.options.date.current.getMonth();switch(i){case-1:return this.$days_prev.eq(t.getDate()-23).addClass(e);case 0:return this.$days_current.eq(t.getDate()-1).addClass(e);case 1:return this.$days_next.eq(t.getDate()-1).addClass(e)}}return!1},_unhighlight_selected:function(){this.$day_selected&&this.$day_selected.removeClass("datepicker-day-selected")},_highlight_selected:function(){this.$day_selected=this._highlight_day(this.options.date.selected,"datepicker-day-selected")},_unhighlight_today:function(){this.$day_today&&this.$day_today.removeClass("datepicker-day-today")},_highlight_today:function(){this.$day_today=this._highlight_day(this.options.date.today,"datepicker-day-today")},_update_title:function(){this.$navigation_title.html(this.options.names.months[this.options.date.current.getMonth()]+", "+this.options.date.current.getFullYear())},_update_input:function(){this.options.date.selected&&this.$inputs.val(this.options.date.selected.getFullYear()+"-"+this.options.date.selected.getMonth()+"-"+this.options.date.selected.getDate()).change()},_refresh:function(){this._unhighlight_selected(),this._unhighlight_today(),this._build_calendar(),this._highlight_selected(),this._highlight_today(),this._update_title(),this._trigger("refresh")},get:function(t){return t&&this.options.date.selected?this.options.date.selected.getFullYear()+"-"+this.options.date.selected.getMonth()+"-"+this.options.date.selected.getDate():this.options.date.selected},set:function(t){if(e.isString(t))var i=t.split("-"),t=new Date(i[0],i[1],i[2]);else var t=new Date(t);e.isNaN(t.valueOf())||(this.options.date.selected=t,this.options.date.selected.getFullYear()===this.options.date.current.getFullYear()&&this.options.date.selected.getMonth()===this.options.date.current.getMonth()?(this._unhighlight_selected(),this._highlight_selected()):(this.options.date.current.setFullYear(this.options.date.selected.getFullYear()),this.options.date.current.setMonth(this.options.date.selected.getMonth()),this._refresh()),this._update_input())},navigate_month:function(t){t&&(this.options.date.current.setMonth(this.options.date.current.getMonth()+t),this._refresh())},prev_month:function(){this.navigate_month(-1)},next_month:function(){this.navigate_month(1)}}),t(function(){t(".datepicker").datepicker()})}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";t.widget("presto.draggable",{options:{selectors:{handler:".draggable-handler"},draggable:e["true"],only_handlers:!1,revertable:!1,axis:!1,constrainer:{$element:!1,coordinates:!1,constrain_center:!1,axis:!1,tollerance:{x:0,y:0}},modifiers:{x:e["true"],y:e["true"]},callbacks:{beforestart:e.noop,start:e.noop,move:e.noop,end:e.noop}},_variables:function(){this.draggable=this.element,this.$draggable=this.$element,this.options.only_handlers&&(this.$handlers=this.$draggable.find(this.options.selectors.handler))},_events:function(){this.options.only_handlers?(this._on(this.$handlers,t.Pointer.dragstart,this._start),this._on(this.$handlers,t.Pointer.dragmove,this._move),this._on(this.$handlers,t.Pointer.dragend,this._end)):(this._on(t.Pointer.dragstart,this._start),this._on(t.Pointer.dragmove,this._move),this._on(t.Pointer.dragend,this._end))},_start:function(t,i){if(this.isDraggable=this.options.draggable(),this.isDraggable){this._trigger("beforestart"),this.motion=!1;var s=this.$draggable.css("transform"),n="none"!==s?s.match(/[0-9., -]+/)[0].split(", "):[0,0,0,0,0,0];this.initialXY={X:parseInt(n[4],10),Y:parseInt(n[5],10)},this._trigger("start",e.merge(i,{initialXY:this.initialXY,draggable:this.draggable,$draggable:this.$draggable}))}},_move:function(t,i){if(this.isDraggable){if(this.motion===!1){if(this.motion=!0,this.options.constrainer.$element){var s=this.options.constrainer.$element.offset(),o=this.$draggable.offset();this.translateX_min=s.left-(o.left-this.initialXY.X)+(this.options.constrainer.constrain_center?-this.$draggable.width()/2:0),this.translateX_max=s.left+this.options.constrainer.$element.width()-(o.left-this.initialXY.X+this.$draggable.width())+(this.options.constrainer.constrain_center?this.$draggable.width()/2:0),this.translateY_min=s.top-(o.top-this.initialXY.Y)+(this.options.constrainer.constrain_center?-this.$draggable.height()/2:0),this.translateY_max=s.top+this.options.constrainer.$element.height()-(o.top-this.initialXY.Y+this.$draggable.height())+(this.options.constrainer.constrain_center?this.$draggable.height()/2:0)}else if(this.options.constrainer.coordinates){var o=this.$draggable.offset();e.isUndefined(this.options.constrainer.coordinates.x1)||(this.translateX_min=this.options.constrainer.coordinates.x1-(o.left-this.initialXY.X)+(this.options.constrainer.constrain_center?-this.$draggable.width()/2:0)),e.isUndefined(this.options.constrainer.coordinates.x2)||(this.translateX_max=this.options.constrainer.coordinates.x2-(o.left-this.initialXY.X+this.$draggable.width())+(this.options.constrainer.constrain_center?this.$draggable.width()/2:0)),e.isUndefined(this.options.constrainer.coordinates.y1)||(this.translateY_min=this.options.constrainer.coordinates.y1-(o.top-this.initialXY.Y)+(this.options.constrainer.constrain_center?-this.$draggable.height()/2:0)),e.isUndefined(this.options.constrainer.coordinates.y2)||(this.translateY_max=this.options.constrainer.coordinates.y2-(o.top-this.initialXY.Y+this.$draggable.height())+(this.options.constrainer.constrain_center?-this.$draggable.height()/2:0))}$html.addClass("dragging"),this.$draggable.addClass("dragging")}var r=this.initialXY.X+("y"===this.options.axis?0:i.deltaXY.X),a=this.initialXY.Y+("x"===this.options.axis?0:i.deltaXY.Y);(this.options.constrainer.$element||this.options.constrainer.coordinates)&&("y"!==this.options.constrainer.axis&&(r=e.clamp(e.isUndefined(this.translateX_min)?n:this.translateX_min-this.options.constrainer.tollerance.x,r,e.isUndefined(this.translateX_max)?n:this.translateX_max+this.options.constrainer.tollerance.x)),"x"!==this.options.constrainer.axis&&(a=e.clamp(e.isUndefined(this.translateY_min)?n:this.translateY_min-this.options.constrainer.tollerance.y,a,e.isUndefined(this.translateY_max)?n:this.translateY_max+this.options.constrainer.tollerance.y)));var h={X:this.options.modifiers.x(r),Y:this.options.modifiers.y(a)};this.$draggable.css("transform","translate3d("+(e.isBoolean(h.X)?h.X?r:this.initialXY.X:h.X)+"px,"+(e.isBoolean(h.Y)?h.Y?a:this.initialXY.Y:h.Y)+"px,0)"),this._trigger("move",e.merge(i,{initialXY:this.initialXY,modifiedXY:h,draggable:this.draggable,$draggable:this.$draggable}))}},_end:function(t,i){this.isDraggable&&(this.motion===!0&&($html.removeClass("dragging"),this.$draggable.removeClass("dragging"),
this.options.revertable&&this.$draggable.css("transform","translate3d("+this.initialXY.X+"px,"+this.initialXY.Y+"px,0)")),this._trigger("end",e.merge(i,{initialXY:this.initialXY,draggable:this.draggable,$draggable:this.$draggable,dragged:this.motion})))}}),t(function(){t(".draggable").draggable()})}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";t.fn.positionate=function(i){var s=e.merge({direction:!1,axis:!1,$anchor:!1,$pointer:!1,point:!1,ranks:{x:["right","left"],y:["bottom","top"],all:["bottom","right","left","top"]},callbacks:{positionated:e.noop}},i);this.removeClass("positionate-top positionate-bottom positionate-left positionate-right");var n=e.unique(e.union(s.direction?[s.direction]:[],s.axis?s.ranks[s.axis]:[],s.ranks.all)),o=$window.width(),r=$window.height(),a=$html.scrollTop(),h=$html.scrollLeft(),c=(this.offset(),this.outerWidth()),l=this.outerHeight(),d=s.$anchor?s.$anchor.offset():{top:s.point.y,left:s.point.x},u=s.$anchor?s.$anchor.outerWidth():0,p=s.$anchor?s.$anchor.outerHeight():0,_=e.map(n,function(t){switch(t){case"top":return d.top-a;case"bottom":return r-d.top-p+a;case"left":return d.left-h;case"right":return o-d.left-u+h}}),g=e.map(n,function(t,e){switch(t){case"top":case"bottom":return Math.min(l,_[e])*Math.min(o,c);case"left":case"right":return Math.min(c,_[e])*Math.min(r,l)}}),f=n[g.indexOf(e.max(g))];switch(f){case"top":case"bottom":var m={left:d.left+u/2-c/2,top:"top"===f?d.top-l:d.top+p};break;case"left":case"right":var m={top:d.top+p/2-l/2,left:"left"===f?d.left-c:d.left+u}}m.top=e.clamp(0,m.top,r-l),m.left=e.clamp(0,m.left,o-c);var v={coordinates:m,direction:f};if(this.css("transform","translate3d("+m.left+"px,"+m.top+"px,0)"),this.addClass("positionate-"+f),s.$anchor&&s.$pointer){var w=e.isFunction(s.$pointer)?s.$pointer(v):s.$pointer;if(w instanceof t){var b=w.css("transform"),$="none"!==b?b.match(/[0-9., -]+/)[0].split(", "):[0,0,0,0,0,0],y=w.position();switch(f){case"top":case"bottom":var k=w.width(),x=parseInt($[4],10)+(d.left+u/2-h-(m.left+y.left+k/2)),C=parseInt($[5],10);break;case"left":case"right":var Y=w.height(),x=parseInt($[4],10),C=parseInt($[5],10)+(d.top+p/2-a-(m.top+y.top+Y/2))}w.css("transform","translate3d("+x+"px,"+C+"px,0)")}}return s.callbacks.positionated(v),this}}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";var o={};t.widget("presto.dropdown",{options:{callbacks:{open:e.noop,close:e.noop}},_variables:function(){this.$dropdown=this.$element,this.$tips=this.$dropdown.find(".dropdown-tip"),this.$top_tip=this.$tips.filter(".top"),this.$right_tip=this.$tips.filter(".right"),this.$bottom_tip=this.$tips.filter(".bottom"),this.$left_tip=this.$tips.filter(".left"),this.$actionables=this.$dropdown.find(".actionable"),this.id=this.$dropdown.attr("id"),this.$triggers=t('.dropdown-trigger[data-dropdown="'+this.id+'"]'),this.hasTips=!this.$dropdown.hasClass("no-tip"),this.isAttached=this.$dropdown.hasClass("attached"),this.opened=!1},_events:function(){this._on(this.$triggers,"click",this.toggle),this._on(this.$actionables,"click",this.close)},_bind_window_resize_scroll:function(){this._on($window,"resize scroll",this._update)},_unbind_window_resize_scroll:function(){this._off($window,"resize scroll",this._update)},_bind_window_click:function(){this._on($window,"click",this._handler_window_click)},_unbind_window_click:function(){this._off($window,"click",this._handler_window_click)},_handler_window_click:function(e){var i=t(e.target).parents();if(-1===i.index(this.$dropdown)){for(var s=0,n=this.$triggers.length;n>s;s++)if(e.target===this.$triggers.get(s)||-1!==i.index(this.$triggers.get(s)))return;this.close()}},_positionate:function(){var e=t(o[this.id]),i=e.hasClass("no-tip")||!this.hasTips||this.isAttached,s=this;this.$dropdown.positionate({$anchor:e,$pointer:function(t){return i?void 0:s["$"+s._get_opposite_direction(t.direction)+"_tip"]},callbacks:{positionated:function(t){e.addClass("dropdown-trigger-"+t.direction)}}})},_get_opposite_direction:function(t){switch(t){case"top":return"bottom";case"bottom":return"top";case"left":return"right";case"right":return"left"}},_update:function(){this.opened&&this._positionate()},toggle:function(t,e){this[this.opened&&o[this.id]===e?"close":"open"](t,e)},open:function(e,i){i&&(t(o[this.id]).removeClass("dropdown-trigger-top dropdown-trigger-bottom dropdown-trigger-left dropdown-trigger-right active"),this.opened&&o[this.id]!==i&&this.$dropdown.addClass("moving"),o[this.id]=i,t(i).addClass("active")),this._positionate(),this.$dropdown.addClass("active"),this.opened=!0,this._delay(this._bind_window_click),this._bind_window_resize_scroll(),this._trigger("open")},close:function(){t(o[this.id]).removeClass("dropdown-trigger-top dropdown-trigger-bottom dropdown-trigger-left dropdown-trigger-right active"),this.$dropdown.removeClass("active moving"),this.opened=!1,this._unbind_window_click(),this._unbind_window_resize_scroll(),this._trigger("close")}}),t(function(){t(".dropdown").dropdown()})}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";t.widget("presto.expander",{options:{selectors:{toggler:".expander-toggler",content:".container-content"},delay:{open:250,close:250},callbacks:{open:e.noop,close:e.noop}},_variables:function(){this.$expander=this.$element,this.$content=this.$expander.find(this.options.selectors.content),this.opened=!1},_init:function(){this.$expander.hasClass("opened")&&this.open()},_events:function(){this._on("click",this.options.selectors.toggler,this.toggle)},toggle:function(t){e.isBoolean(t)||(t=!this.opened),t!==this.opened&&(this.opened=t,this.$expander.toggleClass("opened",this.opened),this.$content[this.opened?"slideDown":"slideUp"](this.options.delay.close),this._trigger(this.opened?"open":"close"))},open:function(){this.toggle(!0)},close:function(){this.toggle(!1)}}),t(function(){t(".expander").expander()})}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";t.widget("presto.flippable",{options:{selectors:{flipper:".flipper"},callbacks:{font:e.noop,back:e.noop,flipped:e.noop}},_variables:function(){this.$flippable=this.$element,this.$front=this.$flippable.find(".flippable-front"),this.$back=this.$flippable.find(".flippable-back"),this.isFlipped=this.$flippable.hasClass("flipped")},_events:function(){this._on("click",this.options.selectors.flipper,this.flip)},flip:function(){this.isFlipped=!this.isFlipped,this.$flippable.toggleClass("flipped",this.isFlipped),this._trigger(this.isFlipped?"front":"back"),this._trigger("flipped")}}),t(function(){t(".flippable-wrp").flippable()})}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";var o=[];t.fn.formSync=function(){this.each(function(){var e=t(this),i=e.data("sync-group");if(-1===o.indexOf(i)){o.push(i);var s=t('form[data-sync-group="'+i+'"]'),n=s.find("input, textarea, select");n.each(function(){var e=t(this),i=e.attr("name"),n=e.is('[type="radio"], [type="checkbox"]'),o=n&&e.is('[type="radio"]'),r=e.is("input, textarea"),a=r?"input change":"change",h=e.parent("form"),c=s.not(h),l=c.find('[name="'+i+'"]');e.on(a,function(){var i=e.val(),s=!!e.prop("checked");l.each(function(){var e=t(this),r=e.val(),a=!!e.prop("checked");if(o){if(i!==r||s===a)return}else if(i===r&&s===a)return;n?e.prop("checked",s).trigger("change"):e.val(i).trigger("change")})})})}})},t(function(){t("form[data-sync-group]").formSync()})}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";t.fn.loading=function(i,s){var n=e.merge({color:{wrapper:"inherit",spinner:"secondary"}},s);this.addClass("spinner-overlay-activable"),e.isUndefined(i)&&(i=!this.hasClass("spinner-overlay-active"));var o=this.children(".spinner-overlay");return 0===o.length?this.prepend('<div class="spinner-overlay '+n.color.wrapper+'"><div class="spinner-wrp"><div class="spinner '+n.color.spinner+'"><div class="circle-wrp left"><div class="circle"></div></div><div class="circle-wrp right"><div class="circle"></div></div></div></div></div>'):i&&(o.attr("class","spinner-overlay "+n.color.wrapper),o.find(".spinner").attr("class","spinner "+n.color.spinner)),t.reflow(),this.toggleClass("spinner-overlay-active",i),this}}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";var o=[];t.noty=function(i){var s={autoplay:!0};e.isString(i)?s.body=i:e.isPlainObject(i)&&e.merge(s,i),s.buttons&&(s.type="action");var n=new t.presto.noty(s);return s.autoplay&&n.open(),n},t.widget("presto.noty",{templates:{base:'<div class="noty container {%=o.type%} {%=o.color%} {%=o.css%}"><div class="container-content"><div class="infobar-wrp inset {%=o.color%}">{% if ( o.img ) include ( "presto.noty.img", o.img ); %}<div class="infobar-center">{% if ( o.title ) include ( "presto.noty.title", o.title ); %}{% if ( o.body ) include ( "presto.noty.body", o.body ); %}</div>{% if ( o.buttons.length === 1 ) include ( "presto.noty.single_button", o.buttons[0] ); %}</div>{% if ( o.buttons.length > 1 ) include ( "presto.noty.buttons", o.buttons ); %}</div></div>',img:'<div class="noty-img infobar-left"><img src="{%=o%}" class="smooth" /></div>',title:'<p class="infobar-title">{%#o%}</p>',body:"{%#o%}",single_button:'<div class="infobar-right">{% include ( "presto.noty.button", o ); %}</div>',buttons:'<div class="noty-buttons multiple-wrp centered"><div class="multiple">{% for ( var i = 0; i < o.length; i++ ) { %}{% include ( "presto.noty.button", o[i] ); %}{% } %}</div></div>',button:'<div class="label-wrp button-wrp"><div class="label actionable {%=(o.color || "white")%} {%=(o.size || "small")%} {%=(o.css || "")%}"><div class="label-center">{%#(o.text || "")%}</div></div></div>'},options:{anchor:{y:"bottom",x:"left"},delay:{remove:200},title:!1,body:!1,img:!1,buttons:[],type:"alert",color:"black",css:"",ttl:3500,callbacks:{open:e.noop,close:e.noop}},_variables:function(){this.$noty=this.$element,this.timer=!1,this.isOpen=!1,this.neverOpened=!0},_init_click:function(){this.options.buttons.length||this._on("click",this.close)},_init_buttons_click:function(){if(this.options.buttons.length){var t=this.$noty.find(".button-wrp .label"),i=this;e.each(this.options.buttons,function(e,s){var n=t.eq(s);n.on("click",function(t){e.onClick&&e.onClick.call(this,t),i.close()})})}},_init_timer:function(){0===this.options.buttons.length&&"forever"!==this.options.ttl&&(this.timer=t.timer(this.close.bind(this),this.options.ttl,!0),o.push(this.timer))},_init_hover:function(){this.$noty.hover(function(){e.each(o,function(t){t.pause()})},function(){e.each(o,function(t){t.remaining(Math.max(1e3,t.remaining()||0)),t.play()})})},open:function(){this.isOpen||(t(".noty-queues."+this.options.anchor.y+" .noty-queue."+this.options.anchor.x).first().append(this.$noty),t.reflow(),this.$noty.addClass("active"),this.neverOpened&&(this._init_click(),this._init_buttons_click(),this._init_hover(),this.neverOpened=!1),this._init_timer(),this._trigger("open"),this.isOpen=!0)},close:function(){this.timer&&(e.pull(o,this.timer),this.timer.stop()),this.$noty.removeClass("active"),this._delay(function(){this.$noty.remove()},this.options.delay.remove),this._trigger("close"),this.isOpen=!1}}),t(function(){$body.append('<div class="noty-queues top"><div class="noty-queue expanded"></div><div class="noty-queues-row"><div class="noty-queue left"></div><div class="noty-queue center"></div><div class="noty-queue right"></div></div></div><div class="noty-queues bottom"><div class="noty-queues-row"><div class="noty-queue left"></div><div class="noty-queue center"></div><div class="noty-queue right"></div></div><div class="noty-queue expanded"></div></div>')})}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";t.fn.formAjax=function(){this.on("submit",function(s){var n=t(this);s.preventDefault(),t.ajax({cache:!1,contentType:"multipart/form-data",data:new FormData(this),processData:!1,type:n.attr("method")||"POST",url:n.attr("action"),beforeSend:function(){n.loading(!0)},error:function(i){e.isString(i)?"<"===i[0]?(t.noty("There was an error, please try again or report the problem"),$body.append(i)):t.noty(i):t.noty("There was an error, please try again or report the problem")},success:function(s){e.isString(s)?"refresh"===s?(t.noty("Done! Refreshing the page..."),location.reload()):/^((\S*)?:\/\/)?\/?\S*$/.test(s)?s===i.location.href||s===i.location.pathname?(t.noty("Done! Refreshing the page..."),location.reload()):(t.noty("Done! Redirecting..."),location.assign(s)):"<"===s[0]?(t.noty("Done! A page refresh may be needed to see the changes"),$body.append(s)):t.noty(s):t.noty("Done! A page refresh may be needed to see the changes")},complete:function(){n.loading(!1)}})})},t(function(){t("form.ajax").formAjax()})}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";t.widget("presto.infobar",{options:{selectors:{closer:".infobar-closer"},delay:{close:250},callbacks:{close:e.noop}},_variables:function(){this.$infobar=this.$element},_events:function(){this._on("click",this.options.selectors.closer,this.close)},close:function(){this.$infobar.addClass("remove").slideUp(this.options.delay.close),this._delay(function(){this.$infobar.remove(),this._trigger("close")},this.options.delay.close)}}),t(function(){t(".infobar-wrp").infobar()})}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";t.widget("presto.modal",{options:{selectors:{closer:".modal-closer"},callbacks:{open:e.noop,close:e.noop}},_variables:function(){this.$modal=this.$element},_events:function(){this._on("click",this.options.selectors.closer,this.close)},_handler_esc_keydown:function(e){e.keyCode===t.ui.keyCode.ESCAPE&&this.close()},open:function(){this.$modal.addClass("active"),this._on($document,"keydown",this._handler_esc_keydown),this._trigger("open")},close:function(){this.$modal.removeClass("active"),this._off($document,"keydown",this._handler_esc_keydown),this._trigger("close")}}),t(function(){t(".modal").modal(),t("[data-modal-trigger]").on("click",function(){t("#"+t(this).data("modal-trigger")).modal("instance").open()})})}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";t.widget("presto.navbar",{options:{callbacks:{open:e.noop,close:e.noop}},_variables:function(){this.$navbar=this.$element,this.$wrp=this.$navbar.parent(),this.id=this.$navbar.attr("id"),this.$closers=this.$wrp.find(".navbar-closer"),this.$triggers=t('.navbar-trigger[data-navbar="'+this.id+'"]'),this.opened=this.$wrp.hasClass("opened")},_events:function(){this._on(this.$closers,"click",this.close),this._on(this.$triggers,"click",this.open)},toggle:function(t){e.isUndefined(t)&&(t=!this.opened),t!==this.opened&&(this.opened=t,this.$wrp.toggleClass("opened",this.opened),this._trigger(this.opened?"open":"close"))},open:function(){this.toggle(!0)},close:function(){this.toggle(!1)}}),t(function(){t(".navbar").navbar()})}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";t.notification=function(n){var o=e.merge({title:!1,body:!1,img:!1},n);!s.hasFocus()&&i.Notification&&"denied"!==Notification.permission?Notification.requestPermission(function(e){if("granted"===e){new Notification(o.title,{body:o.body,icon:o.img})}else t.noty(o)}):t.noty(o)}}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";t.oneTimeAction=function(t,i){var s={container:"ota",expiry:1/0,name:!1,action:!1};if(e.isString(t)?(s.name=t,e.isFunction(i)&&(s.action=i)):e.isPlainObject(t)&&e.merge(s,t),s.name){var i=new r(s.container,s.name);return s.action&&!i.get()&&(s.action(),i.set()),i}return s.container?new o(s.container,s.expiry):void 0};var o=function(e,i){this.name=e,this.expiry=i,this.actionsStr=t.cookie.get(this.name)||"",this.actions=this.actionsStr.length>0?this.actionsStr.split("|"):[]};o.prototype={get:function(t){return e.contains(this.actions,t)},set:function(t){this.get(t)||(this.actions.push(t),this.update())},update:function(){this.actionsStr=this.actions.join("|"),t.cookie.set(this.name,this.actionsStr,this.expiry)},reset:function(i){i?(e.pull(this.actions,i),this.update()):t.cookie.remove(this.name)}};var r=function(t,e,i){this.container=new o(t),this.name=e};r.prototype={get:function(){return this.container.get(this.name)},set:function(){this.container.set(this.name)},reset:function(){this.container.reset(this.name)}}}(jQuery,_,window,document),self="undefined"!=typeof window?window:"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:{};var Prism=function(){var t=/\blang(?:uage)?-(?!\*)(\w+)\b/i,e=self.Prism={util:{encode:function(t){return t instanceof i?new i(t.type,e.util.encode(t.content),t.alias):"Array"===e.util.type(t)?t.map(e.util.encode):t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/\u00a0/g," ")},type:function(t){return Object.prototype.toString.call(t).match(/\[object (\w+)\]/)[1]},clone:function(t){var i=e.util.type(t);switch(i){case"Object":var s={};for(var n in t)t.hasOwnProperty(n)&&(s[n]=e.util.clone(t[n]));return s;case"Array":return t.slice()}return t}},languages:{extend:function(t,i){var s=e.util.clone(e.languages[t]);for(var n in i)s[n]=i[n];return s},insertBefore:function(t,i,s,n){n=n||e.languages;var o=n[t];if(2==arguments.length){s=arguments[1];for(var r in s)s.hasOwnProperty(r)&&(o[r]=s[r]);return o}var a={};for(var h in o)if(o.hasOwnProperty(h)){if(h==i)for(var r in s)s.hasOwnProperty(r)&&(a[r]=s[r]);a[h]=o[h]}return e.languages.DFS(e.languages,function(e,i){i===n[t]&&e!=t&&(this[e]=a)}),n[t]=a},DFS:function(t,i,s){for(var n in t)t.hasOwnProperty(n)&&(i.call(t,n,t[n],s||n),"Object"===e.util.type(t[n])?e.languages.DFS(t[n],i):"Array"===e.util.type(t[n])&&e.languages.DFS(t[n],i,n))}},highlightAll:function(t,i){for(var s,n=document.querySelectorAll('code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'),o=0;s=n[o++];)e.highlightElement(s,t===!0,i)},highlightElement:function(s,n,o){for(var r,a,h=s;h&&!t.test(h.className);)h=h.parentNode;if(h&&(r=(h.className.match(t)||[,""])[1],a=e.languages[r]),a){s.className=s.className.replace(t,"").replace(/\s+/g," ")+" language-"+r,h=s.parentNode,/pre/i.test(h.nodeName)&&(h.className=h.className.replace(t,"").replace(/\s+/g," ")+" language-"+r);var c=s.textContent;if(c){var l={element:s,language:r,grammar:a,code:c};if(e.hooks.run("before-highlight",l),n&&self.Worker){var d=new Worker(e.filename);d.onmessage=function(t){l.highlightedCode=i.stringify(JSON.parse(t.data),r),e.hooks.run("before-insert",l),l.element.innerHTML=l.highlightedCode,o&&o.call(l.element),e.hooks.run("after-highlight",l)},d.postMessage(JSON.stringify({language:l.language,code:l.code}))}else l.highlightedCode=e.highlight(l.code,l.grammar,l.language),e.hooks.run("before-insert",l),l.element.innerHTML=l.highlightedCode,o&&o.call(s),e.hooks.run("after-highlight",l)}}},highlight:function(t,s,n){var o=e.tokenize(t,s);return i.stringify(e.util.encode(o),n)},tokenize:function(t,i,s){var n=e.Token,o=[t],r=i.rest;if(r){for(var a in r)i[a]=r[a];delete i.rest}t:for(var a in i)if(i.hasOwnProperty(a)&&i[a]){var h=i[a];h="Array"===e.util.type(h)?h:[h];for(var c=0;c<h.length;++c){var l=h[c],d=l.inside,u=!!l.lookbehind,p=0,_=l.alias;l=l.pattern||l;for(var g=0;g<o.length;g++){var f=o[g];if(o.length>t.length)break t;if(!(f instanceof n)){l.lastIndex=0;var m=l.exec(f);if(m){u&&(p=m[1].length);var v=m.index-1+p,m=m[0].slice(p),w=m.length,b=v+w,$=f.slice(0,v+1),y=f.slice(b+1),k=[g,1];$&&k.push($);var x=new n(a,d?e.tokenize(m,d):m,_);k.push(x),y&&k.push(y),Array.prototype.splice.apply(o,k)}}}}}return o},hooks:{all:{},add:function(t,i){var s=e.hooks.all;s[t]=s[t]||[],s[t].push(i)},run:function(t,i){var s=e.hooks.all[t];if(s&&s.length)for(var n,o=0;n=s[o++];)n(i)}}},i=e.Token=function(t,e,i){this.type=t,this.content=e,this.alias=i};if(i.stringify=function(t,s,n){if("string"==typeof t)return t;if("[object Array]"==Object.prototype.toString.call(t))return t.map(function(e){return i.stringify(e,s,t)}).join("");var o={type:t.type,content:i.stringify(t.content,s,n),tag:"span",classes:["token",t.type],attributes:{},language:s,parent:n};if("comment"==o.type&&(o.attributes.spellcheck="true"),t.alias){var r="Array"===e.util.type(t.alias)?t.alias:[t.alias];Array.prototype.push.apply(o.classes,r)}e.hooks.run("wrap",o);var a="";for(var h in o.attributes)a+=h+'="'+(o.attributes[h]||"")+'"';return"<"+o.tag+' class="'+o.classes.join(" ")+'" '+a+">"+o.content+"</"+o.tag+">"},!self.document)return self.addEventListener?(self.addEventListener("message",function(t){var i=JSON.parse(t.data),s=i.language,n=i.code;self.postMessage(JSON.stringify(e.util.encode(e.tokenize(n,e.languages[s])))),self.close()},!1),self.Prism):self.Prism;var s=document.getElementsByTagName("script");return s=s[s.length-1],s&&(e.filename=s.src,document.addEventListener&&!s.hasAttribute("data-manual")&&document.addEventListener("DOMContentLoaded",e.highlightAll)),self.Prism}();"undefined"!=typeof module&&module.exports&&(module.exports=Prism),Prism.languages.markup={comment:/<!--[\w\W]*?-->/g,prolog:/<\?.+?\?>/,doctype:/<!DOCTYPE.+?>/,cdata:/<!\[CDATA\[[\w\W]*?]]>/i,tag:{pattern:/<\/?[\w:-]+\s*(?:\s+[\w:-]+(?:=(?:("|')(\\?[\w\W])*?\1|[^\s'">=]+))?\s*)*\/?>/gi,inside:{tag:{pattern:/^<\/?[\w:-]+/i,inside:{punctuation:/^<\/?/,namespace:/^[\w-]+?:/}},"attr-value":{pattern:/=(?:('|")[\w\W]*?(\1)|[^\s>]+)/gi,inside:{punctuation:/=|>|"/g}},punctuation:/\/?>/g,"attr-name":{pattern:/[\w:-]+/g,inside:{namespace:/^[\w-]+?:/}}}},entity:/\&#?[\da-z]{1,8};/gi},Prism.hooks.add("wrap",function(t){"entity"===t.type&&(t.attributes.title=t.content.replace(/&amp;/,"&"))}),Prism.languages.css={comment:/\/\*[\w\W]*?\*\//g,atrule:{pattern:/@[\w-]+?.*?(;|(?=\s*{))/gi,inside:{punctuation:/[;:]/g}},url:/url\((["']?).*?\1\)/gi,selector:/[^\{\}\s][^\{\};]*(?=\s*\{)/g,property:/(\b|\B)[\w-]+(?=\s*:)/gi,string:/("|')(\\?.)*?\1/g,important:/\B!important\b/gi,punctuation:/[\{\};:]/g,"function":/[-a-z0-9]+(?=\()/gi},Prism.languages.markup&&(Prism.languages.insertBefore("markup","tag",{style:{pattern:/<style[\w\W]*?>[\w\W]*?<\/style>/gi,inside:{tag:{pattern:/<style[\w\W]*?>|<\/style>/gi,inside:Prism.languages.markup.tag.inside},rest:Prism.languages.css},alias:"language-css"}}),Prism.languages.insertBefore("inside","attr-value",{"style-attr":{pattern:/\s*style=("|').+?\1/gi,inside:{"attr-name":{pattern:/^\s*style/gi,inside:Prism.languages.markup.tag.inside},punctuation:/^\s*=\s*['"]|['"]\s*$/,"attr-value":{pattern:/.+/gi,inside:Prism.languages.css}},alias:"language-css"}},Prism.languages.markup.tag)),Prism.languages.css.selector={pattern:/[^\{\}\s][^\{\}]*(?=\s*\{)/g,inside:{"pseudo-element":/:(?:after|before|first-letter|first-line|selection)|::[-\w]+/g,"pseudo-class":/:[-\w]+(?:\(.*\))?/g,"class":/\.[-:\.\w]+/g,id:/#[-:\.\w]+/g}},Prism.languages.insertBefore("css","ignore",{hexcode:/#[\da-f]{3,6}/gi,entity:/\\[\da-f]{1,8}/gi,number:/[\d%\.]+/g}),Prism.languages.clike={comment:[{pattern:/(^|[^\\])\/\*[\w\W]*?\*\//g,lookbehind:!0},{pattern:/(^|[^\\:])\/\/.*?(\r?\n|$)/g,lookbehind:!0}],string:/("|')(\\?.)*?\1/g,"class-name":{pattern:/((?:(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[a-z0-9_\.\\]+/gi,lookbehind:!0,inside:{punctuation:/(\.|\\)/}},keyword:/\b(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/g,"boolean":/\b(true|false)\b/g,"function":{pattern:/[a-z0-9_]+\(/gi,inside:{punctuation:/\(/}},number:/\b-?(0x[\dA-Fa-f]+|\d*\.?\d+([Ee]-?\d+)?)\b/g,operator:/[-+]{1,2}|!|<=?|>=?|={1,3}|&{1,2}|\|?\||\?|\*|\/|\~|\^|\%/g,ignore:/&(lt|gt|amp);/gi,punctuation:/[{}[\];(),.:]/g},Prism.languages.javascript=Prism.languages.extend("clike",{keyword:/\b(break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|false|finally|for|function|get|if|implements|import|in|instanceof|interface|let|new|null|package|private|protected|public|return|set|static|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)\b/g,number:/\b-?(0x[\dA-Fa-f]+|\d*\.?\d+([Ee]-?\d+)?|NaN|-?Infinity)\b/g}),Prism.languages.insertBefore("javascript","keyword",{regex:{pattern:/(^|[^/])\/(?!\/)(\[.+?]|\\.|[^/\r\n])+\/[gim]{0,3}(?=\s*($|[\r\n,.;})]))/g,lookbehind:!0}}),Prism.languages.markup&&Prism.languages.insertBefore("markup","tag",{script:{pattern:/<script[\w\W]*?>[\w\W]*?<\/script>/gi,inside:{tag:{pattern:/<script[\w\W]*?>|<\/script>/gi,inside:Prism.languages.markup.tag.inside},rest:Prism.languages.javascript},alias:"language-javascript"}}),function(t,e,i,s,n){"use strict";var o=function(t,i){if(e.isUndefined(i))var s=e.isNumber(t)?{percentages:[{value:t}]}:t.percentages?t:{percentages:[t]};else for(var s={percentages:Array(arguments.length)},n=0,o=arguments.length;o>n;n++)s.percentages[n]=e.isNumber(arguments[n])?{value:arguments[n]}:arguments[n];return s};t.progressBar=function(e,i){return e=o.apply(null,arguments),new t.presto.progressBar(e)},t.widget("presto.progressBar",{templates:{base:'<div class="progressBar {%=(o.striped ? "striped" : "")%} {%=o.color%} {%=o.size%} {%=o.css%}"><div class="progressBar-unhighlighted">{% include ( "presto.progressBar.percentages" + ( o.labeled ? "_labeled" : "" ), o.percentages ); %}</div><div class="progressBar-stripes"></div></div>',percentages:'{% for ( var i = 0; i < o.length; i++ ) { %}{% include ( "presto.progressBar.percentage", o[i] ); %}{% } %}',percentages_labeled:'{% for ( var i = 0; i < o.length; i++ ) { %}{% include ( "presto.progressBar.percentage_labeled", o[i] ); %}{% } %}',percentage:'<div class="progressBar-highlighted {%=(o.color || "")%} {%=(o.css || "")%}"></div>',percentage_labeled:'<div class="progressBar-highlighted {%=(o.color || "")%} {%=(o.css || "")%}">{% include ( "presto.progressBar.label", {} ); %}</div>',label:'<div class="progressBar-label"></div>'},options:{percentages:[],color:"",size:"",css:"",striped:!1,labeled:!1,decimals:0,callbacks:{update:e.noop,full:e.noop}},_variables:function(){this.$progressBar=this.$element,this.$highlighteds=this.$progressBar.find(".progressBar-highlighted"),this.$stripes=this.$progressBar.find(".progressBar-stripes")},_init:function(){"element"!==this.initializationType&&this._update()},_update:function(){for(var t=0,i=this.options.percentages.length;i>t;t++){var s=this.$highlighteds.eq(t);if(s.width(this.options.percentages[t].value+"%"),this.options.labeled){var n=s.find(".progressBar-label");n.html(+this.options.percentages[t].value.toFixed(this.options.decimals))}}var o=e.clamp(0,e.sum(this.get().slice(0,this.$highlighteds.length)),100);this.options.striped&&this.$stripes.width(o+"%"),100===o&&this._trigger("full")},get:function(){return e.map(this.options.percentages,function(t){return t.value})},set:function(t,i){t=o.apply(null,arguments),e.merge(this.options,t),this._update(),this._trigger("update")}}),t(function(){t(".progressBar").each(function(){var e=t(this),i={percentages:[],striped:e.hasClass("striped"),labeled:!!e.find(".progressBar-label").length};e.find(".progressBar-highlighted").each(function(){i.percentages.push({value:parseFloat(this.style.width)})}),e.progressBar(i)})})}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";t.widget("presto.radio",{options:{callbacks:{checked:e.noop}},_variables:function(){this.$radio=this.$element,this.$input=this.$radio.find("input"),this.name=this.$input.attr("name"),this.$container=this.$radio.parents("form").first(),0===this.$container.length&&(this.$container=$document),this.$other_radios=this.$container.find('input[name="'+this.name+'"]').parent(".radio").not(this.$radio)},_init:function(){var t=this.$radio.hasClass("checked");this.get()?t||this.$radio.addClass("checked"):t&&this.$radio.removeClass("checked")},_events:function(){this._on("click",function(){this.check()}),this._on(!0,"change",this._handler_change)},_handler_change:function(){var t=this.get();t&&this.$other_radios.removeClass("checked"),this.$radio.toggleClass("checked",t),this._trigger(t?"checked":"unchecked")},get:function(){return this.$input.prop("checked")},check:function(){this.get()||(this.$input.prop("checked",!0).trigger("change"),this._trigger("checked"))}}),t(function(){t(".radio").radio()})}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";var o={delay:{show:350,hide:400},show:function(i,s){var n=t('<div class="ripple-circle"></div>').appendTo(s),r=s.offset(),a=t.eventXY(i),h=e.now();n.css({top:a.Y-r.top,left:a.X-r.left}).addClass("ripple-circle-show"),s.on("mouseup mouseleave",function(){o.hide(n,h)})},hide:function(t,i){var s=Math.max(0,o.delay.show+i-e.now());setTimeout(function(){t.addClass("ripple-circle-hide"),setTimeout(function(){t.remove()},o.delay.hide)},s)}};t(function(){$body.on("mousedown",".ripple",function(e){e.button!==t.ui.mouseButton.RIGHT&&o.show(e,t(this))})})}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";t.widget("presto.select",{templates:{base:'<div id="dropdown-{%=o.id%}" class="dropdown select-dropdown attached"><div class="container"><div class="container-content"><div class="multiple-wrp vertical stretched joined"><div class="multiple">{% for ( var i = 0, l = o.options.length; i < l; i++ ) { %}{% include ( "presto.select." + ( o.options[i].value ? "option" : "optgroup" ), o.options[i] ); %}{% } %}</div></div></div></div></div>',optgroup:'<div class="divider-wrp block"><div class="divider">{%=o.prop%}</div></div>',option:'<div class="label-wrp button-wrp" data-value="{%=o.prop%}"><div class="label actionable sharp"><div class="label-center">{%=o.value%}</div></div></div>'},options:{callbacks:{open:e.noop,close:e.noop,change:e.noop}},_variables:function(){this.$trigger=this.$element,this.$select=this.$trigger.find("select"),this.$options=this.$select.find("option"),this.$select_label=this.$trigger.find(".select-label"),this.$valueholder=this.$trigger.find(".valueholder"),this.id=this.$trigger.data("select"),0===this.$valueholder.length&&(this.$valueholder=this.$select_label),this.select_options=[],this.$dropdown=!1,this.$dropdown_container=!1,this.$buttons=!1},_init:function(){this._update_valueholder(),t.browser.isMobile||(this.$select.addClass("hidden"),this._init_select_options(),this._init_dropdown())},_events:function(){this._on(this.$select,"change",function(){this.update(),this._trigger("change")}),t.browser.isMobile||this._on(this.$buttons,"click",this._handler_button_click)},_handler_button_click:function(e,i){this.$select.val(t(i).data("value")).trigger("change")},_init_select_options:function(){for(var t,e,i=0,s=this.$options.length;s>i;i++){var n=this.$options.eq(i),o=n.parent();o.is("optgroup")&&(e=o.attr("label"),e!==t&&(t=e,this.select_options.push({prop:e}))),this.select_options.push({value:n.html(),prop:n.attr("value")})}},_init_dropdown:function(){var e=this._tmpl("base",{id:this.id,options:this.select_options});$body.append(e),this.$dropdown=t("#dropdown-"+this.id),this.$dropdown_container=this.$dropdown.find(".container"),this.$buttons=this.$dropdown.find(".button-wrp"),this.$trigger.addClass("dropdown-trigger").attr("data-dropdown","dropdown-"+this.id);var i=this;this.$dropdown.dropdown({callbacks:{open:function(){i._set_dropdown_width.bind(i)(),i._trigger("open")},close:i.options.callbacks.close}}),this._update_dropdown()},_update_valueholder:function(){var t=this.$options.filter('[value="'+this.$select.val()+'"]');this.$valueholder.html(t.html())},_update_dropdown:function(){this.$buttons.removeClass("active"),this.$buttons.filter('[data-value="'+this.$select.val()+'"]').addClass("active")},_set_dropdown_width:function(){this.$dropdown_container.css("min-width",this.$trigger.width())},select:function(t){this.$buttons.filter('[data-value="'+t+'"]').click()},update:function(){t.browser.isMobile||this._update_dropdown(),this._update_valueholder()}}),t(function(){t(".select-trigger").select()})}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";var o=function(){s.selection?s.selection.empty():i.getSelection&&i.getSelection().removeAllRanges()};t.widget("presto.selectable",{options:{selector:"tbody tr:not(.empty)",selected_class:"selected",callbacks:{select:e.noop}},_variables:function(){this.$rows=this._get_rows(),this.$start_row=!1,this.$end_row=!1},_init:function(){
this._reset_prevs()},_events:function(){this._on("mouseenter",this._handler_keys_in),this._on("mouseleave",this._handler_keys_out),this._on("mousedown",this.options.selector,this._handler_mousedown),this._on("change sort",this._handler_change),this._on("mousedown mouseup",this._handler_clear_selection)},_handler_keys_in:function(){this._on($document,"keydown",this._handler_keys_keydown)},_handler_keys_out:function(){this._off($document,"keydown",this._handler_keys_keydown)},_handler_keys_keydown:function(e){(t.browser.isMac&&e.metaKey||!t.browser.isMac&&e.ctrlKey)&&(65===e.keyCode?(e.preventDefault(),this._reset_prevs(),this.$rows.toggleClass(this.options.selected_class,!e.shiftKey),this._trigger("select")):73===e.keyCode&&(e.preventDefault(),this._reset_prevs(),this.$rows.toggleClass(this.options.selected_class),this._trigger("select")))},_handler_mousedown:function(e){0===e.button&&(this.$start_row=t(e.currentTarget),this._on($document,"mousemove",this._handler_mousemove),this._on("mouseup",this.options.selector,this._handler_mouseup))},_handler_mousemove:function(e){t.browser.isMac&&!e.metaKey||!t.browser.isMac&&!e.ctrlKey||(this._off($document,"mousemove",this._handler_mousemove),this._off("mouseup",this._handler_mouseup),this._reset_prevs(),this.$prev_row=this.$start_row,this.$start_row.toggleClass(this.options.selected_class),$html.addClass("dragging"),this._on("mouseenter",this.options.selector,this._handler_drag_mouseenter),this._on($document,"mouseup",this._handler_drag_mouseup),this._trigger("select"))},_handler_drag_mouseenter:function(e){this.$end_row=t(e.currentTarget);var i=this.$rows.index(this.$start_row),s=this.$rows.index(this.$end_row),n=Math.min(i,s),o=Math.max(i,s);n===i&&(n+=1,o+=1);var r=this.$rows.slice(n,o);this.$prev_dragged?(r.not(this.$prev_dragged).toggleClass(this.options.selected_class),this.$prev_dragged.not(r).toggleClass(this.options.selected_class)):r.toggleClass(this.options.selected_class),this.$prev_dragged=r,this._trigger("select")},_handler_drag_mouseup:function(){this._off("mouseenter",this._handler_drag_mouseenter),this._off($document,"mouseup",this._handler_drag_mouseup),this.$prev_dragged=!1,$html.removeClass("dragging")},_handler_mouseup:function(e){if(this._off($document,"mousemove",this._handler_mousemove),this._off("mouseup",this._handler_mouseup),e.shiftKey){var i=this.$rows.index(this.$prev_row),s=this.$prev_row?this.$rows.index(this.$start_row):0,n=Math.min(i,s),o=Math.max(i,s);n===i&&(n+=1,o+=1);var r=this.$rows.slice(n,o);this.$prev_shifted?(r.not(this.$prev_shifted).toggleClass(this.options.selected_class),this.$prev_shifted.not(r).toggleClass(this.options.selected_class)):r.toggleClass(this.options.selected_class),this.$prev_shifted=r}else t.browser.isMac&&e.metaKey||!t.browser.isMac&&e.ctrlKey||t.browser.isMobile?(this.$start_row.toggleClass(this.options.selected_class),this._reset_prevs(),this.$prev_row=this.$start_row):(this.$rows.not(this.$start_row).removeClass(this.options.selected_class),this.$start_row.toggleClass(this.options.selected_class),this._reset_prevs(),this.$prev_row=this.$start_row);this._trigger("select")},_handler_change:function(){this.$rows=this._get_rows()},_handler_clear_selection:function(){t.reflow(),o()},_reset_prevs:function(){this.$prev_row=!1,this.$prev_shifted=!1,this.$prev_dragged=!1},_get_rows:function(){return this.$element.find(this.options.selector)}}),t(function(){t("table.selectable").selectable()})}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";t.widget("presto.slider",{options:{min:0,max:100,value:0,step:1,decimals:0,callbacks:{increased:e.noop,decreased:e.noop}},_variables:function(){this.$slider=this.$element,this.$min=this.$slider.find(".slider-min"),this.$max=this.$slider.find(".slider-max"),this.$input=this.$slider.find("input"),this.$bar_wrp=this.$slider.find(".slider-bar-wrp"),this.$unhighlighted=this.$slider.find(".slider-unhighlighted"),this.$highlighted=this.$slider.find(".slider-highlighted"),this.$handler_wrp=this.$slider.find(".slider-handler-wrp"),this.$label=this.$handler_wrp.find(".slider-label"),this.steps_nr=(this.options.max-this.options.min)/this.options.step,this._update_variables()},_events:function(){this._on(!0,this.$input,"change",this._handler_change),this._on($window,"resize",this._handler_resize),this._on(this.$slider,"mouseenter",this._handler_arrows_in),this._on(this.$slider,"mouseleave",this._handler_arrows_out),this._on(this.$min,"click",this.decrease),this._on(this.$max,"click",this.increase),this.$handler_wrp.draggable({draggable:this._draggable.bind(this),axis:"x",constrainer:{$element:this.$bar_wrp,constrain_center:!0,axis:"x"},modifiers:{x:this.modifier_x.bind(this)},callbacks:{beforestart:this._handler_drag_beforestart.bind(this),move:this._handler_drag_move.bind(this),end:this._handler_drag_end.bind(this)}}),this._on(this.$unhighlighted,"click",this._handler_click)},_round_value:function(t){return Number(Number(t).toFixed(this.options.decimals))},_update_positions:function(){var t=(this.options.value-this.options.min)/this.options.step*100/this.steps_nr;this.$handler_wrp.css({left:t+"%",transform:"none"}),this.$highlighted.css({right:100-t+"%",transform:"none"})},_update_label:function(t){this.$label.html(e.isUndefined(t)?this.options.value:t)},_update_variables:function(){this.unhighlighted_width=this.$unhighlighted.width(),this.unhighlighted_offset=this.$unhighlighted.offset(),this.step_width=this.unhighlighted_width/this.steps_nr},_handler_change:function(){this.set(this.$input.val())},_handler_resize:function(){this._update_variables()},_handler_arrows_in:function(){this._on($document,"keydown",this._handler_arrows_keydown)},_handler_arrows_out:function(){this._off($document,"keydown",this._handler_arrows_keydown)},_handler_arrows_keydown:function(e){e.keyCode===t.ui.keyCode.LEFT||e.keyCode===t.ui.keyCode.DOWN?this.decrease():(e.keyCode===t.ui.keyCode.RIGHT||e.keyCode===t.ui.keyCode.UP)&&this.increase()},_draggable:function(){return!this.options.disabled},modifier_x:function(t){var e=t%this.step_width;return e>=this.step_width/2?t-e+this.step_width:t-e},_handler_drag_beforestart:function(){var t=parseFloat(this.$handler_wrp.css("left"),10);this.$handler_wrp.css({left:0,transform:"translate3d("+t+"px,0,0)"}),this.$highlighted.css({right:"100%",transform:"translate3d("+t+"px,0,0)"})},_handler_drag_move:function(t){this.$highlighted.css("transform","translate3d("+t.modifiedXY.X+"px,0,0)"),this._update_label(this._round_value(this.options.min+t.modifiedXY.X/this.step_width*this.options.step))},_handler_drag_end:function(t){var e=this.$handler_wrp.css("transform"),i="none"!==e?e.match(/[0-9., -]+/)[0].split(", "):[0,0,0,0,0,0],s=this.set(this.options.min+parseFloat(i[4],10)/this.step_width*this.options.step);s||this._update_positions()},_handler_click:function(e){if(e.target!==this.$handler_wrp.get(0)){var i=t.eventXY(e),s=this.modifier_x(i.X-this.unhighlighted_offset.left);this.set(this.options.min+s/this.step_width*this.options.step)}},get:function(){return this.options.value},set:function(t){if(t=e.clamp(this.options.min,this._round_value(t),this.options.max),t!==this.options.value){var i=t>this.options.value?"increased":"decreased";return this.options.value=t,this._update_positions(),this._update_label(),this.$input.val(t).trigger("change"),this._trigger(i),!0}return!1},increase:function(){return this.set(this.options.value+this.options.step)},decrease:function(){return this.set(this.options.value-this.options.step)}}),t(function(){t(".slider").each(function(){var e=t(this),i={min:Number(e.find(".slider-min").data("min")||0),max:Number(e.find(".slider-max").data("max")||100),value:Number(e.find("input").val()||0),step:Number(e.data("step")||1),decimals:Number(e.data("decimals")||0)};e.slider(i)})})}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";t.widget("presto.sortable",{options:{sorters:{"int":function(t,e){return parseInt(t,10)-parseInt(e,10)},"float":function(t,e){return parseFloat(t)-parseFloat(e)},string:function(t,e){return t=t.toLocaleLowerCase(),e=e.toLocaleLowerCase(),t.localeCompare(e)}},callbacks:{sort:e.noop}},_variables:function(){this.$table=this.$element,this.$headers=this.$table.find("thead th"),this.$sortables=this.$headers.filter("[data-sort]"),this.$tbody=this.$table.find("tbody"),this.table=this.element,this.tbody=this.$tbody.get(0),this.sort_datas={},this.current_index=!1,this.current_direction=!1},_init:function(){var t=this.$headers.filter(".asc, .desc").first();t.length&&this.sort(this.$headers.index(t),t.hasClass("asc")?"asc":"desc")},_events:function(){this._on(!0,"change",this._handler_change),this._on(this.$sortables,"click",this._handler_click)},_handler_change:function(){this.current_index&&(this.sort_datas={},this.sort(this.current_index,this.current_direction))},_handler_click:function(t){var e=this.$headers.index(t.target),i=this.current_index===e&&"asc"===this.current_direction?"desc":"asc";this.sort(e,i)},sort:function(t,i){var s=this.$headers.eq(t);if(s.length){var n=s.data("sort");if(n){var o=this.options.sorters[n];if(o){if(i=i&&"desc"===i.toLowerCase()?"desc":"asc",this.current_index!==!1&&this.$sortables.eq(this.current_index).removeClass(this.current_direction),s.addClass(i),e.isUndefined(this.sort_datas[t])){var r=this.$tbody.find("tr:not(.empty)");this.sort_datas[t]=Array(r.length);for(var a=0,h=r.length;h>a;a++){var c=r.eq(a).find("td").eq(t),l=c.data("sort-value")||c.text();this.sort_datas[t][a]=[r.get(a),l]}}this.sort_datas[t].sort(function(t,e){return o(t[1],e[1])}),"desc"===i&&this.sort_datas[t].reverse(),this.table.removeChild(this.tbody);for(var a=0,h=this.sort_datas[t].length;h>a;a++)this.tbody.appendChild(this.sort_datas[t][a][0]);this.table.appendChild(this.tbody),this.current_index=t,this.current_direction=i,this._trigger("sort",{index:this.current_index,direction:this.current_direction})}}}}}),t(function(){t("table.sortable").sortable()})}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";t.widget("presto.stepper",{options:{min:0,max:100,value:0,step:1,decimals:0,callbacks:{increase:e.noop,decrease:e.noop}},_variables:function(){this.$stepper=this.$element,this.$input=this.$stepper.find("input"),this.$decreaser=this.$stepper.find(".stepper-decreaser"),this.$increaser=this.$stepper.find(".stepper-increaser")},_events:function(){this._on(!0,this.$input,"input change",this._handler_input_change),this._on("mouseenter",this._handler_arrows_in),this._on("mouseleave",this._handler_arrows_out),this._on(this.$decreaser,"click",this.decrease),this._on(this.$increaser,"click",this.increase)},_round_value:function(t){return Number(Number(t).toFixed(this.options.decimals))},_handler_input_change:function(){this.set_value(this.$input.val())},_handler_arrows_in:function(t){this._on($document,"keydown",this._handler_arrows_keydown)},_handler_arrows_out:function(t){this._off($document,"keydown",this._handler_arrows_keydown)},_handler_arrows_keydown:function(e){e.keyCode===t.ui.keyCode.LEFT||e.keyCode===t.ui.keyCode.DOWN?this.decrease():(e.keyCode===t.ui.keyCode.RIGHT||e.keyCode===t.ui.keyCode.UP)&&this.increase()},set_value:function(t){if(t=this._round_value(t),t!==this.options.value||0===this.$input.val().length){var i=e.clamp(this.options.min,t,this.options.max);this.options.value=i,this.$input.val(i).trigger("change"),this.$decreaser.toggleClass("disabled",i===this.options.min),this.$increaser.toggleClass("disabled",i===this.options.max),this._trigger(i>this.options.value?"increase":"decrease")}},increase:function(){this.navigate(this.options.step)},decrease:function(){this.navigate(-this.options.step)},navigate:function(t){var e=this.options.value+t;this.set_value(e)}}),t(function(){t(".stepper").each(function(){var e=t(this),i=e.find("input"),s={min:Number(e.data("min")||0),max:Number(e.data("max")||100),value:Number(i.val()||0),step:Number(e.data("step")||1),decimals:Number(e.data("decimals")||0)};e.stepper(s)})})}(jQuery,_,window,document),function(t,e,i,s){"use strict";t.widget("presto.switch",{options:{colors:{on:"secondary",off:"gray"},callbacks:{checked:_.noop,unchecked:_.noop}},_variables:function(){this.$switch=this.$element,this.$input=this.$switch.find("input"),this.$bar_wrp=this.$switch.find(".switch-bar-wrp"),this.$bar=this.$switch.find(".switch-bar"),this.$handler=this.$switch.find(".switch-handler"),this.$icon=this.$handler.find(".icon"),this.checked=this.$input.prop("checked"),this.dragging=!1},_init:function(){this._set_check(this.checked,!0)},_events:function(){this._on(!0,this.$input,"change",this._handler_change),this._on("mouseenter",this._handler_keys_in),this._on("mouseleave",this._handler_keys_out),this._on(this.$bar,"click",this._handler_click),this.$handler.draggable({axis:"x",constrainer:{$element:this.$bar_wrp},callbacks:{end:this._handler_drag_end.bind(this)}})},_handler_change:function(){var t=this.$input.prop("checked");this.checked!==t&&(this.checked=t,this._set_check(this.checked,!0))},_handler_keys_in:function(){this._on($document,"keydown",this._handler_keys_keydown)},_handler_keys_out:function(){this._off($document,"keydown",this._handler_keys_keydown)},_handler_keys_keydown:function(e){e.keyCode===t.ui.keyCode.LEFT?this.uncheck():e.keyCode===t.ui.keyCode.RIGHT?this.check():e.keyCode===t.ui.keyCode.SPACE&&this.toggle()},_handler_click:function(){return this.dragging?void(this.dragging=!1):void this.toggle()},_handler_drag_end:function(t){if(t.dragged){this.dragging=!0;var e=this.$handler.offset().left-this.$bar_wrp.offset().left+this.$handler.width()/2>=this.$bar_wrp.width()/2;this.checked=e?!0:!1,this._set_check(this.checked,!0)}},_set_check:function(t,e){(t!==this.$input.prop("checked")||e)&&(this.$switch.toggleClass("checked",t),this.$handler.css("transform","translate3d("+(t?"1.73333em":"0")+",0,0)"),this.$bar.toggleClass(this.options.colors.on,t),this.$handler.toggleClass(this.options.colors.on,t),this.$bar.toggleClass(this.options.colors.off,!t),this.$handler.toggleClass(this.options.colors.off,!t),this.$input.prop("checked",t).trigger("change"),this._trigger(t?"checked":"unchecked"))},check:function(){this._set_check(!0)},uncheck:function(){this._set_check(!1)},toggle:function(){this.checked=!this.checked,this._set_check(this.checked)}}),t(function(){t(".switch").each(function(){var e=t(this),i={colors:{on:e.data("color-on")||"secondary",off:e.data("color-off")||"gray"}};e["switch"](i)})})}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";t.widget("presto.tableHelper",{options:{callbacks:{add:e.noop,update:e.noop,remove:e.noop,clear:e.noop}},_variables:function(){this.$table=this.$element,this.$thead=this.$table.find("thead"),this.$tfoot=this.$table.find("tfoot"),this.$tbody=this.$table.find("tbody"),this.$headers=this.$thead.find("th"),this.$empty_row=this.$tbody.find("tr.empty"),this.columns_nr=this.$headers.length},_init:function(){this._check_empty()},_check_empty:function(){this.$empty_row.toggleClass("hidden",this.$tbody.find("tr:not(.empty)").length>0)},_get_row_id:function(t){return"rid_"+this.uuid+"_"+t},add:function(i){var s=e.tail(arguments);if(s.length){var n=this.$tbody.find("td.fillable");if(n.length){var o=e.slice(s,0,n.length);s=e.slice(s,o.length-1,s.length);for(var r=0,a=o.length;a>r;r++)n.eq(r).html(o[r]).removeClass("fillable")}if(i&&t("."+this._get_row_id(i)).length)return t.noty("A table cannot contain 2 rows with the same ID"),this;for(var h=e.chunk(s,this.columns_nr),c=0,l=h.length;l>c;c++){for(var d=h[c],u="<tr "+(i?'class="'+this._get_row_id(i)+'"':"")+">",r=0,a=d.length;a>r;r++)u+="<td>"+(d[r]||"")+"</td>";for(var r=d.length,a=this.columns_nr;a>r;r++)u+='<td class="fillable"></td>';u+="</tr>",this.$tbody.append(u)}this._check_empty(),this.$table.trigger("change"),this._trigger("add")}return this},update:function(i){var s=e.tail(arguments),n=t("."+this._get_row_id(i));if(s.length&&n.length){var o=n.find("td");e.each(s,function(t,i){e.isString(t)&&o.eq(i).html(t)}),this.$table.trigger("change"),this._trigger("update")}return this},remove:function(e){var i=t("."+this._get_row_id(e));return i.length&&(i.remove(),this._check_empty(),this.$table.trigger("change"),this._trigger("remove")),this},clear:function(){var t=this.$tbody.find("tr:not(.empty)");return t.length&&(t.remove(),this._check_empty(),this.$table.trigger("change"),this._trigger("clear")),this}}),t(function(){t("table").tableHelper()})}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";t.widget("presto.tabs",{options:{selectors:{buttons_wrp:".tabs-buttons",buttons:".button-wrp > .label",button_active_class:"active",indicator:".tabs-buttons-indicator",containers_wrp:".tabs-containers",containers:"> .container",container_active_class:"active"},indicator_delay:40,callbacks:{select:e.noop}},_variables:function(){this.$tabs=this.$element,this.isVertical=this.$tabs.hasClass("vertical"),this.$tabs_buttons=this.$tabs.find(this.options.selectors.buttons_wrp),this.$buttons=this.$tabs_buttons.find(this.options.selectors.buttons),this.$indicator=this.$tabs.find(this.options.selectors.indicator),this.$tabs_containers=this.$tabs.find(this.options.selectors.containers_wrp),this.$containers=this.$tabs_containers.find(this.options.selectors.containers);var t=this.$buttons.filter("."+this.options.selectors.button_active_class).first();t=t.length>0?t:this.$buttons.first(),this.prev_index=0,this.current_index=this.$buttons.index(t)},_init:function(){this.select(this.current_index,!0)},_events:function(){this._on(this.$tabs_buttons,"click",this.options.selectors.buttons,this._hander_button_click),this._on($window,"resize",this._positionate_indicator)},_hander_button_click:function(e,i){var s=this.$buttons.index(t(i));this.select(s)},_positionate_indicator:function(){var t=this.$buttons.filter("."+this.options.selectors.button_active_class),e=t.position();if(this.isVertical){var i=this.$tabs_buttons.height();this._delay(function(){var s=e.top+(0===this.$buttons.index(t)?1:0);this.$indicator.css("top",100*s/i+"%")},this.current_index>this.prev_index?this.options.indicator_delay:0),this._delay(function(){var s=i-e.top-t.height()+(this.$buttons.index(t)===this.$buttons.length-1?1:0);this.$indicator.css("bottom",100*s/i+"%")},this.current_index>this.prev_index?0:this.options.indicator_delay)}else{var s=this.$tabs_buttons.width();this._delay(function(){var i=e.left+(0===this.$buttons.index(t)?1:0);this.$indicator.css("left",100*i/s+"%")},this.current_index>this.prev_index?this.options.indicator_delay:0),this._delay(function(){var i=s-e.left-t.width()+(this.$buttons.index(t)===this.$buttons.length-1?1:0);this.$indicator.css("right",100*i/s+"%")},this.current_index>this.prev_index?0:this.options.indicator_delay)}},select:function(t,e){(this.current_index!==t||e)&&(this.$buttons.eq(this.current_index).removeClass(this.options.selectors.button_active_class),this.$buttons.eq(t).addClass(this.options.selectors.button_active_class),this.$containers.eq(this.current_index).removeClass(this.options.selectors.container_active_class),this.$containers.eq(t).addClass(this.options.selectors.container_active_class),this.current_index!==t&&(this.prev_index=this.current_index,this.current_index=t),this._positionate_indicator())}}),t(function(){t(".tabs").tabs()})}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";t.widget("presto.tagbox",{templates:{tag:'<div class="multiple-wrp joined tagbox-tag" data-tag-value="{%=o.str%}"><div class="multiple"><div class="label-wrp"><div class="label compact {%=(o.color ? o.color : "")%} {%=(o.size ? o.size : "")%} {%=(o.css ? o.css : "")%}"><div class="label-center">{%=o.str%}<div class="icon icon-navigation-close right tagbox-tag-remover"></div></div></div></div></div></div>'},options:{tags:{init:"",str:"",arr:[]},tag:{min_length:3,color:"",size:"medium",css:"outlined"},characters:{forbidden:["<",">",";","`"],separator:",",inserters:[t.ui.keyCode.ENTER,t.ui.keyCode.TAB]},sort:!1,escape:!0,deburr:!1,callbacks:{update:e.noop,add:e.noop,remove:e.noop}},_variables:function(){this.$tagbox=this.$element;var t=this.$tagbox.find("input");this.$input=t.eq(0),this.$partial=t.eq(1),this.partial=this.$partial.get(0),this.$partial_wrp=this.$partial.parent(".input-wrp")},_init:function(){this.add(this.options.tags.init)},_events:function(){this._on(this.$partial,"keypress keydown",this._handler_keypress_keydown),this._on(this.$partial,"paste",this._handler_paste),this._on("click",this._handler_click_on_empty),this._on("click",".tagbox-tag-remover",this._handler_click_on_tag_remover)},_get_tag_html:function(t){return this._tmpl("tag",e.merge({str:t},this.options.tag))},_update_tags_str:function(){this.options.tags.str=this.options.tags.arr.join(this.options.characters.separator)},_sanitize_tag_str:function(t){return t=e.trim(t),this.options.escape&&(t=e.escape(t)),this.options.deburr&&(t=e.deburr(t)),t},_update_input:function(){this.$input.val(this.options.tags.str).trigger("change")},_clear_partial:function(){this.$partial.val("").trigger("change")},_partial_add_tag:function(i){var s=e.trim(i),i=this._sanitize_tag_str(i);if(s.length<this.options.tag.min_length)s.length>0&&t.noty("`"+i+"` is shorter than "+this.options.tag.min_length+" characters");else{if(!e.contains(this.options.tags.arr,i)){this.options.tags.arr.push(i),this.options.sort&&this.options.tags.arr.sort();var n=this._get_tag_html(i);if(1!==this.options.tags.arr.length&&this.options.sort){var o=this.options.tags.arr.indexOf(i);0===o?this.$tagbox.find(".tagbox-tag").first().before(n):this.$tagbox.find(".tagbox-tag").eq(o-1).after(n)}else this.$partial_wrp.before(n);return!0}t.noty("`"+i+"` is a duplicate")}return!1},_partial_remove_tag:function(t,i){t.remove(),e.pull(this.options.tags.arr,i)},_handler_keypress_keydown:function(i){var s=this.$partial.val();if(e.contains(this.options.characters.inserters,i.keyCode)||i.keyCode===this.options.characters.separator.charCodeAt(0)){var n=this.add(s);n&&this._clear_partial(),i.preventDefault()}else if(i.keyCode===t.ui.keyCode.BACKSPACE){if(0===s.length&&this.options.tags.arr.length>0){var o=this.$tagbox.find(".tagbox-tag").last(),r=!(t.browser.isMac&&i.metaKey||!t.browser.isMac&&i.ctrlKey);this.remove(o,r),i.preventDefault()}}else e.contains(this.options.characters.forbidden,String.fromCharCode(i.keyCode))&&(t.noty("The character you entered is forbidden"),i.preventDefault())},_handler_paste:function(t){this._delay(function(){this.add(this.$partial.val()),this._clear_partial()})},_handler_click_on_tag_remover:function(e,i){var s=t(i).parents(".tagbox-tag");this.remove(s)},_handler_click_on_empty:function(e){s.activeElement===this.partial||t(e.target).is("input, .tagbox-tag-label")||this.$partial.focus()},get:function(){return this.options.tags.str},add:function(t){for(var i=t.split(this.options.characters.separator),s=[],n=0,o=i.length;o>n;n++)s.push(this._partial_add_tag(i[n]));var r=e.compact(s).length>0;return r&&(this._update_tags_str(),this._update_input()),r},remove:function(t,e){if(t instanceof jQuery)var i=[t],s=[t.data("tag-value")];else{var i=[],s=[];t=t.split(this.options.characters.separator);for(var n=0,o=t.length;o>n;n++){var r=this._sanitize_tag_str(t[n]),a=this.$tagbox.find('.tagbox-tag[data-tag-value="'+r+'"]');a.length&&(i.push(a),s.push(r))}}if(i.length){for(var n=0,o=i.length;o>n;n++)this._partial_remove_tag(i[n],s[n]);this._update_tags_str(),this._update_input(),1===o&&e===!0&&this.$partial.val(s[0]).trigger("change")}},clear:function(){this.options.tags.arr.length&&(this.options.tags.str="",this.options.tags.arr=[],this.$tagbox.find(".tagbox-tag").remove(),this._clear_partial(),this._update_input())},reset:function(){this.clear(),this._init()}}),t(function(){t(".tagbox").each(function(){var e=t(this),i=e.find("input").eq(0),s={tags:{init:i.val(),str:"",arr:[]}};e.tagbox(s)})})}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";t.timer=function(t,e,i){return new o(t,e,i)};var o=function(t,e,i){return this.set(t,e,i)};o.prototype={set:function(t,e,i){return this.init=!0,this.action=t,isNaN(e)||(this.intervalTime=e),i&&!this.isActive&&(this.isActive=!0,this.setTimer()),this},once:function(t){var e=this;return isNaN(t)&&(t=0),setTimeout(function(){e.action()},t),this},play:function(t){return this.isActive||(t?this.setTimer():this.setTimer(this.remaining_time),this.isActive=!0),this},pause:function(){return this.isActive&&(this.isActive=!1,this.remaining_time-=new Date-this.last,this.clearTimer()),this},stop:function(){return this.isActive=!1,this.remaining_time=this.intervalTime,this.clearTimer(),this},toggle:function(t){return this.isActive?this.pause():t?this.play(!0):this.play(),this},reset:function(){return this.isActive=!1,this.play(!0),this},clearTimer:function(){clearTimeout(this.timeoutObject)},setTimer:function(t){var e=this;isNaN(t)&&(t=this.intervalTime),this.remaining_time=t,this.last=new Date,this.clearTimer(),this.timeoutObject=setTimeout(function(){e.go()},t)},go:function(){this.isActive&&(this.action(),this.setTimer())},remaining:function(t){return e.isUndefined(t)?this.remaining_time:(this.remaining_time=t,this)}}}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";t.widget("presto.timeAgo",{options:{timestamp:!1,title:!1,callbacks:{update:e.noop}},_variables:function(){this.$timeAgo_wrp=this.$element,this.options.timestamp=this.$timeAgo_wrp.data(this.options.title?"timestamp-title":"timestamp")},_init:function(){this._update_loop(0)},_update_loop:function(t){this._delay(function(){this._update_loop(this.update().next)},1e3*t)},update:function(){var t=e.timeAgo(this.options.timestamp);return this.options.title?this.$timeAgo_wrp.attr("title",t.str):this.$timeAgo_wrp.html(t.str),this._trigger("update"),t}}),t(function(){t("[data-timestamp]").timeAgo(),t("[data-timestamp-title]").timeAgo({title:!0})})}(jQuery,_,window,document),function(t,e,i,s,n){"use strict";var o=function(t){var e=t.offset();return{X1:e.left,X2:e.left+t.width(),Y1:e.top,Y2:e.top+t.height()}},r=function(t,e){var i=Math.max(0,Math.min(t.X2,e.X2)-Math.max(t.X1,e.X1)),s=Math.max(0,Math.min(t.Y2,e.Y2)-Math.max(t.Y1,e.Y1));return i*s};t.fn.touching=function(i){var s=e.merge({startIndex:!1,point:!1,binarySearch:!0,$comparer:!1,$not:!1,select:"all"},i),n=s.$not?this.not(s.$not):this;if(s.$comparer){var a=o(s.$comparer),h=[],c=[];switch(n.each(function(){var e=o(t(this)),i=r(a,e);i>0&&(h.push(this),c.push(i))}),s.select){case"all":return t(h);case"most":return t(h[c.indexOf(e.max(c))]);default:return $empty}}if(s.point){var l;return s.binarySearch?(n.btEach(function(){var e=t(this),i=o(e);return s.point.Y>=i.Y1?s.point.Y<=i.Y2?s.point.X>=i.X1?s.point.X<=i.X2?(l=e,!1):1:-1:1:-1},s.startIndex),l||$empty):(n.each(function(){var e=t(this),i=o(e);return s.point.Y>=i.Y1&&s.point.Y<=i.Y2&&s.point.X>=i.X1&&s.point.X<=i.X2?(l=e,!1):void 0}),l||$empty)}}}(jQuery,_,window,document);
//# sourceMappingURL=data:application/json;base64,