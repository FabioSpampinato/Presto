'use strict';

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* =========================================================================
 * Svelto - Core - jQuery (Init)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @before ./vendor/jquery.js
 * ========================================================================= */

(function () {

		'use strict';

		/* JQUERY */

		var $ = window.jQuery || window.$;

		/* CHECKING */

		var version = $ ? $().jquery : false,
		    parts = version ? version.split('-')[0].split('.') : false,
		    nums = parts ? parts.map(Number) : false,
		    supported = nums && nums[0] > 1 || nums[0] === 1 && (nums[1] > 11 || nums[1] === 11 && nums[2] >= 2);

		if (!$ || !supported) {

				throw new Error('Svelto depends upon jQuery v1.11.2 or higher, dependency not found');
		}

		/* EXPORT */

		window.jQuery = $;
})();

/* =========================================================================
 * Svelto - Core - jQuery - Helpers (Clean data)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../init.js
 * ========================================================================= */

// Monkey patching the internal `$.cleanData` method so that we can properly destroy widgets instances when their relative elements are removed
//SOURCE: jQuery UI's Widget

(function ($) {

		'use strict';

		/* CLEAN DATA */

		var _cleanData = $.cleanData;

		$.cleanData = function (eles) {

				for (var i = 0, ele; (ele = eles[i]) !== undefined; i++) {

						var events = $._data(ele, 'events');

						if (events && events.remove) {

								$(ele).triggerHandler('remove');
						}
				}

				_cleanData(eles);
		};
})(jQuery);

/* =========================================================================
 * Svelto - Core - jQuery - Helpers (Event XY)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../init.js
 * ========================================================================= */

(function ($) {

		'use strict';

		/* EVENT XY */

		$.eventXY = function (event) {
				var X = arguments.length <= 1 || arguments[1] === undefined ? 'pageX' : arguments[1];
				var Y = arguments.length <= 2 || arguments[2] === undefined ? 'pageY' : arguments[2];


				if ('originalEvent' in event) {

						return $.eventXY(event.originalEvent);
				} else if ('changedTouches' in event && event.changedTouches.length) {

						return {
								x: event.changedTouches[0][X],
								y: event.changedTouches[0][Y]
						};
				} else if ('touches' in event && event.touches.length) {

						return {
								x: event.touches[0][X],
								y: event.touches[0][Y]
						};
				} else if (X in event) {

						return {
								x: event[X],
								y: event[Y]
						};
				}
		};
})(jQuery);

/* =========================================================================
 * Svelto - Core - jQuery - Helpers (Frame)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../init.js
 * ========================================================================= */

(function ($) {

		'use strict';

		/* FRAME */

		$.frame = function (callback) {

				return requestAnimationFrame(callback);
		};
})(jQuery);

/* =========================================================================
 * Svelto - Core - jQuery - Helpers (Get rect)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../init.js
 * ========================================================================= */

(function ($) {

		'use strict';

		/* RECT */

		$.getRect = function (node) {

				return node === window ? $.getWindowRect() : node.getBoundingClientRect();
		};

		$.fn.getRect = function () {

				return this.length ? $.getRect(this[0]) : undefined;
		};

		/* WINDOW RECT */

		$.getWindowRect = function () {

				var rect = {};

				rect.left = 0;
				rect.top = 0;
				rect.width = window.innerWidth;
				rect.height = window.innerHeight;
				rect.right = rect.width;
				rect.bottom = rect.height;

				return rect;
		};
})(jQuery);

/* =========================================================================
 * Svelto - Core - jQuery - Helpers (HSL)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../init.js
 * ========================================================================= */

//FIXME: I'm not sure if this plugin should exists

// It only works for setting

(function ($) {

		'use strict';

		/* HSL */

		$.fn.hsl = function (h, s, l) {

				return this.css('background-color', 'hsl(' + h + ',' + s + '%,' + l + '%)');
		};
})(jQuery);

/* =========================================================================
 * Svelto - Core - jQuery - Helpers (Is attached)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../init.js
 * ========================================================================= */

(function ($) {

		'use strict';

		/* IS ATTACHED */

		$.fn.isAttached = function () {

				var html = document.documentElement;

				return this[0] === html || $.contains(html, this[0]);
		};
})(jQuery);

/* =========================================================================
 * Svelto - Core - jQuery - Helpers (Iterator)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../init.js
 * ========================================================================= */

(function ($) {

		'use strict';

		/* ITERATOR */

		$.prototype[Symbol.iterator] = Array.prototype[Symbol.iterator];
})(jQuery);

/* =========================================================================
 * Svelto - Core - jQuery - Helpers (Scroll)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../init.js
 * @require ./iterator.js
 * ========================================================================= */

(function ($) {

		'use strict';

		/* SCROLL */

		//TODO: Not working but probably needed, like for scrolling down a chat
		// $.fn.scrollBottom = function ( value ) {
		//
		//   if ( !this.length ) return null;
		//
		//   let height = this.innerHeight (),
		//       scrollHeight = this[0].scrollHeight || height;
		//
		//   return _.isUndefined ( value ) ? scrollHeight - height - this.scrollTop () : this.scrollTop ( scrollHeight - height - value);
		//
		// };
		//
		// $.fn.scrollRight = function ( value ) {
		//
		//   if ( !this.length ) return null;
		//
		//   let width = this.innerWidth (),
		//       scrollWidth = this[0].scrollWidth || width;
		//
		//   return _.isUndefined ( value ) ? scrollWidth - width - this.scrollLeft () : this.scrollLeft ( scrollWidth - width - value);
		//
		// };

		$.fn.scrollParent = function (includeHidden) {
				// Take from jQuery UI, optimized for performance

				var position = this.css('position');

				if (position === 'fixed') return $(document);

				var excludeStaticParent = position === 'absolute',
				    overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/;

				var _iteratorNormalCompletion = true;
				var _didIteratorError = false;
				var _iteratorError = undefined;

				try {
						for (var _iterator = this.parents()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
								var parent = _step.value;


								var $parent = $(parent);

								if (excludeStaticParent && $parent.css('position') === 'static') continue;

								if (overflowRegex.test($parent.css('overflow') + $parent.css('overflow-y') + $parent.css('overflow-x'))) {

										return $parent;
								}
						}
				} catch (err) {
						_didIteratorError = true;
						_iteratorError = err;
				} finally {
						try {
								if (!_iteratorNormalCompletion && _iterator.return) {
										_iterator.return();
								}
						} finally {
								if (_didIteratorError) {
										throw _iteratorError;
								}
						}
				}

				return $(document);
		};

		//TODO: Preserve the scrollbars if possible, when disabling

		$.fn.toggleScroll = function (force) {

				return this.toggleClass('overflow-hidden', !force);
		};

		$.fn.disableScroll = function () {

				return this.toggleScroll(false);
		};

		$.fn.enableScroll = function () {

				return this.toggleScroll(true);
		};
})(jQuery);

/* =========================================================================
 * Svelto - Core - jQuery - Helpers (Selection)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../init.js
 * ========================================================================= */

//SOURCE: jQuery UI

(function ($) {

		'use strict';

		/* SELECTION */

		$.fn.disableSelection = function () {

				var event = 'onselectstart' in document.createElement('div') ? 'selectstart' : 'mousedown';

				return function () {

						return this.on(event + '.svelto-disable-selection', function (event) {
								return event.preventDefault();
						});
				};
		}();

		$.fn.enableSelection = function () {

				return this.off('.svelto-disable-selection');
		};
})(jQuery);

/* =========================================================================
 * Svelto - Core - lodash (Init)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @before ./vendor/lodash.js
 * ========================================================================= */

(function () {

		'use strict';

		/* LODASH */

		var _ = window.lodash || window._;

		/* CHECKING */

		var version = _ ? _.VERSION : false,
		    parts = version ? version.split('-')[0].split('.') : false,
		    nums = parts ? parts.map(Number) : false,
		    supported = nums && nums[0] > 4 || nums[0] === 4 && (nums[1] > 6 || nums[1] === 6 && nums[2] >= 1);

		if (!_ || !supported) {

				throw new Error('Svelto depends upon lodash v4.6.1 or higher, dependency not found');
		}

		/* EXPORT */

		window.lodash = _;
})();

/* =========================================================================
 * Svelto - Core - lodash - Helpers (Constants)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../init.js
 * ========================================================================= */

(function (_) {

		'use strict';

		/* CONSTANTS */

		_.mixin({

				true: _.constant(true),

				false: _.constant(false)

		});
})(lodash);

/* =========================================================================
 * Svelto - Core - lodash - Helpers (Format)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../init.js
 * ========================================================================= */

(function (_) {

		'use strict';

		/* FORMAT */

		_.mixin({
				format: function format(msg) {

						for (var i = 1, l = arguments.length - 1; i <= l; i++) {

								msg = msg.replace('$' + i, arguments.length <= i - 1 + 1 ? undefined : arguments[i - 1 + 1]);
						}

						return msg;
				}
		});
})(lodash);

/* =========================================================================
 * Svelto - Core - lodash - Helpers (MKize)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../init.js
 * ========================================================================= */

(function (_) {

		'use strict';

		/* MKIZE */

		_.mixin({
				mkize: function mkize(number) {
						var decimals = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];


						var bases = [1000000000, 1000000, 1000],
						    suffixes = ['B', 'M', 'K'];

						for (var i = 0, l = bases.length; i < l; i++) {

								if (number >= bases[i]) {

										return Number((number / bases[i]).toFixed(decimals)) + suffixes[i];
								}
						}

						return number;
				}
		});
})(lodash);

/* =========================================================================
 * Svelto - Core - lodash - Helpers (Move)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../init.js
 * ========================================================================= */

(function (_) {

		'use strict';

		/* MOVE */

		_.mixin({
				move: function move(arr, from, to) {

						arr.splice(to, 0, arr.splice(from, 1)[0]);
				}
		});
})(lodash);

/* =========================================================================
 * Svelto - Core - lodash - Helpers (Now secs)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../init.js
 * ========================================================================= */

(function (_) {

		'use strict';

		/* NOW SECS */

		_.mixin({
				nowSecs: function nowSecs() {

						return Math.floor(_.now() / 1000);
				}
		});
})(lodash);

/* =========================================================================
 * Svelto - Core - lodash - Helpers (Round closer)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../init.js
 * ========================================================================= */

(function (_) {

		'use strict';

		/* DIRECTION */

		_.mixin({
				roundCloser: function roundCloser(number, step) {

						if (_.isUndefined(step)) {

								step = 1;
						}

						var left = number % step,
						    halfStep = step / 2;

						return number - left + (left >= halfStep ? step : 0);
				}
		});
})(lodash);

/* =========================================================================
 * Svelto - Core - lodash - Helpers (Time ago)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../init.js
 * @require ./now_secs.js
 * ========================================================================= */

(function (_) {

		'use strict';

		/* TIME AGO */

		_.mixin({
				timeAgo: function timeAgo(timestamp) {
						// Timestamp is required in seconds

						var elapsed = _.nowSecs() - timestamp,
						    justNow = 5;

						var names = ['year', 'month', 'week', 'day', 'hour', 'minute', 'second'],
						    times = [31536000, 2592000, 604800, 86400, 3600, 60, 1];

						if (elapsed < justNow) {

								return {
										str: 'Just now',
										next: justNow - elapsed
								};
						} else {

								for (var i = 0, l = times.length; i < l; i++) {

										var name = names[i],
										    secs = times[i],
										    number = Math.floor(elapsed / secs);

										if (number >= 1) {

												return {
														str: number + ' ' + name + (number > 1 ? 's' : '') + ' ago',
														next: secs - (elapsed - number * secs)
												};
										}
								}
						}
				}
		});
})(lodash);

/* =========================================================================
 * Svelto - Core - lodash - Helpers
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ./constants.js
 * @require ./format.js
 * @require ./mkize.js
 * @require ./move.js
 * @require ./now_secs.js
 * @require ./round_closer.js
 * @require ./time_ago.js
 * ========================================================================= */

/* =========================================================================
 * Svelto - Core - lodash
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ./init.js
 * @require ./helpers/helpers.js
 * ========================================================================= */

/* =========================================================================
 * Svelto - Core - jQuery - Helpers (Z Index)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../init.js
 * @require core/lodash/lodash.js
 * ========================================================================= */

//SOURCE: jQuery UI

(function ($, _) {

		'use strict';

		/* Z INDEX */

		$.fn.zIndex = function (val) {

				if (!_.isUndefined(val)) {

						return this.css('zIndex', val);
				}

				if (!this.length) return 0;

				var $elem = this.eq(0),
				    position = void 0,
				    value = void 0;

				while ($elem.length && $elem[0] !== document) {

						// Ignore z-index if position is set to a value where z-index is ignored by the browser
						// This makes behavior of this function consistent across browsers
						// WebKit always returns auto if the element is positioned

						position = $elem.css('position');

						if (_.includes(['absolute', 'relative', 'fixed'], position)) {

								// IE returns 0 when zIndex is not specified
								// other browsers return a string
								// we ignore the case of nested elements with an explicit value of 0
								// <div style="z-index: -10;"><div style="z-index: 0;"></div></div>

								value = parseInt($elem.css('zIndex'), 10);

								if (!_.isNaN(value) && value !== 0) {

										return value;
								}
						}

						$elem = $elem.parent();
				}

				return 0;
		};
})(jQuery, lodash);

/* =========================================================================
 * Svelto - Core - jQuery - Helpers (Top index)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../init.js
 * @require ./z_index.js
 * ========================================================================= */

//TODO: Use it
//TODO: Write it in a more dynamic way, detecting what the highest `z-index` actually is

(function ($) {

		'use strict';

		/* TOP INDEX */

		$.fn.topIndex = function () {

				var topIndex = 1000000000;

				return function () {

						return this.zIndex(++topIndex);
				};
		};
})(jQuery);

/* =========================================================================
 * Svelto - Core - jQuery - Helpers
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ./clean_data.js
 * @require ./event_xy.js
 * @require ./frame.js
 * @require ./get_rect.js
 * @require ./hsl.js
 * @require ./is_attached.js
 * @require ./iterator.js
 * @require ./scroll.js
 * @require ./selection.js
 * @require ./top_index.js
 * @require ./z_index.js
 * ========================================================================= */

/* =========================================================================
 * Svelto - Core - jQuery
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ./init.js
 * @require ./helpers/helpers.js
 * ========================================================================= */

/*!
 * modernizr v3.3.1
 * Build http://modernizr.com/download?-addtest-atrule-domprefixes-hasevent-mq-prefixed-prefixedcss-prefixedcssvalue-prefixes-setclasses-testallprops-testprop-teststyles-dontmin
 *
 * Copyright (c)
 *  Faruk Ates
 *  Paul Irish
 *  Alex Sexton
 *  Ryan Seddon
 *  Patrick Kettner
 *  Stu Cox
 *  Richard Herrera

 * MIT License
 */

/*
 * Modernizr tests which native CSS3 and HTML5 features are available in the
 * current UA and makes the results available to you in two ways: as properties on
 * a global `Modernizr` object, and as classes on the `<html>` element. This
 * information allows you to progressively enhance your pages with a granular level
 * of control over the experience.
*/

;(function (window, document, undefined) {
		var classes = [];

		var tests = [];

		/**
   *
   * ModernizrProto is the constructor for Modernizr
   *
   * @class
   * @access public
   */

		var ModernizrProto = {
				// The current version, dummy
				_version: '3.3.1',

				// Any settings that don't work as separate modules
				// can go in here as configuration.
				_config: {
						'classPrefix': '',
						'enableClasses': true,
						'enableJSClass': false,
						'usePrefixes': true
				},

				// Queue of tests
				_q: [],

				// Stub these for people who are listening
				on: function on(test, cb) {
						// I don't really think people should do this, but we can
						// safe guard it a bit.
						// -- NOTE:: this gets WAY overridden in src/addTest for actual async tests.
						// This is in case people listen to synchronous tests. I would leave it out,
						// but the code to *disallow* sync tests in the real version of this
						// function is actually larger than this.
						var self = this;
						setTimeout(function () {
								cb(self[test]);
						}, 0);
				},

				addTest: function addTest(name, fn, options) {
						tests.push({ name: name, fn: fn, options: options });
				},

				addAsyncTest: function addAsyncTest(fn) {
						tests.push({ name: null, fn: fn });
				}
		};

		// Fake some of Object.create so we can force non test results to be non "own" properties.
		var Modernizr = function Modernizr() {};
		Modernizr.prototype = ModernizrProto;

		// Leak modernizr globally when you `require` it rather than force it here.
		// Overwrite name so constructor name is nicer :D
		Modernizr = new Modernizr();

		/**
   * List of property values to set for css tests. See ticket #21
   * http://git.io/vUGl4
   *
   * @memberof Modernizr
   * @name Modernizr._prefixes
   * @optionName Modernizr._prefixes
   * @optionProp prefixes
   * @access public
   * @example
   *
   * Modernizr._prefixes is the internal list of prefixes that we test against
   * inside of things like [prefixed](#modernizr-prefixed) and [prefixedCSS](#-code-modernizr-prefixedcss). It is simply
   * an array of kebab-case vendor prefixes you can use within your code.
   *
   * Some common use cases include
   *
   * Generating all possible prefixed version of a CSS property
   * ```js
   * var rule = Modernizr._prefixes.join('transform: rotate(20deg); ');
   *
   * rule === 'transform: rotate(20deg); webkit-transform: rotate(20deg); moz-transform: rotate(20deg); o-transform: rotate(20deg); ms-transform: rotate(20deg);'
   * ```
   *
   * Generating all possible prefixed version of a CSS value
   * ```js
   * rule = 'display:' +  Modernizr._prefixes.join('flex; display:') + 'flex';
   *
   * rule === 'display:flex; display:-webkit-flex; display:-moz-flex; display:-o-flex; display:-ms-flex; display:flex'
   * ```
   */

		// we use ['',''] rather than an empty array in order to allow a pattern of .`join()`ing prefixes to test
		// values in feature detects to continue to work
		var prefixes = ModernizrProto._config.usePrefixes ? ' -webkit- -moz- -o- -ms- '.split(' ') : ['', ''];

		// expose these for the plugin API. Look in the source for how to join() them against your input
		ModernizrProto._prefixes = prefixes;

		/**
   * is returns a boolean if the typeof an obj is exactly type.
   *
   * @access private
   * @function is
   * @param {*} obj - A thing we want to check the type of
   * @param {string} type - A string to compare the typeof against
   * @returns {boolean}
   */

		function is(obj, type) {
				return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === type;
		}
		;

		/**
   * Run through all tests and detect their support in the current UA.
   *
   * @access private
   */

		function testRunner() {
				var featureNames;
				var feature;
				var aliasIdx;
				var result;
				var nameIdx;
				var featureName;
				var featureNameSplit;

				for (var featureIdx in tests) {
						if (tests.hasOwnProperty(featureIdx)) {
								featureNames = [];
								feature = tests[featureIdx];
								// run the test, throw the return value into the Modernizr,
								// then based on that boolean, define an appropriate className
								// and push it into an array of classes we'll join later.
								//
								// If there is no name, it's an 'async' test that is run,
								// but not directly added to the object. That should
								// be done with a post-run addTest call.
								if (feature.name) {
										featureNames.push(feature.name.toLowerCase());

										if (feature.options && feature.options.aliases && feature.options.aliases.length) {
												// Add all the aliases into the names list
												for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) {
														featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());
												}
										}
								}

								// Run the test, or use the raw value if it's not a function
								result = is(feature.fn, 'function') ? feature.fn() : feature.fn;

								// Set each of the names on the Modernizr object
								for (nameIdx = 0; nameIdx < featureNames.length; nameIdx++) {
										featureName = featureNames[nameIdx];
										// Support dot properties as sub tests. We don't do checking to make sure
										// that the implied parent tests have been added. You must call them in
										// order (either in the test, or make the parent test a dependency).
										//
										// Cap it to TWO to make the logic simple and because who needs that kind of subtesting
										// hashtag famous last words
										featureNameSplit = featureName.split('.');

										if (featureNameSplit.length === 1) {
												Modernizr[featureNameSplit[0]] = result;
										} else {
												// cast to a Boolean, if not one already
												/* jshint -W053 */
												if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {
														Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);
												}

												Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result;
										}

										classes.push((result ? '' : 'no-') + featureNameSplit.join('-'));
								}
						}
				}
		}
		;

		/**
   * docElement is a convenience wrapper to grab the root element of the document
   *
   * @access private
   * @returns {HTMLElement|SVGElement} The root element of the document
   */

		var docElement = document.documentElement;

		/**
   * A convenience helper to check if the document we are running in is an SVG document
   *
   * @access private
   * @returns {boolean}
   */

		var isSVG = docElement.nodeName.toLowerCase() === 'svg';

		/**
   * setClasses takes an array of class names and adds them to the root element
   *
   * @access private
   * @function setClasses
   * @param {string[]} classes - Array of class names
   */

		// Pass in an and array of class names, e.g.:
		//  ['no-webp', 'borderradius', ...]
		function setClasses(classes) {
				var className = docElement.className;
				var classPrefix = Modernizr._config.classPrefix || '';

				if (isSVG) {
						className = className.baseVal;
				}

				// Change `no-js` to `js` (independently of the `enableClasses` option)
				// Handle classPrefix on this too
				if (Modernizr._config.enableJSClass) {
						var reJS = new RegExp('(^|\\s)' + classPrefix + 'no-js(\\s|$)');
						className = className.replace(reJS, '$1' + classPrefix + 'js$2');
				}

				if (Modernizr._config.enableClasses) {
						// Add the new classes
						className += ' ' + classPrefix + classes.join(' ' + classPrefix);
						isSVG ? docElement.className.baseVal = className : docElement.className = className;
				}
		}

		;

		/**
   * If the browsers follow the spec, then they would expose vendor-specific style as:
   *   elem.style.WebkitBorderRadius
   * instead of something like the following, which would be technically incorrect:
   *   elem.style.webkitBorderRadius
    * Webkit ghosts their properties in lowercase but Opera & Moz do not.
   * Microsoft uses a lowercase `ms` instead of the correct `Ms` in IE8+
   *   erik.eae.net/archives/2008/03/10/21.48.10/
    * More here: github.com/Modernizr/Modernizr/issues/issue/21
   *
   * @access private
   * @returns {string} The string representing the vendor-specific style properties
   */

		var omPrefixes = 'Moz O ms Webkit';

		/**
   * List of JavaScript DOM values used for tests
   *
   * @memberof Modernizr
   * @name Modernizr._domPrefixes
   * @optionName Modernizr._domPrefixes
   * @optionProp domPrefixes
   * @access public
   * @example
   *
   * Modernizr._domPrefixes is exactly the same as [_prefixes](#modernizr-_prefixes), but rather
   * than kebab-case properties, all properties are their Capitalized variant
   *
   * ```js
   * Modernizr._domPrefixes === [ "Moz", "O", "ms", "Webkit" ];
   * ```
   */

		var domPrefixes = ModernizrProto._config.usePrefixes ? omPrefixes.toLowerCase().split(' ') : [];
		ModernizrProto._domPrefixes = domPrefixes;

		/**
   * hasOwnProp is a shim for hasOwnProperty that is needed for Safari 2.0 support
   *
   * @author kangax
   * @access private
   * @function hasOwnProp
   * @param {object} object - The object to check for a property
   * @param {string} property - The property to check for
   * @returns {boolean}
   */

		// hasOwnProperty shim by kangax needed for Safari 2.0 support
		var hasOwnProp;

		(function () {
				var _hasOwnProperty = {}.hasOwnProperty;
				/* istanbul ignore else */
				/* we have no way of testing IE 5.5 or safari 2,
     * so just assume the else gets hit */
				if (!is(_hasOwnProperty, 'undefined') && !is(_hasOwnProperty.call, 'undefined')) {
						hasOwnProp = function hasOwnProp(object, property) {
								return _hasOwnProperty.call(object, property);
						};
				} else {
						hasOwnProp = function hasOwnProp(object, property) {
								/* yes, this can give false positives/negatives, but most of the time we don't care about those */
								return property in object && is(object.constructor.prototype[property], 'undefined');
						};
				}
		})();

		// _l tracks listeners for async tests, as well as tests that execute after the initial run
		ModernizrProto._l = {};

		/**
   * Modernizr.on is a way to listen for the completion of async tests. Being
   * asynchronous, they may not finish before your scripts run. As a result you
   * will get a possibly false negative `undefined` value.
   *
   * @memberof Modernizr
   * @name Modernizr.on
   * @access public
   * @function on
   * @param {string} feature - String name of the feature detect
   * @param {function} cb - Callback function returning a Boolean - true if feature is supported, false if not
   * @example
   *
   * ```js
   * Modernizr.on('flash', function( result ) {
   *   if (result) {
   *    // the browser has flash
   *   } else {
   *     // the browser does not have flash
   *   }
   * });
   * ```
   */

		ModernizrProto.on = function (feature, cb) {
				// Create the list of listeners if it doesn't exist
				if (!this._l[feature]) {
						this._l[feature] = [];
				}

				// Push this test on to the listener list
				this._l[feature].push(cb);

				// If it's already been resolved, trigger it on next tick
				if (Modernizr.hasOwnProperty(feature)) {
						// Next Tick
						setTimeout(function () {
								Modernizr._trigger(feature, Modernizr[feature]);
						}, 0);
				}
		};

		/**
   * _trigger is the private function used to signal test completion and run any
   * callbacks registered through [Modernizr.on](#modernizr-on)
   *
   * @memberof Modernizr
   * @name Modernizr._trigger
   * @access private
   * @function _trigger
   * @param {string} feature - string name of the feature detect
   * @param {function|boolean} [res] - A feature detection function, or the boolean =
   * result of a feature detection function
   */

		ModernizrProto._trigger = function (feature, res) {
				if (!this._l[feature]) {
						return;
				}

				var cbs = this._l[feature];

				// Force async
				setTimeout(function () {
						var i, cb;
						for (i = 0; i < cbs.length; i++) {
								cb = cbs[i];
								cb(res);
						}
				}, 0);

				// Don't trigger these again
				delete this._l[feature];
		};

		/**
   * addTest allows you to define your own feature detects that are not currently
   * included in Modernizr (under the covers it's the exact same code Modernizr
   * uses for its own [feature detections](https://github.com/Modernizr/Modernizr/tree/master/feature-detects)). Just like the offical detects, the result
   * will be added onto the Modernizr object, as well as an appropriate className set on
   * the html element when configured to do so
   *
   * @memberof Modernizr
   * @name Modernizr.addTest
   * @optionName Modernizr.addTest()
   * @optionProp addTest
   * @access public
   * @function addTest
   * @param {string|object} feature - The string name of the feature detect, or an
   * object of feature detect names and test
   * @param {function|boolean} test - Function returning true if feature is supported,
   * false if not. Otherwise a boolean representing the results of a feature detection
   * @example
   *
   * The most common way of creating your own feature detects is by calling
   * `Modernizr.addTest` with a string (preferably just lowercase, without any
   * punctuation), and a function you want executed that will return a boolean result
   *
   * ```js
   * Modernizr.addTest('itsTuesday', function() {
   *  var d = new Date();
   *  return d.getDay() === 2;
   * });
   * ```
   *
   * When the above is run, it will set Modernizr.itstuesday to `true` when it is tuesday,
   * and to `false` every other day of the week. One thing to notice is that the names of
   * feature detect functions are always lowercased when added to the Modernizr object. That
   * means that `Modernizr.itsTuesday` will not exist, but `Modernizr.itstuesday` will.
   *
   *
   *  Since we only look at the returned value from any feature detection function,
   *  you do not need to actually use a function. For simple detections, just passing
   *  in a statement that will return a boolean value works just fine.
   *
   * ```js
   * Modernizr.addTest('hasJquery', 'jQuery' in window);
   * ```
   *
   * Just like before, when the above runs `Modernizr.hasjquery` will be true if
   * jQuery has been included on the page. Not using a function saves a small amount
   * of overhead for the browser, as well as making your code much more readable.
   *
   * Finally, you also have the ability to pass in an object of feature names and
   * their tests. This is handy if you want to add multiple detections in one go.
   * The keys should always be a string, and the value can be either a boolean or
   * function that returns a boolean.
   *
   * ```js
   * var detects = {
   *  'hasjquery': 'jQuery' in window,
   *  'itstuesday': function() {
   *    var d = new Date();
   *    return d.getDay() === 2;
   *  }
   * }
   *
   * Modernizr.addTest(detects);
   * ```
   *
   * There is really no difference between the first methods and this one, it is
   * just a convenience to let you write more readable code.
   */

		function addTest(feature, test) {

				if ((typeof feature === 'undefined' ? 'undefined' : _typeof(feature)) == 'object') {
						for (var key in feature) {
								if (hasOwnProp(feature, key)) {
										addTest(key, feature[key]);
								}
						}
				} else {

						feature = feature.toLowerCase();
						var featureNameSplit = feature.split('.');
						var last = Modernizr[featureNameSplit[0]];

						// Again, we don't check for parent test existence. Get that right, though.
						if (featureNameSplit.length == 2) {
								last = last[featureNameSplit[1]];
						}

						if (typeof last != 'undefined') {
								// we're going to quit if you're trying to overwrite an existing test
								// if we were to allow it, we'd do this:
								//   var re = new RegExp("\\b(no-)?" + feature + "\\b");
								//   docElement.className = docElement.className.replace( re, '' );
								// but, no rly, stuff 'em.
								return Modernizr;
						}

						test = typeof test == 'function' ? test() : test;

						// Set the value (this is the magic, right here).
						if (featureNameSplit.length == 1) {
								Modernizr[featureNameSplit[0]] = test;
						} else {
								// cast to a Boolean, if not one already
								/* jshint -W053 */
								if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {
										Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);
								}

								Modernizr[featureNameSplit[0]][featureNameSplit[1]] = test;
						}

						// Set a single class (either `feature` or `no-feature`)
						/* jshint -W041 */
						setClasses([(!!test && test != false ? '' : 'no-') + featureNameSplit.join('-')]);
						/* jshint +W041 */

						// Trigger the event
						Modernizr._trigger(feature, test);
				}

				return Modernizr; // allow chaining.
		}

		// After all the tests are run, add self to the Modernizr prototype
		Modernizr._q.push(function () {
				ModernizrProto.addTest = addTest;
		});

		var cssomPrefixes = ModernizrProto._config.usePrefixes ? omPrefixes.split(' ') : [];
		ModernizrProto._cssomPrefixes = cssomPrefixes;

		/**
   * atRule returns a given CSS property at-rule (eg @keyframes), possibly in
   * some prefixed form, or false, in the case of an unsupported rule
   *
   * @memberof Modernizr
   * @name Modernizr.atRule
   * @optionName Modernizr.atRule()
   * @optionProp atRule
   * @access public
   * @function atRule
   * @param {string} prop - String name of the @-rule to test for
   * @returns {string|boolean} The string representing the (possibly prefixed)
   * valid version of the @-rule, or `false` when it is unsupported.
   * @example
   * ```js
   *  var keyframes = Modernizr.atRule('@keyframes');
   *
   *  if (keyframes) {
   *    // keyframes are supported
   *    // could be `@-webkit-keyframes` or `@keyframes`
   *  } else {
   *    // keyframes === `false`
   *  }
   * ```
   *
   */

		var atRule = function atRule(prop) {
				var length = prefixes.length;
				var cssrule = window.CSSRule;
				var rule;

				if (typeof cssrule === 'undefined') {
						return undefined;
				}

				if (!prop) {
						return false;
				}

				// remove literal @ from beginning of provided property
				prop = prop.replace(/^@/, '');

				// CSSRules use underscores instead of dashes
				rule = prop.replace(/-/g, '_').toUpperCase() + '_RULE';

				if (rule in cssrule) {
						return '@' + prop;
				}

				for (var i = 0; i < length; i++) {
						// prefixes gives us something like -o-, and we want O_
						var prefix = prefixes[i];
						var thisRule = prefix.toUpperCase() + '_' + rule;

						if (thisRule in cssrule) {
								return '@-' + prefix.toLowerCase() + '-' + prop;
						}
				}

				return false;
		};

		ModernizrProto.atRule = atRule;

		/**
   * createElement is a convenience wrapper around document.createElement. Since we
   * use createElement all over the place, this allows for (slightly) smaller code
   * as well as abstracting away issues with creating elements in contexts other than
   * HTML documents (e.g. SVG documents).
   *
   * @access private
   * @function createElement
   * @returns {HTMLElement|SVGElement} An HTML or SVG element
   */

		function createElement() {
				if (typeof document.createElement !== 'function') {
						// This is the case in IE7, where the type of createElement is "object".
						// For this reason, we cannot call apply() as Object is not a Function.
						return document.createElement(arguments[0]);
				} else if (isSVG) {
						return document.createElementNS.call(document, 'http://www.w3.org/2000/svg', arguments[0]);
				} else {
						return document.createElement.apply(document, arguments);
				}
		}

		;

		/**
   * Modernizr.hasEvent() detects support for a given event
   *
   * @memberof Modernizr
   * @name Modernizr.hasEvent
   * @optionName Modernizr.hasEvent()
   * @optionProp hasEvent
   * @access public
   * @function hasEvent
   * @param  {string|*} eventName - the name of an event to test for (e.g. "resize")
   * @param  {Element|string} [element=HTMLDivElement] - is the element|document|window|tagName to test on
   * @returns {boolean}
   * @example
   *  `Modernizr.hasEvent` lets you determine if the browser supports a supplied event.
   *  By default, it does this detection on a div element
   *
   * ```js
   *  hasEvent('blur') // true;
   * ```
   *
   * However, you are able to give an object as a second argument to hasEvent to
   * detect an event on something other than a div.
   *
   * ```js
   *  hasEvent('devicelight', window) // true;
   * ```
   *
   */

		var hasEvent = function () {

				// Detect whether event support can be detected via `in`. Test on a DOM element
				// using the "blur" event b/c it should always exist. bit.ly/event-detection
				var needsFallback = !('onblur' in document.documentElement);

				function inner(eventName, element) {

						var isSupported;
						if (!eventName) {
								return false;
						}
						if (!element || typeof element === 'string') {
								element = createElement(element || 'div');
						}

						// Testing via the `in` operator is sufficient for modern browsers and IE.
						// When using `setAttribute`, IE skips "unload", WebKit skips "unload" and
						// "resize", whereas `in` "catches" those.
						eventName = 'on' + eventName;
						isSupported = eventName in element;

						// Fallback technique for old Firefox - bit.ly/event-detection
						if (!isSupported && needsFallback) {
								if (!element.setAttribute) {
										// Switch to generic element if it lacks `setAttribute`.
										// It could be the `document`, `window`, or something else.
										element = createElement('div');
								}

								element.setAttribute(eventName, '');
								isSupported = typeof element[eventName] === 'function';

								if (element[eventName] !== undefined) {
										// If property was created, "remove it" by setting value to `undefined`.
										element[eventName] = undefined;
								}
								element.removeAttribute(eventName);
						}

						return isSupported;
				}
				return inner;
		}();

		ModernizrProto.hasEvent = hasEvent;

		/**
   * prefixedCSSValue is a way test for prefixed css properties (e.g. display: -webkit-flex)
   *
   * @memberof Modernizr
   * @name Modernizr.prefixedCSSValue
   * @optionName Modernizr.prefixedCSSValue()
   * @optionProp prefixedCSSValue
   * @access public
   * @function prefixedCSSValue
   * @param {string} prop - String name of the property to test for
   * @param {string} value - String value of the non prefixed version of the value you want to test for
   * @returns {string|false} The string representing the (possibly prefixed)
   * valid version of the property, or `false` when it is unsupported.
   * @example
   *
   * `Modernizr.prefixedCSSValue` is a way test for prefixed css properties (e.g. display: -webkit-flex)
   *
   * ```js
   * Modernizr.prefixedCSSValue('background', 'linear-gradient(left, red, red)')
   * ```
   *
   */

		var prefixedCSSValue = function prefixedCSSValue(prop, value) {
				var result = false;
				var elem = createElement('div');
				var style = elem.style;

				if (prop in style) {
						var i = domPrefixes.length;

						style[prop] = value;
						result = style[prop];

						while (i-- && !result) {
								style[prop] = '-' + domPrefixes[i] + '-' + value;
								result = style[prop];
						}
				}

				if (result === '') {
						result = false;
				}

				return result;
		};

		ModernizrProto.prefixedCSSValue = prefixedCSSValue;

		/**
   * cssToDOM takes a kebab-case string and converts it to camelCase
   * e.g. box-sizing -> boxSizing
   *
   * @access private
   * @function cssToDOM
   * @param {string} name - String name of kebab-case prop we want to convert
   * @returns {string} The camelCase version of the supplied name
   */

		function cssToDOM(name) {
				return name.replace(/([a-z])-([a-z])/g, function (str, m1, m2) {
						return m1 + m2.toUpperCase();
				}).replace(/^-/, '');
		}
		;

		/**
   * domToCSS takes a camelCase string and converts it to kebab-case
   * e.g. boxSizing -> box-sizing
   *
   * @access private
   * @function domToCSS
   * @param {string} name - String name of camelCase prop we want to convert
   * @returns {string} The kebab-case version of the supplied name
   */

		function domToCSS(name) {
				return name.replace(/([A-Z])/g, function (str, m1) {
						return '-' + m1.toLowerCase();
				}).replace(/^ms-/, '-ms-');
		}
		;

		/**
   * getBody returns the body of a document, or an element that can stand in for
   * the body if a real body does not exist
   *
   * @access private
   * @function getBody
   * @returns {HTMLElement|SVGElement} Returns the real body of a document, or an
   * artificially created element that stands in for the body
   */

		function getBody() {
				// After page load injecting a fake body doesn't work so check if body exists
				var body = document.body;

				if (!body) {
						// Can't use the real body create a fake one.
						body = createElement(isSVG ? 'svg' : 'body');
						body.fake = true;
				}

				return body;
		}

		;

		/**
   * injectElementWithStyles injects an element with style element and some CSS rules
   *
   * @access private
   * @function injectElementWithStyles
   * @param {string} rule - String representing a css rule
   * @param {function} callback - A function that is used to test the injected element
   * @param {number} [nodes] - An integer representing the number of additional nodes you want injected
   * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes
   * @returns {boolean}
   */

		function injectElementWithStyles(rule, callback, nodes, testnames) {
				var mod = 'modernizr';
				var style;
				var ret;
				var node;
				var docOverflow;
				var div = createElement('div');
				var body = getBody();

				if (parseInt(nodes, 10)) {
						// In order not to give false positives we create a node for each test
						// This also allows the method to scale for unspecified uses
						while (nodes--) {
								node = createElement('div');
								node.id = testnames ? testnames[nodes] : mod + (nodes + 1);
								div.appendChild(node);
						}
				}

				style = createElement('style');
				style.type = 'text/css';
				style.id = 's' + mod;

				// IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.
				// Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270
				(!body.fake ? div : body).appendChild(style);
				body.appendChild(div);

				if (style.styleSheet) {
						style.styleSheet.cssText = rule;
				} else {
						style.appendChild(document.createTextNode(rule));
				}
				div.id = mod;

				if (body.fake) {
						//avoid crashing IE8, if background image is used
						body.style.background = '';
						//Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible
						body.style.overflow = 'hidden';
						docOverflow = docElement.style.overflow;
						docElement.style.overflow = 'hidden';
						docElement.appendChild(body);
				}

				ret = callback(div, rule);
				// If this is done after page load we don't want to remove the body so check if body exists
				if (body.fake) {
						body.parentNode.removeChild(body);
						docElement.style.overflow = docOverflow;
						// Trigger layout so kinetic scrolling isn't disabled in iOS6+
						docElement.offsetHeight;
				} else {
						div.parentNode.removeChild(div);
				}

				return !!ret;
		}

		;

		/**
   * Modernizr.mq tests a given media query, live against the current state of the window
   * adapted from matchMedia polyfill by Scott Jehl and Paul Irish
   * gist.github.com/786768
   *
   * @memberof Modernizr
   * @name Modernizr.mq
   * @optionName Modernizr.mq()
   * @optionProp mq
   * @access public
   * @function mq
   * @param {string} mq - String of the media query we want to test
   * @returns {boolean}
   * @example
   * Modernizr.mq allows for you to programmatically check if the current browser
   * window state matches a media query.
   *
   * ```js
   *  var query = Modernizr.mq('(min-width: 900px)');
   *
   *  if (query) {
   *    // the browser window is larger than 900px
   *  }
   * ```
   *
   * Only valid media queries are supported, therefore you must always include values
   * with your media query
   *
   * ```js
   * // good
   *  Modernizr.mq('(min-width: 900px)');
   *
   * // bad
   *  Modernizr.mq('min-width');
   * ```
   *
   * If you would just like to test that media queries are supported in general, use
   *
   * ```js
   *  Modernizr.mq('only all'); // true if MQ are supported, false if not
   * ```
   *
   *
   * Note that if the browser does not support media queries (e.g. old IE) mq will
   * always return false.
   */

		var mq = function () {
				var matchMedia = window.matchMedia || window.msMatchMedia;
				if (matchMedia) {
						return function (mq) {
								var mql = matchMedia(mq);
								return mql && mql.matches || false;
						};
				}

				return function (mq) {
						var bool = false;

						injectElementWithStyles('@media ' + mq + ' { #modernizr { position: absolute; } }', function (node) {
								bool = (window.getComputedStyle ? window.getComputedStyle(node, null) : node.currentStyle).position == 'absolute';
						});

						return bool;
				};
		}();

		ModernizrProto.mq = mq;

		/**
   * testStyles injects an element with style element and some CSS rules
   *
   * @memberof Modernizr
   * @name Modernizr.testStyles
   * @optionName Modernizr.testStyles()
   * @optionProp testStyles
   * @access public
   * @function testStyles
   * @param {string} rule - String representing a css rule
   * @param {function} callback - A function that is used to test the injected element
   * @param {number} [nodes] - An integer representing the number of additional nodes you want injected
   * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes
   * @returns {boolean}
   * @example
   *
   * `Modernizr.testStyles` takes a CSS rule and injects it onto the current page
   * along with (possibly multiple) DOM elements. This lets you check for features
   * that can not be detected by simply checking the [IDL](https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Interface_development_guide/IDL_interface_rules).
   *
   * ```js
   * Modernizr.testStyles('#modernizr { width: 9px; color: papayawhip; }', function(elem, rule) {
   *   // elem is the first DOM node in the page (by default #modernizr)
   *   // rule is the first argument you supplied - the CSS rule in string form
   *
   *   addTest('widthworks', elem.style.width === '9px')
   * });
   * ```
   *
   * If your test requires multiple nodes, you can include a third argument
   * indicating how many additional div elements to include on the page. The
   * additional nodes are injected as children of the `elem` that is returned as
   * the first argument to the callback.
   *
   * ```js
   * Modernizr.testStyles('#modernizr {width: 1px}; #modernizr2 {width: 2px}', function(elem) {
   *   document.getElementById('modernizr').style.width === '1px'; // true
   *   document.getElementById('modernizr2').style.width === '2px'; // true
   *   elem.firstChild === document.getElementById('modernizr2'); // true
   * }, 1);
   * ```
   *
   * By default, all of the additional elements have an ID of `modernizr[n]`, where
   * `n` is its index (e.g. the first additional, second overall is `#modernizr2`,
   * the second additional is `#modernizr3`, etc.).
   * If you want to have more meaningful IDs for your function, you can provide
   * them as the fourth argument, as an array of strings
   *
   * ```js
   * Modernizr.testStyles('#foo {width: 10px}; #bar {height: 20px}', function(elem) {
   *   elem.firstChild === document.getElementById('foo'); // true
   *   elem.lastChild === document.getElementById('bar'); // true
   * }, 2, ['foo', 'bar']);
   * ```
   *
   */

		var testStyles = ModernizrProto.testStyles = injectElementWithStyles;

		/**
   * contains checks to see if a string contains another string
   *
   * @access private
   * @function contains
   * @param {string} str - The string we want to check for substrings
   * @param {string} substr - The substring we want to search the first string for
   * @returns {boolean}
   */

		function contains(str, substr) {
				return !! ~('' + str).indexOf(substr);
		}

		;

		/**
   * nativeTestProps allows for us to use native feature detection functionality if available.
   * some prefixed form, or false, in the case of an unsupported rule
   *
   * @access private
   * @function nativeTestProps
   * @param {array} props - An array of property names
   * @param {string} value - A string representing the value we want to check via @supports
   * @returns {boolean|undefined} A boolean when @supports exists, undefined otherwise
   */

		// Accepts a list of property names and a single value
		// Returns `undefined` if native detection not available
		function nativeTestProps(props, value) {
				var i = props.length;
				// Start with the JS API: http://www.w3.org/TR/css3-conditional/#the-css-interface
				if ('CSS' in window && 'supports' in window.CSS) {
						// Try every prefixed variant of the property
						while (i--) {
								if (window.CSS.supports(domToCSS(props[i]), value)) {
										return true;
								}
						}
						return false;
				}
				// Otherwise fall back to at-rule (for Opera 12.x)
				else if ('CSSSupportsRule' in window) {
								// Build a condition string for every prefixed variant
								var conditionText = [];
								while (i--) {
										conditionText.push('(' + domToCSS(props[i]) + ':' + value + ')');
								}
								conditionText = conditionText.join(' or ');
								return injectElementWithStyles('@supports (' + conditionText + ') { #modernizr { position: absolute; } }', function (node) {
										return getComputedStyle(node, null).position == 'absolute';
								});
						}
				return undefined;
		}
		;

		/**
   * fnBind is a super small [bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind) polyfill.
   *
   * @access private
   * @function fnBind
   * @param {function} fn - a function you want to change `this` reference to
   * @param {object} that - the `this` you want to call the function with
   * @returns {function} The wrapped version of the supplied function
   */

		function fnBind(fn, that) {
				return function () {
						return fn.apply(that, arguments);
				};
		}

		;

		/**
   * testDOMProps is a generic DOM property test; if a browser supports
   *   a certain property, it won't return undefined for it.
   *
   * @access private
   * @function testDOMProps
   * @param {array.<string>} props - An array of properties to test for
   * @param {object} obj - An object or Element you want to use to test the parameters again
   * @param {boolean|object} elem - An Element to bind the property lookup again. Use `false` to prevent the check
   */
		function testDOMProps(props, obj, elem) {
				var item;

				for (var i in props) {
						if (props[i] in obj) {

								// return the property name as a string
								if (elem === false) {
										return props[i];
								}

								item = obj[props[i]];

								// let's bind a function
								if (is(item, 'function')) {
										// bind to obj unless overriden
										return fnBind(item, elem || obj);
								}

								// return the unbound function or obj or value
								return item;
						}
				}
				return false;
		}

		;

		/**
   * Create our "modernizr" element that we do most feature tests on.
   *
   * @access private
   */

		var modElem = {
				elem: createElement('modernizr')
		};

		// Clean up this element
		Modernizr._q.push(function () {
				delete modElem.elem;
		});

		var mStyle = {
				style: modElem.elem.style
		};

		// kill ref for gc, must happen before mod.elem is removed, so we unshift on to
		// the front of the queue.
		Modernizr._q.unshift(function () {
				delete mStyle.style;
		});

		// testProps is a generic CSS / DOM property test.

		// In testing support for a given CSS property, it's legit to test:
		//    `elem.style[styleName] !== undefined`
		// If the property is supported it will return an empty string,
		// if unsupported it will return undefined.

		// We'll take advantage of this quick test and skip setting a style
		// on our modernizr element, but instead just testing undefined vs
		// empty string.

		// Property names can be provided in either camelCase or kebab-case.

		function testProps(props, prefixed, value, skipValueTest) {
				skipValueTest = is(skipValueTest, 'undefined') ? false : skipValueTest;

				// Try native detect first
				if (!is(value, 'undefined')) {
						var result = nativeTestProps(props, value);
						if (!is(result, 'undefined')) {
								return result;
						}
				}

				// Otherwise do it properly
				var afterInit, i, propsLength, prop, before;

				// If we don't have a style element, that means we're running async or after
				// the core tests, so we'll need to create our own elements to use

				// inside of an SVG element, in certain browsers, the `style` element is only
				// defined for valid tags. Therefore, if `modernizr` does not have one, we
				// fall back to a less used element and hope for the best.
				var elems = ['modernizr', 'tspan'];
				while (!mStyle.style) {
						afterInit = true;
						mStyle.modElem = createElement(elems.shift());
						mStyle.style = mStyle.modElem.style;
				}

				// Delete the objects if we created them.
				function cleanElems() {
						if (afterInit) {
								delete mStyle.style;
								delete mStyle.modElem;
						}
				}

				propsLength = props.length;
				for (i = 0; i < propsLength; i++) {
						prop = props[i];
						before = mStyle.style[prop];

						if (contains(prop, '-')) {
								prop = cssToDOM(prop);
						}

						if (mStyle.style[prop] !== undefined) {

								// If value to test has been passed in, do a set-and-check test.
								// 0 (integer) is a valid property value, so check that `value` isn't
								// undefined, rather than just checking it's truthy.
								if (!skipValueTest && !is(value, 'undefined')) {

										// Needs a try catch block because of old IE. This is slow, but will
										// be avoided in most cases because `skipValueTest` will be used.
										try {
												mStyle.style[prop] = value;
										} catch (e) {}

										// If the property value has changed, we assume the value used is
										// supported. If `value` is empty string, it'll fail here (because
										// it hasn't changed), which matches how browsers have implemented
										// CSS.supports()
										if (mStyle.style[prop] != before) {
												cleanElems();
												return prefixed == 'pfx' ? prop : true;
										}
								}
								// Otherwise just return true, or the property name if this is a
								// `prefixed()` call
								else {
												cleanElems();
												return prefixed == 'pfx' ? prop : true;
										}
						}
				}
				cleanElems();
				return false;
		}

		;

		/**
   * testProp() investigates whether a given style property is recognized
   * Property names can be provided in either camelCase or kebab-case.
   *
   * @memberof Modernizr
   * @name Modernizr.testProp
   * @access public
   * @optionName Modernizr.testProp()
   * @optionProp testProp
   * @function testProp
   * @param {string} prop - Name of the CSS property to check
   * @param {string} [value] - Name of the CSS value to check
   * @param {boolean} [useValue] - Whether or not to check the value if @supports isn't supported
   * @returns {boolean}
   * @example
   *
   * Just like [testAllProps](#modernizr-testallprops), only it does not check any vendor prefixed
   * version of the string.
   *
   * Note that the property name must be provided in camelCase (e.g. boxSizing not box-sizing)
   *
   * ```js
   * Modernizr.testProp('pointerEvents')  // true
   * ```
   *
   * You can also provide a value as an optional second argument to check if a
   * specific value is supported
   *
   * ```js
   * Modernizr.testProp('pointerEvents', 'none') // true
   * Modernizr.testProp('pointerEvents', 'penguin') // false
   * ```
   */

		var testProp = ModernizrProto.testProp = function (prop, value, useValue) {
				return testProps([prop], undefined, value, useValue);
		};

		/**
   * testPropsAll tests a list of DOM properties we want to check against.
   * We specify literally ALL possible (known and/or likely) properties on
   * the element including the non-vendor prefixed one, for forward-
   * compatibility.
   *
   * @access private
   * @function testPropsAll
   * @param {string} prop - A string of the property to test for
   * @param {string|object} [prefixed] - An object to check the prefixed properties on. Use a string to skip
   * @param {HTMLElement|SVGElement} [elem] - An element used to test the property and value against
   * @param {string} [value] - A string of a css value
   * @param {boolean} [skipValueTest] - An boolean representing if you want to test if value sticks when set
   */
		function testPropsAll(prop, prefixed, elem, value, skipValueTest) {

				var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1),
				    props = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');

				// did they call .prefixed('boxSizing') or are we just testing a prop?
				if (is(prefixed, 'string') || is(prefixed, 'undefined')) {
						return testProps(props, prefixed, value, skipValueTest);

						// otherwise, they called .prefixed('requestAnimationFrame', window[, elem])
				} else {
								props = (prop + ' ' + domPrefixes.join(ucProp + ' ') + ucProp).split(' ');
								return testDOMProps(props, prefixed, elem);
						}
		}

		// Modernizr.testAllProps() investigates whether a given style property,
		// or any of its vendor-prefixed variants, is recognized
		//
		// Note that the property names must be provided in the camelCase variant.
		// Modernizr.testAllProps('boxSizing')
		ModernizrProto.testAllProps = testPropsAll;

		/**
   * prefixed returns the prefixed or nonprefixed property name variant of your input
   *
   * @memberof Modernizr
   * @name Modernizr.prefixed
   * @optionName Modernizr.prefixed()
   * @optionProp prefixed
   * @access public
   * @function prefixed
   * @param {string} prop - String name of the property to test for
   * @param {object} [obj] - An object to test for the prefixed properties on
   * @param {HTMLElement} [elem] - An element used to test specific properties against
   * @returns {string|false} The string representing the (possibly prefixed) valid
   * version of the property, or `false` when it is unsupported.
   * @example
   *
   * Modernizr.prefixed takes a string css value in the DOM style camelCase (as
   * opposed to the css style kebab-case) form and returns the (possibly prefixed)
   * version of that property that the browser actually supports.
   *
   * For example, in older Firefox...
   * ```js
   * prefixed('boxSizing')
   * ```
   * returns 'MozBoxSizing'
   *
   * In newer Firefox, as well as any other browser that support the unprefixed
   * version would simply return `boxSizing`. Any browser that does not support
   * the property at all, it will return `false`.
   *
   * By default, prefixed is checked against a DOM element. If you want to check
   * for a property on another object, just pass it as a second argument
   *
   * ```js
   * var rAF = prefixed('requestAnimationFrame', window);
   *
   * raf(function() {
   *  renderFunction();
   * })
   * ```
   *
   * Note that this will return _the actual function_ - not the name of the function.
   * If you need the actual name of the property, pass in `false` as a third argument
   *
   * ```js
   * var rAFProp = prefixed('requestAnimationFrame', window, false);
   *
   * rafProp === 'WebkitRequestAnimationFrame' // in older webkit
   * ```
   *
   * One common use case for prefixed is if you're trying to determine which transition
   * end event to bind to, you might do something like...
   * ```js
   * var transEndEventNames = {
   *     'WebkitTransition' : 'webkitTransitionEnd', * Saf 6, Android Browser
   *     'MozTransition'    : 'transitionend',       * only for FF < 15
   *     'transition'       : 'transitionend'        * IE10, Opera, Chrome, FF 15+, Saf 7+
   * };
   *
   * var transEndEventName = transEndEventNames[ Modernizr.prefixed('transition') ];
   * ```
   *
   * If you want a similar lookup, but in kebab-case, you can use [prefixedCSS](#modernizr-prefixedcss).
   */

		var prefixed = ModernizrProto.prefixed = function (prop, obj, elem) {
				if (prop.indexOf('@') === 0) {
						return atRule(prop);
				}

				if (prop.indexOf('-') != -1) {
						// Convert kebab-case to camelCase
						prop = cssToDOM(prop);
				}
				if (!obj) {
						return testPropsAll(prop, 'pfx');
				} else {
						// Testing DOM property e.g. Modernizr.prefixed('requestAnimationFrame', window) // 'mozRequestAnimationFrame'
						return testPropsAll(prop, obj, elem);
				}
		};

		/**
   * prefixedCSS is just like [prefixed](#modernizr-prefixed), but the returned values are in
   * kebab-case (e.g. `box-sizing`) rather than camelCase (boxSizing).
   *
   * @memberof Modernizr
   * @name Modernizr.prefixedCSS
   * @optionName Modernizr.prefixedCSS()
   * @optionProp prefixedCSS
   * @access public
   * @function prefixedCSS
   * @param {string} prop - String name of the property to test for
   * @returns {string|false} The string representing the (possibly prefixed)
   * valid version of the property, or `false` when it is unsupported.
   * @example
   *
   * `Modernizr.prefixedCSS` is like `Modernizr.prefixed`, but returns the result
   * in hyphenated form
   *
   * ```js
   * Modernizr.prefixedCSS('transition') // '-moz-transition' in old Firefox
   * ```
   *
   * Since it is only useful for CSS style properties, it can only be tested against
   * an HTMLElement.
   *
   * Properties can be passed as both the DOM style camelCase or CSS style kebab-case.
   */

		var prefixedCSS = ModernizrProto.prefixedCSS = function (prop) {
				var prefixedProp = prefixed(prop);
				return prefixedProp && domToCSS(prefixedProp);
		};

		/**
   * testAllProps determines whether a given CSS property is supported in the browser
   *
   * @memberof Modernizr
   * @name Modernizr.testAllProps
   * @optionName Modernizr.testAllProps()
   * @optionProp testAllProps
   * @access public
   * @function testAllProps
   * @param {string} prop - String naming the property to test (either camelCase or kebab-case)
   * @param {string} [value] - String of the value to test
   * @param {boolean} [skipValueTest=false] - Whether to skip testing that the value is supported when using non-native detection
   * @example
   *
   * testAllProps determines whether a given CSS property, in some prefixed form,
   * is supported by the browser.
   *
   * ```js
   * testAllProps('boxSizing')  // true
   * ```
   *
   * It can optionally be given a CSS value in string form to test if a property
   * value is valid
   *
   * ```js
   * testAllProps('display', 'block') // true
   * testAllProps('display', 'penguin') // false
   * ```
   *
   * A boolean can be passed as a third parameter to skip the value check when
   * native detection (@supports) isn't available.
   *
   * ```js
   * testAllProps('shapeOutside', 'content-box', true);
   * ```
   */

		function testAllProps(prop, value, skipValueTest) {
				return testPropsAll(prop, undefined, undefined, value, skipValueTest);
		}
		ModernizrProto.testAllProps = testAllProps;

		// Run each test
		testRunner();

		// Remove the "no-js" class if it exists
		setClasses(classes);

		delete ModernizrProto.addTest;
		delete ModernizrProto.addAsyncTest;

		// Run the things that are supposed to run after the tests
		for (var i = 0; i < Modernizr._q.length; i++) {
				Modernizr._q[i]();
		}

		// Leak Modernizr namespace
		window.Modernizr = Modernizr;

		;
})(window, document);

/* =========================================================================
 * Svelto - Core - Modernizr (Init)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ./vendor/modernizr.js
 * ========================================================================= */

(function () {

		'use strict';

		/* MODERNIZR */

		var Modernizr = window.Modernizr;

		/* CHECKING */

		var version = Modernizr ? Modernizr._version : false,
		    parts = version ? version.split('-')[0].split('.') : false,
		    nums = parts ? parts.map(Number) : false,
		    supported = nums && nums[0] > 3 || nums[0] === 3 && (nums[1] > 3 || nums[1] === 3 && nums[2] >= 1);

		if (!Modernizr || !supported) {

				throw new Error('Svelto depends upon Modernizr v3.3.1 or higher, dependency not found');
		}
})();

/* =========================================================================
 * Svelto - Core - Modernizr - Tests (Clip Path Polygon)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../init.js
 * ========================================================================= */

(function (Modernizr) {

		'use strict';

		/* CLIP PATH POLYGON */

		Modernizr.addTest('clip-path-polygon', Modernizr.testAllProps('clip-path', 'polygon( 0 0 )'));
})(Modernizr);

/* =========================================================================
 * Svelto - Core - Modernizr - Tests (Clip Path Url)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../init.js
 * @require core/jquery/jquery.js
 * ========================================================================= */

(function (Modernizr, $) {

		'use strict';

		/* CLIP PATH URL */

		$(function () {

				/* SVG */

				var ns = 'http://www.w3.org/2000/svg',
				    svg = document.createElementNS(ns, 'svg'),
				    clip = document.createElementNS(ns, 'clipPath'),
				    rect = document.createElementNS(ns, 'rect');

				clip.setAttribute('id', 'ModernizrClipPath');
				rect.setAttribute('width', '0');

				clip.appendChild(rect);
				svg.appendChild(clip);

				/* ELEMENT */

				var ele = document.createElement('div');

				ele.style.cssText = 'width:2px;height:2px;position:fixed;top:0;left:0;z-index:1000000000;opacity:0;';
				ele.style[Modernizr.prefixed('clip-path')] = 'url(#ModernizrClipPath)';

				/* APPENDING */

				document.body.appendChild(svg);
				document.body.appendChild(ele);

				/* CHECKING */

				var offset = ele.getBoundingClientRect(),
				    supported = document.elementFromPoint(offset.left + 1, offset.top + 1) !== ele;

				/* CLEANING */

				document.body.removeChild(ele);
				document.body.removeChild(svg);

				/* EXPORTING */

				Modernizr.addTest('clip-path-url', supported);
		});
})(Modernizr, jQuery);

/* =========================================================================
 * Svelto - Core - Modernizr - Tests (Flexbox)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../init.js
 * ========================================================================= */

(function (Modernizr) {

		'use strict';

		/* FLEXBOX */

		Modernizr.addTest('flexbox', Modernizr.testAllProps('flexBasis', '1px'));
})(Modernizr);

/* =========================================================================
 * Svelto - Core - Modernizr - Tests (Flexbox Legacy)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../init.js
 * ========================================================================= */

(function (Modernizr) {

		'use strict';

		/* FLEXBOX LEGACY */

		Modernizr.addTest('flexbox-legacy', Modernizr.testAllProps('boxDirection', 'reverse'));
})(Modernizr);

/* =========================================================================
 * Svelto - Core - Modernizr - Tests (Flexbox Tweener)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../init.js
 * ========================================================================= */

(function (Modernizr) {

		'use strict';

		/* FLEXBOX TWEENER */

		Modernizr.addTest('flexbox-tweener', Modernizr.testAllProps('flexAlign', 'end'));
})(Modernizr);

/* =========================================================================
 * Svelto - Core - Modernizr - Tests (Overlay Scrollbars)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../init.js
 * ========================================================================= */

(function (Modernizr) {

		'use strict';

		/* OVERLAY SCROLLBARS */

		var overlay = Modernizr.testStyles('#modernizr {width:100px;height:100px;overflow:scroll}', function (ele) {
				return ele.offsetWidth === ele.clientWidth;
		});

		Modernizr.addTest('overlay-scrollbars', overlay);
})(Modernizr);

/* =========================================================================
 * Svelto - Core - Modernizr - Tests (Position Sticky)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../init.js
 * ========================================================================= */

(function (Modernizr) {

		'use strict';

		/* POSITION STICKY */

		Modernizr.addTest('position-sticky', Modernizr.testAllProps('position', 'sticky'));
})(Modernizr);

/* =========================================================================
 * Svelto - Core - Modernizr - Tests (Scrollbar size)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../init.js
 * ========================================================================= */

(function (Modernizr) {

		'use strict';

		/* SCROLLBAR SIZE */

		var size = void 0;

		Modernizr.testStyles('#modernizr {width:100px;height:100px;overflow:scroll}', function (ele) {
				return size = ele.offsetWidth - ele.clientWidth;
		});

		Modernizr.addTest('scrollbar-size-' + size, true);
})(Modernizr);

/* =========================================================================
 * Svelto - Core - Modernizr - Tests
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ./clip_path_polygon.js
 * @require ./clip_path_url.js
 * @require ./flexbox.js
 * @require ./flexbox_legacy.js
 * @require ./flexbox_tweener.js
 * @require ./overlay_scrollbars.js
 * @require ./position_sticky.js
 * @require ./scrollbar_size.js
 * ========================================================================= */

/* =========================================================================
 * Svelto - Core - Modernizr
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ./init.js
 * @require ./tests/tests.js
 * ========================================================================= */

/* =========================================================================
 * Svelto - Core - Svelto
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/jquery/jquery.js
 * @require core/lodash/lodash.js
 * @require core/modernizr/modernizr.js
 * ========================================================================= */

(function () {

		'use strict';

		/* SVELTO */

		var Svelto = {
				VERSION: '0.5.6',
				$: jQuery,
				_: lodash,
				Modernizr: Modernizr,
				Widgets: {}, // Widgets' classes namespace
				Templates: {} // Widgets' templates namespace
		};

		/* EXPORT */

		window.Svelto = Svelto;
})();

/* =========================================================================
 * Svelto - Core - Animations
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/svelto/svelto.js
 * ========================================================================= */

(function ($, _, Svelto) {

		'use strict';

		/* ANIMATIONS */

		var Animations = {
				xslow: 900,
				slow: 500,
				normal: 350,
				fast: 150,
				xfast: 75
		};

		/* EXPORT */

		Svelto.Animations = Animations;
})(Svelto.$, Svelto._, Svelto);

/* =========================================================================
 * Svelto - Core - Breakpoints
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/svelto/svelto.js
 * ========================================================================= */

(function ($, _, Svelto) {

		'use strict';

		/* BREAKPOINTS */

		var Breakpoints = {
				xsmall: 'xs',
				small: 'sm',
				medium: 'md',
				large: 'lg',
				xlarge: 'xl',
				widths: {
						xsmall: 0,
						small: 512,
						medium: 768,
						large: 1024,
						xlarge: 1216
				}
		};

		/* EXPORT */

		Svelto.Breakpoints = Breakpoints;
})(Svelto.$, Svelto._, Svelto);

/* =========================================================================
 * Svelto - Core - Breakpoint
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/breakpoints/breakpoints.js
 * @require core/svelto/svelto.js
 * ========================================================================= */

(function ($, _, Svelto, Breakpoints) {

		'use strict';

		/* VARIABLES */

		var $window = $(window);

		/* BREAKPOINT */

		var Breakpoint = {

				/* VARIABLES */

				throttle: 150, // The amount of milliseconds used to throttle the `$window.on ( 'resize' )` handler
				previous: undefined, // Previous breakpoint
				current: undefined, // Current breakpoint

				/* RESIZE */

				__resize: function __resize() {

						var current = this.get();

						if (current !== this.current) {

								this.previous = this.current;
								this.current = current;

								$window.trigger('breakpoint:change');
						}
				},


				/* API */

				get: function get() {

						var widths = _.sortBy(_.values(Breakpoints.widths)),
						    width = $window.width();

						var _loop = function _loop(i, l) {

								if (width >= widths[i] && (i === l - 1 || width < widths[i + 1])) {

										return {
												v: _.findKey(Breakpoints.widths, function (width) {
														return width === widths[i];
												})
										};
								}
						};

						for (var i = 0, l = widths.length; i < l; i++) {
								var _ret = _loop(i, l);

								if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
						}
				}
		};

		/* READY */

		$(function () {

				Breakpoint.current = Breakpoint.get();

				$window.on('resize', _.throttle(Breakpoint.__resize.bind(Breakpoint), Breakpoint.throttle));
		});

		/* EXPORT */

		Svelto.Breakpoint = Breakpoint;
})(Svelto.$, Svelto._, Svelto, Svelto.Breakpoints);

/* =========================================================================
 * Svelto - Core - Browser
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/svelto/svelto.js
 * ========================================================================= */

(function ($, _, Svelto) {

		'use strict';

		/* VARIABLES */

		var userAgent = navigator.userAgent ? navigator.userAgent.toLowerCase() : '',
		    vendor = navigator.vendor ? navigator.vendor.toLowerCase() : '',
		    // Fixes an IE10 bug, `navigator.vendor` it's `undefined` there
		appVersion = navigator.appVersion ? navigator.appVersion.toLowerCase() : '';

		/* CHECKS */

		var isOpera = /^Opera\//i.test(userAgent) || /\x20OPR\//i.test(userAgent),
		    /* Opera <= 12 || Opera >= 15 */
		isIpod = /ipod/i.test(userAgent),
		    isIphone = !isIpod && /iphone/i.test(userAgent),
		    isIpad = /ipad/i.test(userAgent),
		    isAndroid = /android/i.test(userAgent),
		    isAndroidPhone = isAndroid && /mobile/i.test(userAgent),
		    isAndroidTablet = isAndroid && !isAndroidPhone,
		    isBlackberry = /blackberry/i.test(userAgent) || /BB10/i.test(userAgent),
		    isWindows = /win/i.test(appVersion),
		    isWindowsPhone = isWindows && /phone/i.test(userAgent),
		    isWindowsTablet = isWindows && !isWindowsPhone && /touch/i.test(userAgent),
		    isMobile = isIphone || isIpod || isAndroidPhone || isBlackberry || isWindowsPhone,
		    isTablet = isIpad || isAndroidTablet || isWindowsTablet;

		/* BROWSER */

		var Browser = {
				is: {
						chrome: !isOpera && /chrome|chromium/i.test(userAgent) && /google inc/.test(vendor),
						firefox: /firefox/i.test(userAgent),
						edge: /(edge)\/((\d+)?[\w\.]+)/i.test(userAgent),
						ie: /msie/i.test(userAgent) || 'ActiveXObject' in window, /* IE || EDGE */
						opera: isOpera,
						safari: /safari/i.test(userAgent) && /apple computer/i.test(vendor),
						iphone: isIphone,
						ipad: isIpad,
						ipod: isIpod,
						ios: isIphone || isIpad || isIpod,
						android: isAndroid,
						androidPhone: isAndroidPhone,
						androidTablet: isAndroidTablet,
						blackberry: isBlackberry,
						linux: /linux/i.test(appVersion),
						mac: !(isIphone || isIpad || isIpod) && /mac/i.test(appVersion),
						windows: isWindows,
						windowsPhone: isWindowsPhone,
						windowsTablet: isWindowsTablet,
						mobile: isMobile,
						tablet: isTablet,
						desktop: !isMobile && !isTablet,
						online: function online() {
								return navigator.onLine;
						},
						offline: function offline() {
								return !navigator.onLine;
						},
						touchDevice: 'ontouchstart' in window || 'DocumentTouch' in window && document instanceof window.DocumentTouch
				}
		};

		/* EXPORT */

		Svelto.Browser = Browser;
})(Svelto.$, Svelto._, Svelto);

/* =========================================================================
 * Svelto - Core - Colors
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/svelto/svelto.js
 * ========================================================================= */

(function ($, _, Svelto) {

		'use strict';

		/* COLORS */

		var Colors = {
				primary: 'primary',
				secondary: 'secondary',
				tertiary: 'tertiary',
				quaternary: 'quaternary',

				black: 'black',
				blue: 'blue',
				brown: 'brown',
				gray: 'gray',
				green: 'green',
				olive: 'olive',
				orange: 'orange',
				pink: 'pink',
				purple: 'purple',
				red: 'red',
				teal: 'teal',
				violet: 'violet',
				white: 'white',
				yellow: 'yellow',

				error: 'error',
				success: 'success',
				warning: 'warning',

				base: 'base',
				inherit: 'inherit',
				transparent: 'transparent'
		};

		/* EXPORT */

		Svelto.Colors = Colors;
})(Svelto.$, Svelto._, Svelto);

/* =========================================================================
 * Svelto - Core - Cookie
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * Fork of https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie - Mozilla
 * =========================================================================
 * @require core/svelto/svelto.js
 * ========================================================================= */

/* COOKIE */

(function ($, _, Svelto) {

		'use strict';

		/* COOKIE */

		var Cookie = {

				/* VARIABLES */

				encoder: encodeURIComponent,
				decoder: decodeURIComponent,

				/* API */

				get: function get(key) {

						if (!key) return null;

						return this.decoder(document.cookie.replace(new RegExp('(?:(?:^|.*;)\\s*' + this.encoder(key).replace(/[\-\.\+\*]/g, '\\$&') + '\\s*\\=\\s*([^;]*).*$)|^.*$'), '$1')) || null;
				},
				set: function set(key, value, end, path, domain, secure) {

						if (!key || /^(?:expires|max\-age|path|domain|secure)$/i.test(key)) return false;

						var expires = '';

						if (end) {

								switch (end.constructor) {

										case Number:
												expires = end === Infinity ? '; expires=Fri, 31 Dec 9999 23:59:59 GMT' : '; max-age=' + end;
												break;

										case String:
												expires = '; expires=' + end;
												break;

										case Date:
												expires = '; expires=' + end.toUTCString();
												break;

								}
						}

						document.cookie = this.encoder(key) + '=' + this.encoder(value) + expires + (domain ? '; domain=' + domain : '') + (path ? '; path=' + path : '') + (secure ? '; secure' : '');

						return true;
				},
				remove: function remove(key, path, domain) {

						if (!this.has(key)) return false;

						document.cookie = this.encoder(key) + '=; expires=Thu, 01 Jan 1970 00:00:00 GMT' + (domain ? '; domain=' + domain : '') + (path ? '; path=' + path : '');

						return true;
				},
				has: function has(key) {

						if (!key) return false;

						return new RegExp('(?:^|;\\s*)' + this.encoder(key).replace(/[\-\.\+\*]/g, '\\$&') + '\\s*\\=').test(document.cookie);
				},
				keys: function keys() {

						var keys = document.cookie.replace(/((?:^|\s*;)[^\=]+)(?=;|$)|^\s*|\s*(?:\=[^;]*)?(?:\1|$)/g, '').split(/\s*(?:\=[^;]*)?;\s*/);

						return _.map(keys, this.decoder);
				}
		};

		/* EXPORT */

		Svelto.Cookie = Cookie;
})(Svelto.$, Svelto._, Svelto);

/* =========================================================================
 * Svelto - Core - Keyboard
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/browser/browser.js
 * @require core/svelto/svelto.js
 * ========================================================================= */

(function ($, _, Svelto, Browser) {

		'use strict';

		/* KEYBOARD */

		var Keyboard = {
				keys: {
						BACKSPACE: 8,
						COMMA: 188,
						DEL: 46,
						DELETE: 46,
						DOWN: 40,
						END: 35,
						ENTER: 13,
						ESC: 27,
						ESCAPE: 27,
						HOME: 36,
						LEFT: 37,
						PAGE_DOWN: 34,
						PAGE_UP: 33,
						PERIOD: 190,
						RIGHT: 39,
						SPACE: 32,
						SPACEBAR: 32,
						TAB: 9,
						UP: 38
				},
				keystroke: {
						match: function match(event, keystroke) {

								// `ctmd` is treated as `cmd` on Mac, and as `ctrl` elsewhere

								var specialKeys = ['ctrl', 'cmd', 'ctmd', 'alt', 'shift'],
								    keys = keystroke.split('+').map(function (key) {
										return key.trim().toLowerCase();
								});

								if (_.includes(keys, 'ctmd')) {

										if (!Keyboard.keystroke.hasCtrlOrCmd(event)) return false;
								} else {

										if (_.includes(keys, 'ctrl') !== event.ctrlKey) return false;
										if (_.includes(keys, 'cmd') !== event.metaKey) return false;
								}

								if (_.includes(keys, 'alt') !== event.altKey) return false;
								if (_.includes(keys, 'shift') !== event.shiftKey) return false;

								var _iteratorNormalCompletion2 = true;
								var _didIteratorError2 = false;
								var _iteratorError2 = undefined;

								try {
										for (var _iterator2 = keys[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
												var key = _step2.value;


												if (!_.includes(specialKeys, key)) {

														if (!(event.keyCode === Keyboard.keys[key.toUpperCase()] || String.fromCharCode(event.keyCode).toLowerCase() === key)) return false;
												}
										}
								} catch (err) {
										_didIteratorError2 = true;
										_iteratorError2 = err;
								} finally {
										try {
												if (!_iteratorNormalCompletion2 && _iterator2.return) {
														_iterator2.return();
												}
										} finally {
												if (_didIteratorError2) {
														throw _iteratorError2;
												}
										}
								}

								return true;
						},
						hasCtrlOrCmd: function hasCtrlOrCmd(event) {

								return !Browser.is.mac && event.ctrlKey || Browser.is.mac && event.metaKey;
						}
				}

		};

		/* EXPORT */

		Svelto.Keyboard = Keyboard;
})(Svelto.$, Svelto._, Svelto, Svelto.Browser);

/* =========================================================================
 * Svelto - Core - Mouse
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/svelto/svelto.js
 * ========================================================================= */

(function ($, _, Svelto) {

		'use strict';

		/* MOUSE */

		var Mouse = {
				buttons: {
						LEFT: 0,
						MIDDLE: 1,
						RIGHT: 2
				},
				hasButton: function hasButton(event, button) {
						var orNone = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];


						if ('originalEvent' in event) {

								return Mouse.hasButton(event.originalEvent, button, orNone);
						}

						return orNone && !('button' in event) || event.button === button;
				}
		};

		/* EXPORT */

		Svelto.Mouse = Mouse;
})(Svelto.$, Svelto._, Svelto);

/* =========================================================================
 * Svelto - Core - Pointer
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/browser/browser.js
 * @require core/mouse/mouse.js
 * @require core/svelto/svelto.js
 * ========================================================================= */

// Basically it exists other than to provide the convinient `Pointer` global also for removing the 300ms delay on click by providing the `tap` event

(function ($, _, Svelto, Browser, Mouse) {

		'use strict';

		/* POINTER */

		var Pointer = {
				options: {
						events: {
								prefix: 'spointer'
						},
						dbltap: {
								interval: 300 // 2 taps within this interval will trigger a dbltap event
						}
				}
		};

		/* EVENTS */

		var events = {
				tap: Pointer.options.events.prefix + 'tap',
				dbltap: Pointer.options.events.prefix + 'dbltap',
				click: 'click',
				dblclick: 'dblclick',
				down: Browser.is.touchDevice ? 'touchstart' : 'mousedown',
				move: Browser.is.touchDevice ? 'touchmove' : 'mousemove',
				up: Browser.is.touchDevice ? 'touchend' : 'mouseup',
				cancel: Browser.is.touchDevice ? 'touchcancel' : 'mouseleave',
				over: 'mouseover',
				enter: 'mouseenter',
				out: 'mouseout',
				leave: 'mouseleave'
		};

		/* EVENTS METHODS */

		var _loop2 = function _loop2(name) {

				if (events.hasOwnProperty(name)) {

						Pointer[name] = events[name];

						if (!(name in $.fn)) {

								$.fn[name] = function (fn) {

										return fn ? this.on(Pointer[name], fn) : this.trigger(Pointer[name]);
								};
						}
				}
		};

		for (var name in events) {
				_loop2(name);
		}

		/* ----- POINTER LOGIC ----- */

		/* VARIABLES */

		var target = void 0,
		    $target = void 0,
		    prevTapTimestamp = 0,
		    motion = void 0;

		/* EVENT CREATOR */

		function createEvent(name, originalEvent) {

				var event = $.Event(name);

				event.originalEvent = originalEvent;

				return event;
		}

		/* HANDLERS */

		function downHandler(event) {

				target = event.target;
				$target = $(target);

				motion = false;

				$target.one(Pointer.move, moveHandler);
				$target.one(Pointer.up, upHandler);
				$target.one(Pointer.cancel, cancelHandler);
		}

		function moveHandler() {

				motion = true;
		}

		function upHandler(event) {

				if (Mouse.hasButton(event, Mouse.buttons.LEFT, true) && (!Browser.is.touchDevice || !motion)) {

						var tapTimestamp = event.timeStamp || Date.now();

						$target.trigger(createEvent(Pointer.tap, event));

						if (tapTimestamp - prevTapTimestamp <= Pointer.options.dbltap.interval) {

								$target.trigger(createEvent(Pointer.dbltap, event));
						}

						prevTapTimestamp = tapTimestamp;
				}

				if (!motion) {

						$target.off(Pointer.move, moveHandler);
				}

				$target.off(Pointer.cancel, cancelHandler);
		}

		function cancelHandler() {

				if (!motion) {

						$target.off(Pointer.move, moveHandler);
				}

				$target.off(Pointer.up, upHandler);
		}

		/* BIND */

		$(document).on(Pointer.down, downHandler);

		/* EXPORT */

		Svelto.Pointer = Pointer;
})(Svelto.$, Svelto._, Svelto, Svelto.Browser, Svelto.Mouse);

/* =========================================================================
 * Svelto - Core - Push state
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/svelto/svelto.js
 * ========================================================================= */

// Monkey patching `history.pushState` so that it will trigger an event that we can then use to properly trigger a `route` event

(function ($, _, Svelto, history) {

		'use strict';

		/* PUSH STATE */

		$(function () {

				var $window = $(window),
				    pushState = history.pushState;

				history.pushState = function (state) {

						if (_.isFunction(history.onpushstate)) {

								history.onpushstate({ state: state });
						}

						$window.trigger('pushstate');

						return pushState.apply(history, arguments);
				};
		});
})(Svelto.$, Svelto._, Svelto, window.history);

/* =========================================================================
 * Svelto - Core - Route
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/push_state/push_state.js
 * @require core/svelto/svelto.js
 * ========================================================================= */

/* ROUTE */

(function ($, _, Svelto) {

		'use strict';

		$(function () {

				var $window = $(window),
				    previous = window.location.href.split('#')[0];

				$window.on('popstate pushstate', function () {

						_.defer(function () {
								// We need the `window.location.href` to get updated before

								var current = window.location.href.split('#')[0];

								if (current !== previous) {

										previous = current;

										$window.trigger('route');
								}
						});
				});
		});
})(Svelto.$, Svelto._, Svelto);

/* =========================================================================
 * Svelto - Core - Sizes
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/svelto/svelto.js
 * ========================================================================= */

(function ($, _, Svelto) {

		'use strict';

		/* SIZES */

		var Sizes = {
				xxxxsmall: 'xxxxsmall',
				xxxsmall: 'xxxsmall',
				xxsmall: 'xxsmall',
				xsmall: 'xsmall',
				small: 'small',
				medium: 'medium',
				large: 'large',
				xlarge: 'xlarge',
				xxlarge: 'xxlarge',
				xxxlarge: 'xxxlarge',
				xxxxlarge: 'xxxxlarge'
		};

		/* EXPORT */

		Svelto.Sizes = Sizes;
})(Svelto.$, Svelto._, Svelto);

/* =========================================================================
 * Svelto - Core - Widgetize
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/svelto/svelto.js
 * ========================================================================= */

(function ($, _, Svelto) {

		'use strict';

		/* WIDGETIZE */

		var Widgetize = function () {
				function Widgetize() {
						_classCallCheck(this, Widgetize);

						this.widgetizers = {};
				}

				_createClass(Widgetize, [{
						key: 'add',
						value: function add(selector, widgetizer, data) {

								if (!(selector in this.widgetizers)) {

										this.widgetizers[selector] = [];
								}

								this.widgetizers[selector].push([widgetizer, data]);
						}
				}, {
						key: 'get',
						value: function get() {

								return this.widgetizers;
						}
				}, {
						key: 'remove',
						value: function remove(selector, widgetizer) {

								if (selector in this.widgetizers) {

										for (var i = 0, l = this.widgetizers[selector].length; i < l; i++) {

												if (this.widgetizers[selector][i][0] === widgetizer) {

														this.widgetizers[selector].splice(i, 1);
												}
										}

										if (!this.widgetizers[selector].length) {

												delete this.widgetizers[selector];
										}
								}
						}
				}, {
						key: 'on',
						value: function on($roots) {

								for (var selector in this.widgetizers) {

										if (this.widgetizers.hasOwnProperty(selector)) {

												var widgetizers = this.widgetizers[selector];

												this.worker(widgetizers, $roots.filter(selector));
												this.worker(widgetizers, $roots.find(selector));
										}
								}
						}
				}, {
						key: 'worker',
						value: function worker(widgetizers, $widgets) {
								var _iteratorNormalCompletion3 = true;
								var _didIteratorError3 = false;
								var _iteratorError3 = undefined;

								try {

										for (var _iterator3 = $widgets[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
												var widget = _step3.value;
												var _iteratorNormalCompletion4 = true;
												var _didIteratorError4 = false;
												var _iteratorError4 = undefined;

												try {

														for (var _iterator4 = widgetizers[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
																var _step4$value = _slicedToArray(_step4.value, 2);

																var widgetizer = _step4$value[0];
																var data = _step4$value[1];


																widgetizer($(widget), data);
														}
												} catch (err) {
														_didIteratorError4 = true;
														_iteratorError4 = err;
												} finally {
														try {
																if (!_iteratorNormalCompletion4 && _iterator4.return) {
																		_iterator4.return();
																}
														} finally {
																if (_didIteratorError4) {
																		throw _iteratorError4;
																}
														}
												}
										}
								} catch (err) {
										_didIteratorError3 = true;
										_iteratorError3 = err;
								} finally {
										try {
												if (!_iteratorNormalCompletion3 && _iterator3.return) {
														_iterator3.return();
												}
										} finally {
												if (_didIteratorError3) {
														throw _iteratorError3;
												}
										}
								}
						}
				}]);

				return Widgetize;
		}();

		/* EXPORT */

		Svelto.Widgetize = new Widgetize();

		/* JQUERY PLUGIN */

		$.fn.widgetize = function () {

				Svelto.Widgetize.on(this);

				return this;
		};

		/* READY */

		$(function () {

				$(document.body).widgetize();
		});
})(Svelto.$, Svelto._, Svelto);

/* =========================================================================
 * Svelto - Core - Factory
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/svelto/svelto.js
 * @require core/widgetize/widgetize.js
 *=========================================================================*/

(function ($, _, Svelto, Widgetize) {

		'use strict';

		/* FACTORY */

		var Factory = {

				/* VARIABLES */

				initializers: ['configure', 'namespace', 'ready', 'widgetize', 'plugin'], // `Factory` methods, in order, to call when initing a `Widget`

				/* METHODS */

				init: function init(Widget, config, namespace) {
						var _iteratorNormalCompletion5 = true;
						var _didIteratorError5 = false;
						var _iteratorError5 = undefined;

						try {

								for (var _iterator5 = this.initializers[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
										var initializer = _step5.value;


										this[initializer](Widget, config, namespace);
								}
						} catch (err) {
								_didIteratorError5 = true;
								_iteratorError5 = err;
						} finally {
								try {
										if (!_iteratorNormalCompletion5 && _iterator5.return) {
												_iterator5.return();
										}
								} finally {
										if (_didIteratorError5) {
												throw _iteratorError5;
										}
								}
						}
				},
				instance: function instance(Widget, options, element) {

						var name = Widget.config.name;

						return $.data(element, 'instance.' + name) || new Widget(options, element);
				},


				/* WORKERS */

				configure: function configure(Widget) {
						var config = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];


						Widget.config = config;
				},
				namespace: function namespace(Widget, config, _namespace) {

						if (_.isObject(_namespace)) {

								var name = _.upperFirst(Widget.config.name);

								_namespace[name] = Widget;
						}
				},
				ready: function ready(Widget) {

						$(Widget.ready);
				},
				widgetize: function widgetize(Widget) {

						if (Widget.config.plugin && _.isString(Widget.config.selector)) {

								Widgetize.add(Widget.config.selector, Widget.widgetize, Widget.config);
						}
				},
				plugin: function plugin(Widget) {

						if (!Widget.config.plugin) return;

						/* NAME */

						var name = Widget.config.name;

						/* JQUERY PLUGIN */

						$.fn[name] = function (options) {

								var isMethodCall = _.isString(options) && options.charAt(0) !== '_'; // Methods starting with '_' are private

								for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
										args[_key - 1] = arguments[_key];
								}

								var _iteratorNormalCompletion6 = true;
								var _didIteratorError6 = false;
								var _iteratorError6 = undefined;

								try {
										for (var _iterator6 = this[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
												var element = _step6.value;


												var instance = Factory.instance(Widget, options, element);

												if (isMethodCall && _.isFunction(instance[options])) {

														var returnValue = instance[options].apply(instance, args);

														if (!_.isUndefined(returnValue)) {

																return returnValue;
														}
												}
										}
								} catch (err) {
										_didIteratorError6 = true;
										_iteratorError6 = err;
								} finally {
										try {
												if (!_iteratorNormalCompletion6 && _iterator6.return) {
														_iterator6.return();
												}
										} finally {
												if (_didIteratorError6) {
														throw _iteratorError6;
												}
										}
								}

								return this;
						};
				}
		};

		/* EXPORT */

		Svelto.Factory = Factory;
})(Svelto.$, Svelto._, Svelto, Svelto.Widgetize);

/* =========================================================================
 * Svelto - Core - Widget
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/breakpoint/breakpoint.js
 * @require core/breakpoints/breakpoints.js
 * @require core/factory/factory.js
 * @require core/keyboard/keyboard.js
 * @require core/pointer/pointer.js
 * @require core/route/route.js
 * @require core/svelto/svelto.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Templates, Factory, Pointer, Keyboard, Breakpoints, Breakpoint) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'widget', // The name of widget, it will be used for the the jQuery pluing `$.fn[name]` and for triggering widget events `name + ':' + event`
				plugin: false, // A boolean that defines wheter the Widget is also a jQuery plugin or not
				selector: false, // The selector used to select the website in the DOM, used for `Svelto.Widgetize`
				templates: { // Object containing lodash template strings
						base: false // It will be used as the constructor if no element is provided
				},
				options: {
						characters: {}, // Used to store some characters needed by the widget
						regexes: {}, // Contains the used regexes
						errors: {}, // It contains all the errors that a widget can trigger
						messages: {}, // Messages that the widget somewhere outputs, maybe with a `$.toast`, maybe just logs it
						attributes: {}, // Attributes used by the widget
						datas: {}, // CSS data-* names
						classes: { // CSS classes to attach inside the widget
								disabled: 'disabled', // Attached to disabled widgets
								hidden: 'hidden' // Used to hide an element
						},
						selectors: { // Selectors to use inside the widget
								layout: '.layout, body' // `body` is used as a fallback
						},
						animations: {}, // Object storing all the milliseconds required for each animation to occur
						breakpoints: { // Actions to be executed at specifc breakpoints, every key/val pair should be in the form of `breakpoint-name`: `action`, where `breakpoint-name` is a key of `Breakpoints` and `action` in a defined method (e.g. `xsmall`: `close`). In addition to this every pair must be specified under one of the following keys: `up`, `down`, `only`, mimicking the respective SCSS mixins
								up: {},
								down: {},
								only: {}
						},
						keyboard: true, // Enable or disable the use of the keyboard, basically disables keystrokes and other keyboard-based interaction
						keystrokes: {}, // Easy way to automatically bind keystrokes to specific methods calls. For example: `{ 'ctrl + o': 'open', Keyaboard.keys.UP: 'up' }`. You can also pass variables to the method. For example: `{ 'ctrl + o': ['open', true], Keyaboard.keys.UP: ['open', array ( 1, 2 )] }`
						callbacks: {} // Callbacks to trigger on specific events
				}
		};

		/* WIDGET */

		var Widget = function () {

				/* CONSTRUCTION */

				function Widget(options, element) {
						_classCallCheck(this, Widget);

						/* ATTACH CONFIG */

						_.extend(this, this._getConfig(options, element));

						/* CACHE TEMPLATES */

						this.templatesNamespace = _.upperFirst(this.name);

						if (!(this.templatesNamespace in Templates)) {

								Templates[this.templatesNamespace] = {};

								var _options = { //TODO: Maybe export them
										imports: {
												Templates: Templates,
												self: Templates[this.templatesNamespace]
										},
										variable: 'o'
								};

								for (var template in this.templates) {

										if (this.templates.hasOwnProperty(template) && this.templates[template]) {

												Templates[this.templatesNamespace][template] = _.template(this.templates[template], _options);
										}
								}
						}

						/* ELEMENT */

						this.$element = $(element || (this.templates.base ? this._template('base', this.options) : undefined));
						this.element = this.$element[0];

						/* LAYOUT */

						this.$layout = this.$element.length ? this.$element.parent().closest(this.options.selectors.layout) : $(this.options.selectors.layout).first();
						this.$layout = this.$layout.length ? this.$layout : $(this.options.selectors.layout).first();
						this.layout = this.$layout[0];

						/* WINDOW */

						this.$window = $(window);
						this.window = this.$window[0];

						/* DOCUMENT */

						this.$document = $(document);
						this.document = this.$document[0];

						/* HTML */

						this.$html = $(document.documentElement);
						this.html = this.$html[0];

						/* BODY */

						this.$body = $(document.body);
						this.body = this.$body[0];

						/* BINDINGS */

						this.$bindings = $();

						/* ATTACH INSTANCE */

						if (this.element) {

								$.data(this.element, 'instance.' + this.name, this);
						}

						/* SET GUID / GUC */

						this.guid = $.guid++;
						this.guc = this.name + '-' + this.guid;

						/* EVENT NAMESPACE */

						this.eventNamespace = '.swns-' + this.guid;

						/* CALLBACKS */

						if (this._variables() === false) return this.destroy();
						if (this._init() === false) return this.destroy();
						if (this._events() === false) return this.destroy();

						/* BREAKPOINT */

						this.___breakpoint(); // It must be inited before calling `__breakpoint`, since that when `__breakpoint` gets called it may want to reset it (not inited yet) and init it again (with a result of double binding)
						this.__breakpoint();

						/* REMOVE */

						this.___remove();
				}

				_createClass(Widget, [{
						key: '_getConfig',
						value: function _getConfig(options, element) {

								/* VARIABLES */

								var configs = [];

								/* PROTOTYPE CHAIN */

								var prototype = Object.getPrototypeOf(this);

								while (prototype) {

										if (prototype.constructor.config) {

												configs.push(prototype.constructor.config);
										}

										prototype = Object.getPrototypeOf(prototype);
								}

								configs.push({}); // So that we merge them to a new object

								configs.reverse();

								/* DATA OPTIONS */

								if (element) {

										var $element = $(element),
										    name = _.last(configs).name.toLowerCase(),
										    dataOptions = $element.data('options'),
										    dataNameOptions = $element.data(name + '-options');

										if (dataOptions) {

												configs.push({ options: dataOptions });
										}

										if (dataNameOptions) {

												configs.push({ options: dataNameOptions });
										}
								}

								/* OPTIONS */

								if (_.isPlainObject(options)) {

										configs.push({ options: options });
								}

								/* CREATE OPTIONS */

								var createOptions = this._createOptions();

								if (_.isPlainObject(createOptions)) {

										configs.push({ options: createOptions });
								}

								/* RETURN */

								return _.merge.apply(_, configs);
						}
				}, {
						key: '_createOptions',
						value: function _createOptions() {} // Used to pass extra options

						/* DESTROY */

				}, {
						key: 'destroy',
						value: function destroy() {

								this._reset();

								this._destroy();

								if (this.element) {

										this.$element.removeData('instance.' + this.name);
								}
						}
				}, {
						key: '_destroy',
						value: function _destroy() {} // Clean the stuff, remove possible memory leaks

						/* SPECIAL */

				}, {
						key: '_variables',
						// Called when the DOM is `ready`, perhaps the widget needs to perform some operations, like `Toast` do for instance

						value: function _variables() {} // Init your variables inside this function

				}, {
						key: '_init',
						value: function _init() {} // Perform the init stuff inside this function

				}, {
						key: '_events',
						value: function _events() {} // Bind the event handlers inside this function

				}, {
						key: '_reset',
						value: function _reset() {
								//TODO: Maybe remove or rename it, I don't like it but I currently need its functionality

								this.$bindings.off(this.eventNamespace);
						}

						/* WIDGET */

				}, {
						key: 'widget',
						value: function widget() {

								return this.$element;
						}

						/* INSTANCE */

				}, {
						key: 'instance',
						value: function instance() {

								return this;
						}

						/* OPTIONS */

						// We cannot have a `options` alias to `option`, since `options` is already defined in the config

				}, {
						key: 'option',
						value: function option(key, value) {

								if (!key) {

										return _.cloneDeep(this.options);
								} else if (_.isString(key)) {

										if (_.isUndefined(value)) {

												return _.cloneDeep(_.get(this.options, key));
										} else {

												this._setOption(key, value);
										}
								} else if (_.isPlainObject(key)) {

										for (var prop in key) {

												if (key.hasOwnProperty(prop)) {

														this._setOption(key, value);
												}
										}
								}
						}
				}, {
						key: '_setOption',
						value: function _setOption(key, value) {

								_.set(this.options, key, value);
						}

						/* ENABLED */

				}, {
						key: 'enable',
						value: function enable() {

								this.$element.removeClass(this.options.classes.disabled);
						}
				}, {
						key: 'isEnabled',
						value: function isEnabled() {

								return !this.isDisabled();
						}

						/* DISABLED */

				}, {
						key: 'disable',
						value: function disable() {

								this.$element.addClass(this.options.classes.disabled);
						}
				}, {
						key: 'isDisabled',
						value: function isDisabled() {

								return this.$element.hasClass(this.options.classes.disabled);
						}

						/* EVENTS */

						//TODO: Add support for custom data

				}, {
						key: '_on',
						value: function _on(suppressDisabledCheck, $element, events, selector, handler, _onlyOne) {
								var _this = this;

								/* NORMALIZATION */

								if (!_.isBoolean(suppressDisabledCheck)) {

										_onlyOne = handler;
										handler = selector;
										selector = events;
										events = $element;
										$element = suppressDisabledCheck;
										suppressDisabledCheck = false;
								}

								if (!($element instanceof $)) {

										_onlyOne = handler;
										handler = selector;
										selector = events;
										events = $element;
										$element = this.$element;
								}

								if (!_.isString(selector)) {

										_onlyOne = handler;
										handler = selector;
										selector = false;
								}

								/* BINDINGS */

								this.$bindings = this.$bindings.add($element);

								/* PROXY */

								var handlerProxy = function handlerProxy() {
										for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
												args[_key2] = arguments[_key2];
										}

										if (!suppressDisabledCheck && _this.$element.hasClass(_this.options.classes.disabled)) return;

										return handler.apply(_this, args);
								};

								/* PROXY GUID */

								handlerProxy.guid = handler.guid = handler.guid || $.guid++;

								/* EVENTS NAMESPACING */

								events = events.split(/\s+/).map(function (event) {
										return event + _this.eventNamespace;
								}).join(' ');

								/* TRIGGERING */

								$element[_onlyOne ? 'one' : 'on'](events, selector, handlerProxy);
						}
				}, {
						key: '_one',
						value: function _one() {
								for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
										args[_key3] = arguments[_key3];
								}

								return this._on.apply(this, args.concat([true]));
						}
				}, {
						key: '_onHover',
						value: function _onHover($element, args) {
								var _this2 = this;

								/* NORMALIZATION */

								if (!args) {

										args = $element;
										$element = this.$element;
								}

								/* BINDINGS */

								this.$bindings = this.$bindings.add($element);

								/* BINDING */

								this._on($element, Pointer.enter, function () {
										return _this2._on.apply(_this2, _toConsumableArray(args));
								});
								this._on($element, Pointer.leave, function () {
										return _this2._off.apply(_this2, _toConsumableArray(args));
								});
						}

						//TODO: Maybe add a _offHover, is it needed?

				}, {
						key: '_off',
						value: function _off($element, events, handler) {
								var _this3 = this;

								/* NORMALIZATION */

								if (!handler && !($element instanceof $)) {

										handler = events;
										events = $element;
										$element = this.$element;
								}

								/* EVENTS NAMESPACING */

								events = events.split(/\s+/).map(function (event) {
										return event + _this3.eventNamespace;
								}).join(' ');

								/* REMOVING HANDLER */

								$element.off(events, handler);
						}
				}, {
						key: '_trigger',
						value: function _trigger(type, event, data) {

								/* NORMALIZATION */

								if (!data) {

										if (event instanceof $.Event) {

												data = {};
										} else {

												data = event || {};
												event = undefined;
										}
								}

								/* EVENT */

								event = $.Event(event);
								event.type = (this.name + ':' + type).toLowerCase();
								event.target = this.element;

								var originalEvent = event.originalEvent;

								if (originalEvent) {

										for (var prop in originalEvent) {

												if (originalEvent.hasOwnProperty(prop)) {

														if (!(prop in event)) {

																event[prop] = originalEvent[prop];
														}
												}
										}
								}

								/* TRIGGERING */

								this.$element.trigger(event, data);

								return !(this.options.callbacks[type].apply(this.element, [event].concat(data)) === false || event.isDefaultPrevented());
						}

						/* ROUTE */

				}, {
						key: '___route',
						value: function ___route() {

								this._on(true, this.$window, 'route', this.__route);
						}

						/* BREAKPOINT */

				}, {
						key: '___breakpoint',
						value: function ___breakpoint() {

								this._on(true, this.$window, 'breakpoint:change', this.__breakpoint);
						}
				}, {
						key: '__breakpoint',
						value: function __breakpoint() {

								var width = Breakpoints.widths[Breakpoint.current];

								/* UP */

								for (var breakpoint in this.options.breakpoints.up) {

										if (this.options.breakpoints.up.hasOwnProperty(breakpoint)) {

												if (width >= Breakpoints.widths[breakpoint]) {

														this[this.options.breakpoints.up[breakpoint]]();
												}
										}
								}

								/* DOWN */

								for (var _breakpoint in this.options.breakpoints.down) {

										if (this.options.breakpoints.down.hasOwnProperty(_breakpoint)) {

												if (width <= Breakpoints.widths[_breakpoint]) {

														this[this.options.breakpoints.down[_breakpoint]]();
												}
										}
								}

								/* ONLY */

								for (var _breakpoint2 in this.options.breakpoints.only) {

										if (this.options.breakpoints.only.hasOwnProperty(_breakpoint2)) {

												if (width === Breakpoints.widths[_breakpoint2]) {

														this[this.options.breakpoints.only[_breakpoint2]]();
												}
										}
								}
						}

						/* KEYDOWN */

				}, {
						key: '___keydown',
						value: function ___keydown() {

								this._on(this.$document, 'keydown', this.__keydown);
						}
				}, {
						key: '__keydown',
						value: function __keydown(event) {

								if (!this.options.keyboard) return;

								for (var keystrokes in this.options.keystrokes) {

										if (this.options.keystrokes.hasOwnProperty(keystrokes)) {
												var _iteratorNormalCompletion7 = true;
												var _didIteratorError7 = false;
												var _iteratorError7 = undefined;

												try {

														for (var _iterator7 = keystrokes.split(',')[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
																var keystroke = _step7.value;


																if (Keyboard.keystroke.match(event, keystroke)) {

																		var toCall = this.options.keystrokes[keystrokes],
																		    method = _.isArray(toCall) ? toCall[0] : toCall,
																		    _args = _.isArray(toCall) ? _.castArray(toCall[1]) : [];

																		this[method].apply(this, _args);

																		event.preventDefault();
																		event.stopImmediatePropagation();

																		return;
																}
														}
												} catch (err) {
														_didIteratorError7 = true;
														_iteratorError7 = err;
												} finally {
														try {
																if (!_iteratorNormalCompletion7 && _iterator7.return) {
																		_iterator7.return();
																}
														} finally {
																if (_didIteratorError7) {
																		throw _iteratorError7;
																}
														}
												}
										}
								}
						}

						/* REMOVE */

				}, {
						key: '___remove',
						value: function ___remove() {

								if (this.element) {

										this._on(true, 'remove', this.__remove);
								}
						}
				}, {
						key: '__remove',
						value: function __remove(event) {

								if (!event || event.target === this.element) {

										this.destroy();
								}
						}

						/* DELAYING */

				}, {
						key: '_delay',
						value: function _delay(fn, delay) {
								var _this4 = this;

								return setTimeout(function () {
										return fn.apply(_this4);
								}, delay || 0);
						}

						/* DEFER */

				}, {
						key: '_defer',
						value: function _defer(fn) {

								return this._delay(fn);
						}

						/* FRAME */

				}, {
						key: '_frame',
						value: function _frame(fn) {

								return requestAnimationFrame(fn.bind(this));
						}

						/* THROW */

				}, {
						key: '_throw',
						value: function _throw(msg) {

								throw new Error(msg);
						}

						/* THROTTLING */

				}, {
						key: '_throttle',
						value: function _throttle(fn, wait, options) {

								var throttled = _.throttle(fn, wait, options);

								throttled.guid = fn.guid = fn.guid || $.guid++;

								return throttled;
						}

						/* DEBOUNCING */

				}, {
						key: '_debounce',
						value: function _debounce(fn, wait, options) {

								var debounced = _.debounce(fn, wait, options);

								debounced.guid = fn.guid = fn.guid || $.guid++;

								return debounced;
						}

						/* TEMPLATE */

				}, {
						key: '_template',
						value: function _template(name) {
								var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];


								return Templates[this.templatesNamespace][name](options);
						}

						/* INSERTION */

				}, {
						key: 'before',
						value: function before() {
								var _$element;

								(_$element = this.$element).before.apply(_$element, arguments);
						}
				}, {
						key: 'insertBefore',
						value: function insertBefore(target) {

								this.$element.insertBefore(target);
						}
				}, {
						key: 'after',
						value: function after() {
								var _$element2;

								(_$element2 = this.$element).after.apply(_$element2, arguments);
						}
				}, {
						key: 'insertAfter',
						value: function insertAfter(target) {

								this.$element.insertAfter(target);
						}
				}, {
						key: 'prependTo',
						value: function prependTo(target) {

								this.$element.prependTo(target);
						}
				}, {
						key: 'appendTo',
						value: function appendTo(target) {

								this.$element.appendTo(target);
						}
				}], [{
						key: 'widgetize',
						value: function widgetize($ele, config) {
								// Called for widgetizing an element

								$ele[config.name]();
						}
				}, {
						key: 'ready',
						value: function ready() {}
				}]);

				return Widget;
		}();

		/* FACTORY */

		Factory.init(Widget, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Templates, Svelto.Factory, Svelto.Pointer, Svelto.Keyboard, Svelto.Breakpoints, Svelto.Breakpoint);

/* =========================================================================
 * Svelto - Widgets - Checkbox
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/widget/widget.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory, Pointer) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'checkbox',
				plugin: true,
				selector: '.checkbox',
				options: {
						selectors: {
								input: 'input[type="checkbox"]'
						}
				}
		};

		/* CHECKBOX */

		var Checkbox = function (_Widgets$Widget) {
				_inherits(Checkbox, _Widgets$Widget);

				function Checkbox() {
						_classCallCheck(this, Checkbox);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Checkbox).apply(this, arguments));
				}

				_createClass(Checkbox, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this.$checkbox = this.$element;

								this.$input = this.$checkbox.find(this.options.selectors.input);
								this.input = this.$input[0];

								this.inputId = this.$input.attr('id');
						}
				}, {
						key: '_events',
						value: function _events() {

								this.___tap();
						}

						/* TAP */

				}, {
						key: '___tap',
						value: function ___tap() {

								this._on(true, Pointer.tap, this.__tap);
						}
				}, {
						key: '__tap',
						value: function __tap(event) {

								if (event.target === this.input || $(event.target).is('label[for="' + this.inputId + '"]')) return;

								this.$input.prop('checked', !this.$input.prop('checked')).trigger('change');
						}
				}]);

				return Checkbox;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(Checkbox, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Pointer);

/* =========================================================================
 * Svelto - Widgets - Radio
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require widgets/checkbox/checkbox.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'radio',
				plugin: true,
				selector: '.radio',
				options: {
						selectors: {
								input: 'input[type="radio"]'
						}
				}
		};

		/* RADIO */

		var Radio = function (_Widgets$Checkbox) {
				_inherits(Radio, _Widgets$Checkbox);

				function Radio() {
						_classCallCheck(this, Radio);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Radio).apply(this, arguments));
				}

				_createClass(Radio, [{
						key: '__tap',


						/* TAP */

						value: function __tap(event) {

								if (event.target === this.input || $(event.target).is('label[for="' + this.inputId + '"]')) return;

								if (this.$input.prop('checked')) return;

								this.$input.prop('checked', true).trigger('change');
						}
				}]);

				return Radio;
		}(Widgets.Checkbox);

		/* FACTORY */

		Factory.init(Radio, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - ClassSwitch
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/widget/widget.js
 * ========================================================================= */

//TODO: Maybe rename it

(function ($, _, Svelto, Widgets, Factory, Breakpoints, Breakpoint) {

		'use strict';

		/* VARIABLES */

		var names = _.filter(_.values(Breakpoints), _.isString),
		    datas = [];

		var _iteratorNormalCompletion8 = true;
		var _didIteratorError8 = false;
		var _iteratorError8 = undefined;

		try {
				for (var _iterator8 = names[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
						var name = _step8.value;


						datas.push(name + '-up');
						datas.push(name + '-down');
						datas.push(name + '-only');
						datas.push(name);
				}
		} catch (err) {
				_didIteratorError8 = true;
				_iteratorError8 = err;
		} finally {
				try {
						if (!_iteratorNormalCompletion8 && _iterator8.return) {
								_iterator8.return();
						}
				} finally {
						if (_didIteratorError8) {
								throw _iteratorError8;
						}
				}
		}

		var selector = datas.map(function (name) {
				return '[data-' + name + ']';
		}).join(',');

		/* CONFIG */

		var config = {
				name: 'classSwitch',
				plugin: true,
				selector: selector,
				options: {
						switch: { // Classes to attach at specifc breakpoints, every key/val pair should be in the form of `breakpoint-name`: `class`, where `breakpoint-name` is a key of `Breakpoints` and `class` can be any class string. In addition to this every pair must be specified under one of the following keys: `up`, `down`, `only`, mimicking the respective SCSS mixins
								up: {},
								down: {},
								only: {}
						}
				}
		};

		/* CLASS SWITCH */

		var ClassSwitch = function (_Widgets$Widget2) {
				_inherits(ClassSwitch, _Widgets$Widget2);

				function ClassSwitch() {
						_classCallCheck(this, ClassSwitch);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(ClassSwitch).apply(this, arguments));
				}

				_createClass(ClassSwitch, [{
						key: '_init',


						/* SPECIAL */

						value: function _init() {

								this.status = { up: {}, down: {}, only: {} };

								this._populate();

								this.__classSwitch();
						}
				}, {
						key: '_events',
						value: function _events() {

								this.___classSwitch();
						}

						/* POPULATE */

				}, {
						key: '_populateBreakpoint',
						value: function _populateBreakpoint(breakpoint) {

								var name = Breakpoints[breakpoint];

								/* UP */

								var up = this.$element.data(name + '-up');

								if (_.isString(up)) {

										this.options.switch.up[breakpoint] = up;
								}

								/* DOWN */

								var down = this.$element.data(name + '-down');

								if (_.isString(down)) {

										this.options.switch.down[breakpoint] = down;
								}

								/* ONLY */

								var specific = this.$element.data(name + '-only'),
								    general = this.$element.data(name),
								    only = _.isString(specific) ? specific : _.isString(general) ? general : undefined;

								if (_.isString(only)) {

										this.options.switch.only[breakpoint] = only;
								}
						}
				}, {
						key: '_populate',
						value: function _populate() {

								for (var key in Breakpoints) {

										if (Breakpoints.hasOwnProperty(key)) {

												if (_.isString(Breakpoints[key])) {

														this._populateBreakpoint(key);
												}
										}
								}
						}

						/* STATUS */

				}, {
						key: '_getStatus',
						value: function _getStatus() {

								var status = { up: {}, down: {}, only: {} },
								    width = Breakpoints.widths[Breakpoint.current];

								/* UP */

								for (var breakpoint in this.options.switch.up) {

										if (this.options.switch.up.hasOwnProperty(breakpoint)) {

												var active = width >= Breakpoints.widths[breakpoint];

												status.up[breakpoint] = active;
										}
								}

								/* DOWN */

								for (var _breakpoint3 in this.options.switch.down) {

										if (this.options.switch.down.hasOwnProperty(_breakpoint3)) {

												var _active = width <= Breakpoints.widths[_breakpoint3];

												status.down[_breakpoint3] = _active;
										}
								}

								/* ONLY */

								for (var _breakpoint4 in this.options.switch.only) {

										if (this.options.switch.only.hasOwnProperty(_breakpoint4)) {

												var _active2 = width === Breakpoints.widths[_breakpoint4];

												status.only[_breakpoint4] = _active2;
										}
								}

								return status;
						}
				}, {
						key: '_getDeltaStatus',
						value: function _getDeltaStatus(previous, current) {

								var delta = { up: {}, down: {}, only: {} };

								for (var type in current) {

										if (current.hasOwnProperty(type)) {

												for (var breakpoint in current[type]) {

														if (current[type].hasOwnProperty(breakpoint)) {

																if (!!previous[type][breakpoint] !== !!current[type][breakpoint]) {

																		delta[type][breakpoint] = !!current[type][breakpoint];
																}
														}
												}
										}
								}

								return delta;
						}

						/* CLASS SWITCH */

				}, {
						key: '___classSwitch',
						value: function ___classSwitch() {

								this._on(true, this.$window, 'breakpoint:change', this.__classSwitch);
						}
				}, {
						key: '__classSwitch',
						value: function __classSwitch() {

								var status = this._getStatus(),
								    delta = this._getDeltaStatus(this.status, status);

								for (var type in delta) {

										if (delta.hasOwnProperty(type)) {

												for (var breakpoint in delta[type]) {

														if (delta[type].hasOwnProperty(breakpoint)) {

																this.$element.toggleClass(this.options.switch[type][breakpoint], delta[type][breakpoint]);
														}
												}
										}
								}

								this.status = status;
						}
				}]);

				return ClassSwitch;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(ClassSwitch, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Breakpoints, Svelto.Breakpoint);

/* =========================================================================
 * Svelto - Widgets - Datepicker
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/widget/widget.js
 * ========================================================================= */

// When using using an incomplete-information format (those where not all the info are exported, like YYYYMMDD) the behaviour when used in combination with, for instance, `formSync` would be broken: at GTM+5 it may be the day 10, but at UTC may actually be day 9, and when syncing we won't get the right date synced between both datepickers
// Accordion to ISO-8601 the first day of the week is Monday

//FIXME: If 21/4/2013 is selected we get "30" selected on 5/2015's page
//FIXME: When using the arrows the prev day still remains hovered even if it's not below the cursor (chrome) //TODO: Make a SO question, maybe we can workaround it

(function ($, _, Svelto, Widgets, Factory, Pointer) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'datepicker',
				plugin: true,
				selector: '.datepicker',
				options: {
						exporters: {
								YYYYMMDD: function YYYYMMDD(date, data) {
										return [_.padStart(date.getUTCFullYear(), 4, 0), _.padStart(parseInt(date.getUTCMonth(), 10) + 1, 2, 0), _.padStart(date.getUTCDate(), 2, 0)].join(data.separator);
								},
								UNIXTIMESTAMP: function UNIXTIMESTAMP(date) {
										return Math.floor(date.getTime() / 1000);
								},
								ISO: function ISO(date) {
										return date.toISOString();
								},
								UTC: function UTC(date) {
										return date.toUTCString();
								}
						},
						importers: {
								YYYYMMDD: function YYYYMMDD(date, data) {
										var segments = date.split(data.separator);
										return new Date(Date.UTC(parseInt(segments[0], 10), parseInt(segments[1], 10) - 1, parseInt(segments[2], 10)));
								},
								UNIXTIMESTAMP: function UNIXTIMESTAMP(date) {
										return new Date(_.isString(date) && date.length ? date * 1000 : NaN);
								},
								ISO: function ISO(date) {
										return new Date(date);
								},
								UTC: function UTC(date) {
										return new Date(date);
								}
						},
						months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
						firstDayOfWeek: 0, // Corresponding to the index in this array: `['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']`, setted to 0 since that to ISO-8601 the first day of the week is Monday
						date: {
								min: false, // Minimum selectable date
								max: false, // Maximum selectable date
								today: false, // Today date
								current: false, // Current date visible in the datepicker (basically the month we are viewing)
								selected: false // The selcted date
						},
						format: {
								type: 'UNIXTIMESTAMP', // One of the formats implemented in the exporters
								data: { // Passed to the called importer and exporter
										separator: '/'
								}
						},
						classes: {
								today: 'datepicker-day-today',
								selected: 'datepicker-day-selected',
								clamped: 'datepicker-day-clamped'
						},
						selectors: {
								navigation: {
										previous: '.datepicker-navigation .previous',
										next: '.datepicker-navigation .next',
										today: '.datepicker-navigation .today'
								},
								day: {
										previous: '.datepicker-days .previous',
										current: '.datepicker-days :not(.previous):not(.next)',
										next: '.datepicker-days .next',
										today: '.datepicker-day-today',
										selected: '.datepicker-day-selected',
										clamped: '.datepicker-day-clamped'
								},
								title: '.datepicker-title',
								input: 'input'
						},
						keystrokes: {
								'up, left': 'previousMonth',
								'right, down': 'nextMonth'
						},
						callbacks: {
								change: _.noop
						}
				}
		};

		/* DATEPICKER */

		var Datepicker = function (_Widgets$Widget3) {
				_inherits(Datepicker, _Widgets$Widget3);

				function Datepicker() {
						_classCallCheck(this, Datepicker);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Datepicker).apply(this, arguments));
				}

				_createClass(Datepicker, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this.$datepicker = this.$element;
								this.$input = this.$datepicker.find(this.options.selectors.input);

								this.$navigationPrev = this.$datepicker.find(this.options.selectors.navigation.previous);
								this.$navigationNext = this.$datepicker.find(this.options.selectors.navigation.next);
								this.$navigationToday = this.$datepicker.find(this.options.selectors.navigation.today);
								this.$navigationTitle = this.$datepicker.find(this.options.selectors.title);

								this.$daysPrev = this.$datepicker.find(this.options.selectors.day.previous);
								this.$daysCurrent = this.$datepicker.find(this.options.selectors.day.current);
								this.$daysNext = this.$datepicker.find(this.options.selectors.day.next);
								this.$daysAll = this.$daysPrev.add(this.$daysCurrent).add(this.$daysNext);

								this.$daySelected = this.$daysAll.filter(this.options.selectors.day.selected);
								this.$dayToday = this.$daysAll.filter(this.options.selectors.day.today);
						}
				}, {
						key: '_init',
						value: function _init() {

								/* RESETTING HIGHLIGHT */

								this._unhighlightSelected();
								this._unhighlightToday();

								/* TODAY */

								if (!(this.options.date.today instanceof Date)) {

										this.options.date.today = new Date();
								}

								/* INITIAL VALUE */

								this.set(this.$input.val());

								/* CURRENT */

								this.options.date.current = this._clampDate(this.options.date.current || this.options.date.selected || this.options.date.today);

								/* REFRESH */

								this._refresh();
						}
				}, {
						key: '_events',
						value: function _events() {

								this.___change();
								this.___keydown();
								this.___navigation();
								this.___dayTap();
						}

						/* PRIVATE */

				}, {
						key: '_cloneDate',
						value: function _cloneDate(date) {

								return new Date(date.getTime());
						}
				}, {
						key: '_clampDate',
						value: function _clampDate(date) {

								return new Date(_.clamp(date.getTime(), this.options.date.min ? this.options.date.min.getTime() : undefined, this.options.date.max ? this.options.date.max.getTime() : undefined));
						}

						/* CHANGE */

				}, {
						key: '___change',
						value: function ___change() {

								this._on(true, this.$input, 'change', this.__change);
						}
				}, {
						key: '__change',
						value: function __change(event, data) {

								if (data && data._datepickerId === this.guid) return;

								this.set(this.$input.val());
						}

						/* KEYDOWN */

				}, {
						key: '___keydown',
						value: function ___keydown() {

								this._onHover([this.$document, 'keydown', this.__keydown]);
						}

						/* NAVIGATION */

				}, {
						key: '___navigation',
						value: function ___navigation() {

								this._on(this.$navigationPrev, Pointer.tap, this.previousMonth);
								this._on(this.$navigationNext, Pointer.tap, this.nextMonth);
								this._on(this.$navigationToday, Pointer.tap, this.navigateToToday);
						}

						/* DAY TAP */

				}, {
						key: '___dayTap',
						value: function ___dayTap() {

								this._on(Pointer.tap, this.options.selectors.day.current, this.__dayTap);
						}
				}, {
						key: '__dayTap',
						value: function __dayTap(event) {

								var $day = $(event.currentTarget);

								if ($day.is(this.options.selectors.day.selected) || $day.is(this.options.selectors.day.clamped)) return;

								var day = parseInt($day.text(), 10),
								    date = new Date(this.options.date.current.getFullYear(), this.options.date.current.getMonth(), day, 12);

								this.set(date);
						}

						/* BUILD */

				}, {
						key: '_buildCalendar',
						value: function _buildCalendar() {

								/* NUMBERS */

								var prevMonthDays = new Date(this.options.date.current.getFullYear(), this.options.date.current.getMonth(), 0).getDate(),
								    currentMonthDays = new Date(this.options.date.current.getFullYear(), this.options.date.current.getMonth() + 1, 0).getDate(),
								    initialDayOfWeek = new Date(this.options.date.current.getFullYear(), this.options.date.current.getMonth(), 1).getDay();

								initialDayOfWeek = initialDayOfWeek === 0 ? 6 : initialDayOfWeek - 1; // Normalizing to 0 -> Monday
								initialDayOfWeek -= this.options.firstDayOfWeek % 7; // Offsetting according to the provided setting
								initialDayOfWeek = initialDayOfWeek < 0 ? 7 + initialDayOfWeek : initialDayOfWeek; // Moving to the other side in case of negative offsetting

								/* PREV */

								var exceedingDays = 31 - prevMonthDays,
								    neededDays = initialDayOfWeek,
								    leftDays = 9 - exceedingDays - neededDays;

								this.$daysPrev.slice(0, leftDays).addClass(this.options.classes.hidden);
								this.$daysPrev.slice(leftDays, leftDays + neededDays).removeClass(this.options.classes.hidden);
								this.$daysPrev.slice(leftDays + neededDays).addClass(this.options.classes.hidden);

								/* CURRENT */

								this.$daysCurrent.slice(28, currentMonthDays).removeClass(this.options.classes.hidden);
								this.$daysCurrent.slice(currentMonthDays).addClass(this.options.classes.hidden);

								/* CURRENT CLAMPED */

								this.$daysCurrent.removeClass(this.options.classes.clamped);

								if (this.options.date.min && this.options.date.current.getFullYear() === this.options.date.min.getFullYear() && this.options.date.current.getMonth() === this.options.date.min.getMonth()) {

										this.$daysCurrent.slice(0, this.options.date.min.getDate() - 1).addClass(this.options.classes.clamped);
								}

								if (this.options.date.max && this.options.date.current.getFullYear() === this.options.date.max.getFullYear() && this.options.date.current.getMonth() === this.options.date.max.getMonth()) {

										this.$daysCurrent.slice(this.options.date.max.getDate()).addClass(this.options.classes.clamped);
								}

								/* NEXT */

								neededDays = (currentMonthDays + initialDayOfWeek) % 7;
								neededDays = neededDays === 0 ? 0 : 7 - neededDays;

								this.$daysNext.slice(0, neededDays).removeClass(this.options.classes.hidden);
								this.$daysNext.slice(neededDays).addClass(this.options.classes.hidden);
						}

						/* HIGHLIGHT */

				}, {
						key: '_highlightDay',
						value: function _highlightDay(day, cssClass) {

								if (day instanceof Date) {

										var deltaMonths = day.getFullYear() * 12 + day.getMonth() - (this.options.date.current.getFullYear() * 12 + this.options.date.current.getMonth());

										switch (deltaMonths) {

												case -1:
														return this.$daysPrev.eq(day.getDate() - 23).addClass(cssClass);

												case 0:
														return this.$daysCurrent.eq(day.getDate() - 1).addClass(cssClass);

												case 1:
														return this.$daysNext.eq(day.getDate() - 1).addClass(cssClass);

										}
								}

								return false;
						}
				}, {
						key: '_unhighlightSelected',
						value: function _unhighlightSelected() {

								if (!this.$daySelected.length) return;

								this.$daySelected.removeClass(this.options.classes.selected);
						}
				}, {
						key: '_highlightSelected',
						value: function _highlightSelected() {

								if (this.options.date.selected) {

										this.$daySelected = this._highlightDay(this.options.date.selected, this.options.classes.selected);
								}
						}
				}, {
						key: '_unhighlightToday',
						value: function _unhighlightToday() {

								if (!this.$dayToday.length) return;

								this.$dayToday.removeClass(this.options.classes.today);
						}
				}, {
						key: '_highlightToday',
						value: function _highlightToday() {

								if (this.options.date.today) {

										this.$dayToday = this._highlightDay(this.options.date.today, this.options.classes.today);
								}
						}

						/* UPDATE */

				}, {
						key: '_updateNavigation',
						value: function _updateNavigation() {

								/* PREVIOUS */

								if (this.options.date.min && this.$navigationPrev.length) {

										var lastDayPrevMonth = new Date(this.options.date.current.getFullYear(), this.options.date.current.getMonth(), 0);

										this.$navigationPrev.toggleClass(this.options.classes.disabled, lastDayPrevMonth.getTime() < this.options.date.min.getTime());
								}

								/* NEXT */

								if (this.options.date.max && this.$navigationNext.length) {

										var firstDayNextMonth = new Date(this.options.date.current.getFullYear(), this.options.date.current.getMonth() + 1, 1);

										this.$navigationNext.toggleClass(this.options.classes.disabled, firstDayNextMonth.getTime() > this.options.date.max.getTime());
								}

								/* TODAY */

								if (this.$navigationToday.length) {

										this.$navigationToday.toggleClass(this.options.classes.disabled, this.options.date.current.getFullYear() === this.options.date.today.getFullYear() && this.options.date.current.getMonth() === this.options.date.today.getMonth());
								}
						}
				}, {
						key: '_updateTitle',
						value: function _updateTitle() {

								this.$navigationTitle.text(this.options.months[this.options.date.current.getMonth()] + ' ' + this.options.date.current.getFullYear());
						}
				}, {
						key: '_updateInput',
						value: function _updateInput() {

								if (this.options.date.selected) {

										this.$input.val(this._export(this.options.date.selected)).trigger('change', { _datepickerId: this.guid });
								}
						}

						/* EXPORT */

				}, {
						key: '_export',
						value: function _export(date) {

								return this.options.exporters[this.options.format.type](date, this.options.format.data);
						}

						/* IMPORT */

				}, {
						key: '_import',
						value: function _import(date) {

								return this.options.importers[this.options.format.type](date, this.options.format.data);
						}
				}, {
						key: '_refresh',
						value: function _refresh() {

								this._unhighlightSelected();
								this._unhighlightToday();

								this._buildCalendar();

								this._updateNavigation();

								this._highlightSelected();
								this._highlightToday();

								this._updateTitle();
						}

						/* API */

				}, {
						key: 'get',
						value: function get(formatted) {

								return this.options.date.selected ? formatted ? this._export(this.options.date.selected) : this._cloneDate(this.options.date.selected) : false;
						}
				}, {
						key: 'set',
						value: function set(date) {

								date = date instanceof Date ? date : this._import(date);

								if (_.isNaN(date.valueOf())) return;

								date = this._clampDate(date);

								if (this.options.date.selected && date.getTime() === this.options.date.selected.getTime()) return;

								if (this.options.date.selected) {

										this._unhighlightSelected();
								}

								this.options.date.selected = date;

								if (this.options.date.current) {

										if (this.options.date.selected.getFullYear() === this.options.date.current.getFullYear() && this.options.date.selected.getMonth() === this.options.date.current.getMonth()) {

												this._highlightSelected();
										} else {

												this.options.date.current = this._cloneDate(this.options.date.selected);

												this._refresh();
										}
								}

								this._updateInput();

								this._trigger('change');
						}
				}, {
						key: 'navigateToToday',
						value: function navigateToToday() {

								if (this.options.date.current.getFullYear() !== this.options.date.today.getFullYear() || this.options.date.current.getMonth() !== this.options.date.today.getMonth()) {

										this.options.date.current = this._clampDate(this.options.date.today);

										this._refresh();
								}
						}
				}, {
						key: 'navigateMonth',
						value: function navigateMonth(modifier) {

								if (_.isNaN(modifier)) return;

								this.options.date.current.setMonth(this.options.date.current.getMonth() + modifier);

								this.options.date.current = this._clampDate(this.options.date.current);

								this._refresh();
						}
				}, {
						key: 'previousMonth',
						value: function previousMonth() {

								this.navigateMonth(-1);
						}
				}, {
						key: 'nextMonth',
						value: function nextMonth() {

								this.navigateMonth(1);
						}
				}]);

				return Datepicker;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(Datepicker, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Pointer);

/* =========================================================================
 * Svelto - Widgets - Draggable
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/widget/widget.js
 * ========================================================================= */

//TODO: Maybe return less datas to triggered events and callbacks

//FIXME: Reposition the draggable properly when autoscrolling inside a container (not document/html)
//FIXME: On iOS, if the draggable is too close to the left edge of the screen dragging it will cause a `scroll to go back` event/animation on safari

(function ($, _, Svelto, Widgets, Factory, Animations, Browser, Pointer, Mouse) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'draggable',
				plugin: true,
				selector: '.draggable',
				options: {
						draggable: _.true, // Checks if we can drag it or not
						threshold: Browser.is.touchDevice ? 5 : 0, // Minimum moving treshold for triggering a drag
						onlyHandlers: false, // Only an handler can drag it around
						revert: false, // On dragend take it back to the starting position
						axis: false, // Limit the movements to this axis
						$helper: false, // An element to drag around instead of the draggable, can be `false` (in case the draggable will be dragged), a jQuery object or a function yiedling a jQuery object
						proxy: {
								$element: false, // Drag the element also when we are triggering a drag from this element
								noMotion: true // If enabled even if there's no motion the proxied draggable will get positionated to the dragend point event (e.g. just a tap)
						},
						constrainer: { // Constrain the drag inside the $element
								$element: false, // If we want to keep the draggable inside this $element
								center: false, // Set the constrain type, it will constrain the whole shape, or the center
								tolerance: { // The amount of pixel flexibility that a constrainer has
										x: 0,
										y: 0
								}
						},
						modifiers: { // It can modify the setted X and Y translation values
								x: _.true,
								y: _.true
						},
						scroll: { // Autoscroll the window when near the border
								active: false, // Active it or not
								speed: 20, // The amount of autoscroll
								sensitivity: 50 // How close it should be to tbe borders
						},
						classes: {
								dragging: 'draggable-dragging',
								reverting: 'draggable-reverting',
								layout: {
										dragging: 'draggable-layout-dragging'
								}
						},
						selectors: {
								handler: '.draggable-handler'
						},
						animations: {
								revert: Animations.fast
						},
						callbacks: {
								start: _.noop,
								move: _.noop,
								end: _.noop
						}
				}
		};

		/* DRAGGABLE */

		var Draggable = function (_Widgets$Widget4) {
				_inherits(Draggable, _Widgets$Widget4);

				function Draggable() {
						_classCallCheck(this, Draggable);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Draggable).apply(this, arguments));
				}

				_createClass(Draggable, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this.draggable = this.element;
								this.$draggable = this.$element;

								this.$handlers = this.options.onlyHandlers ? this.$draggable.find(this.options.selectors.handler) : this.$draggable;
						}
				}, {
						key: '_events',
						value: function _events() {

								this.___down();
								this.___proxy();
						}

						/* DOWN */

				}, {
						key: '___down',
						value: function ___down() {

								this._on(this.$handlers, Pointer.down, this.__down);
						}

						/* PROXY */

				}, {
						key: '___proxy',
						value: function ___proxy() {

								if (this.options.proxy.$element) {

										this._on(this.options.proxy.$element, Pointer.down, this.__down);
								}
						}

						/* ACTIONS */

				}, {
						key: '_centerToPoint',
						value: function _centerToPoint(XY, suppressClasses) {

								var movableOffset = this.$movable.offset(),
								    deltaXY = {
										x: XY.x - (movableOffset.left + this.$movable.outerWidth() / 2),
										y: XY.y - (movableOffset.top + this.$movable.outerHeight() / 2)
								};

								return this._actionMove(deltaXY, suppressClasses);
						}
				}, {
						key: '_actionMove',
						value: function _actionMove(deltaXY, suppressClasses) {

								/* BASE */

								var baseXY = {
										x: this.proxyXY ? this.proxyXY.x : this.initialXY.x,
										y: this.proxyXY ? this.proxyXY.y : this.initialXY.y
								};

								/* INIT */

								if (!this.inited) {

										this.inited = true;

										/* CLAMPING VALUES */

										if (this.options.constrainer.$element) {

												var constrainerOffset = this.options.constrainer.$element[0] === window ? { top: 0, left: 0 } : this.options.constrainer.$element.offset(),
												    movableOffset = this.$movable.offset();

												if (this.options.axis !== 'y') {

														var halfWidth = this.options.constrainer.center ? this.$movable.outerWidth() / 2 : 0;

														this.translateX_min = constrainerOffset.left - (movableOffset.left - baseXY.x) - halfWidth;
														this.translateX_max = constrainerOffset.left + this.options.constrainer.$element.outerWidth() - (movableOffset.left - baseXY.x + this.$movable.outerWidth()) + halfWidth;
												}

												if (this.options.axis !== 'x') {

														var halfHeight = this.options.constrainer.center ? this.$movable.outerHeight() / 2 : 0;

														this.translateY_min = constrainerOffset.top - (movableOffset.top - baseXY.y) - halfHeight;
														this.translateY_max = constrainerOffset.top + this.options.constrainer.$element.outerHeight() - (movableOffset.top - baseXY.y + this.$movable.outerHeight()) + halfHeight;
												}
										}

										/* CLASSES */

										if (!suppressClasses) {

												this._addClasses();
										}
								}

								/* CLAMPING */

								var translateX = baseXY.x,
								    translateY = baseXY.y;

								if (this.options.axis !== 'y') {

										translateX += deltaXY.x;

										if (this.options.constrainer.$element) {

												translateX = _.clamp(translateX, this.translateX_min - this.options.constrainer.tolerance.x, this.translateX_max + this.options.constrainer.tolerance.x);
										}
								}

								if (this.options.axis !== 'x') {

										translateY += deltaXY.y;

										if (this.options.constrainer.$element) {

												translateY = _.clamp(translateY, this.translateY_min - this.options.constrainer.tolerance.y, this.translateY_max + this.options.constrainer.tolerance.y);
										}
								}

								/* MODIFYING */

								var modifiedXY = {
										x: this.options.axis !== 'y' ? this.options.modifiers.x(translateX) : false,
										y: this.options.axis !== 'x' ? this.options.modifiers.y(translateY) : false
								};

								/* ABORTION */

								if (modifiedXY.x === false && modifiedXY.y === false) return baseXY;

								/* SETTING */

								var endXY = {
										x: _.isBoolean(modifiedXY.x) ? modifiedXY.x ? translateX : baseXY.x : modifiedXY.x,
										y: _.isBoolean(modifiedXY.y) ? modifiedXY.y ? translateY : baseXY.y : modifiedXY.y
								};

								this.$movable.translate(endXY.x, endXY.y);

								/* MOTION */

								this.motion = true;

								/* RETURNING */

								return endXY;
						}
				}, {
						key: '_actionSet',
						value: function _actionSet(XY) {}

						/* CLASSES */

				}, {
						key: '_toggleClasses',
						value: function _toggleClasses(force) {

								this.$layout.toggleClass(this.options.classes.layout.dragging, force);
								this.$movable.toggleClass(this.options.classes.dragging, force);
						}
				}, {
						key: '_addClasses',
						value: function _addClasses() {

								this._toggleClasses(true);
						}
				}, {
						key: '_removeClasses',
						value: function _removeClasses() {

								this._toggleClasses(false);
						}

						/* HELPER */

				}, {
						key: '_getHelper',
						value: function _getHelper() {

								return _.isFunction(this.options.$helper) ? this.options.$helper() : this.options.$helper instanceof $ && this.options.$helper.length ? this.options.$helper : false;
						}
				}, {
						key: '_initHelper',
						value: function _initHelper() {

								this.$helper.appendTo(this.$layout);
						}
				}, {
						key: '_destroyHelper',
						value: function _destroyHelper() {

								this.$helper.remove();
						}

						/* AUTOSCROLL */

				}, {
						key: '_autoscroll',
						value: function _autoscroll(pointXY) {

								if (!this.options.scroll.active) return;

								if (!this.scrollInited) {

										this.$scrollParent = this.$movable.scrollParent();
										this.scrollParent = this.$scrollParent[0];

										this.scrollParentIsDocument = this.scrollParent === document || this.scrollParent.tagName === 'HTML';

										this.scrollInited = true;
								}

								// Logic taken from jQuery UI

								if (this.scrollParentIsDocument) {

										if (this.options.axis !== 'x') {

												var scrollTop = this.$document.scrollTop();

												if (pointXY.y - scrollTop <= this.options.scroll.sensitivity) {

														this.$document.scrollTop(scrollTop - this.options.scroll.speed);
												} else if (this.$window.height() - (pointXY.y - scrollTop) <= this.options.scroll.sensitivity) {

														this.$document.scrollTop(scrollTop + this.options.scroll.speed);
												}
										}

										if (this.options.axis !== 'y') {

												var scrollLeft = this.$document.scrollLeft();

												if (pointXY.x - scrollLeft <= this.options.scroll.sensitivity) {

														this.$document.scrollLeft(scrollLeft - this.options.scroll.speed);
												} else if (this.$window.width() - (pointXY.x - scrollLeft) <= this.options.scroll.sensitivity) {

														this.$document.scrollLeft(scrollLeft + this.options.scroll.speed);
												}
										}
								} else {

										var parentOffset = this.$scrollParent.offset();

										if (this.options.axis !== 'x') {

												if (parentOffset.top + this.scrollParent.offsetHeight - pointXY.y <= this.options.scroll.sensitivity) {

														this.scrollParent.scrollTop += this.options.scroll.speed;
												} else if (pointXY.y - parentOffset.top <= this.options.scroll.sensitivity) {

														this.scrollParent.scrollTop -= this.options.scroll.speed;
												}
										}

										if (this.options.axis !== 'y') {

												if (parentOffset.left + this.scrollParent.offsetWidth - pointXY.x <= this.options.scroll.sensitivity) {

														this.scrollParent.scrollLeft += this.options.scroll.speed;
												} else if (pointXY.x - parentOffset.left <= this.options.scroll.sensitivity) {

														this.scrollParent.scrollLeft -= this.options.scroll.speed;
												}
										}
								}
						}

						/* REVERT */

				}, {
						key: '_revert',
						value: function _revert() {

								this._lock = true;

								this._frame(function () {

										this.$movable.addClass(this.options.classes.reverting);

										this._frame(function () {

												this.$movable.translate(this.initialXY.x, this.initialXY.y);

												this._delay(function () {

														this.$movable.removeClass(this.options.classes.reverting);

														this._lock = false;
												}, this.options.animations.revert);
										});
								});
						}

						/* HANDLERS */

				}, {
						key: '__down',
						value: function __down(event) {

								if (this._lock || !this.options.draggable()) return;

								event.preventDefault();
								event.stopImmediatePropagation();

								this.inited = false;
								this.motion = false;
								this.scrollInited = false;

								this.$helper = this._getHelper();
								this.helper = this.$helper ? this.$helper[0] : false;

								this.$movable = this.$helper || this.$draggable;

								this.startEvent = event;
								this.startXY = $.eventXY(event);

								if (this.$helper) {

										this._initHelper();
										this.initialXY = this.$movable.translate();
										this.initialXY = this._centerToPoint(this.startXY);
								} else {

										this.initialXY = this.$movable.translate();
								}

								this.isProxyed = this.options.proxy.$element && event.currentTarget === this.options.proxy.$element[0];

								this.proxyXY = false;

								this._trigger('start', { draggable: this.draggable, helper: this.helper, isProxyed: this.isProxyed, initialXY: this.initialXY, startEvent: this.startEvent, startXY: this.startXY });

								this._on(true, this.$document, Pointer.move, this.__move);
								this._one(true, this.$document, Pointer.up, this.__up);
								this._one(true, this.$document, Pointer.cancel, this.__cancel);
						}
				}, {
						key: '__move',
						value: function __move(event) {

								var moveXY = $.eventXY(event),
								    deltaXY = {
										x: moveXY.x - this.startXY.x,
										y: moveXY.y - this.startXY.y
								},
								    absDeltaXY = {
										x: Math.abs(deltaXY.x),
										y: Math.abs(deltaXY.y)
								},
								    dragXY = void 0;

								if (absDeltaXY.x < this.options.threshold && absDeltaXY.y < this.options.threshold) return;

								if (!this.inited && this.isProxyed) {

										dragXY = this._centerToPoint(moveXY);

										this.proxyXY = dragXY;
								} else {

										var _deltaXY = {
												x: moveXY.x - this.startXY.x,
												y: moveXY.y - this.startXY.y
										};

										dragXY = this._actionMove(_deltaXY);
								}

								this._autoscroll(moveXY);

								this._trigger('move', { draggable: this.draggable, helper: this.helper, isProxyed: this.isProxyed, initialXY: this.initialXY, startEvent: this.startEvent, startXY: this.startXY, moveEvent: event, moveXY: moveXY, dragXY: dragXY });
						}
				}, {
						key: '__up',
						value: function __up(event) {

								var endXY = $.eventXY(event),
								    dragXY = this.initialXY;

								if (this.inited) {

										this._removeClasses();
								}

								if (this.$helper) {

										this._destroyHelper();
								}

								if (this.motion) {

										if (this.options.revert) {

												this._revert();
										} else {

												dragXY = this.$movable.translate();
										}
								} else if (this.isProxyed) {

										if ((_.isFunction(this.options.proxy.noMotion) ? this.options.proxy.noMotion() : this.options.proxy.noMotion) && Mouse.hasButton(event, Mouse.buttons.LEFT, true)) {

												dragXY = this._centerToPoint(endXY, true);
										}
								}

								this._off(this.$document, Pointer.move, this.__move);
								this._off(this.$document, Pointer.cancel, this.__cancel);

								this._trigger('end', { draggable: this.draggable, helper: this.helper, isProxyed: this.isProxyed, initialXY: this.initialXY, startEvent: this.startEvent, startXY: this.startXY, endEvent: event, endXY: endXY, dragXY: dragXY, motion: this.motion });
						}
				}, {
						key: '__cancel',
						value: function __cancel(event) {

								var endXY = $.eventXY(event),
								    dragXY = this.$movable.translate();

								if (this.inited) {

										this._removeClasses();
								}

								if (this.$helper) {

										this._destroyHelper();
								}

								if (this.motion) {

										if (this.options.revert) {

												this._revert();

												dragXY = this.initialXY;
										}
								}

								this._off(this.$document, Pointer.move, this.__move);
								this._off(this.$document, Pointer.up, this.__up);

								this._trigger('end', { draggable: this.draggable, helper: this.helper, initialXY: this.initialXY, startEvent: this.startEvent, startXY: this.startXY, endEvent: event, endXY: endXY, dragXY: dragXY, motion: this.motion });
						}
				}]);

				return Draggable;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(Draggable, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Animations, Svelto.Browser, Svelto.Pointer, Svelto.Mouse);

/* =========================================================================
 * Svelto - Widgets - Expander
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/animations/animations.js
 * @require core/widget/widget.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory, Animations) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'expander',
				plugin: true,
				selector: '.expander',
				options: {
						classes: {
								open: 'open'
						},
						selectors: {
								content: '.expander-content' //TODO: Maybe rename it to `.expander-block`
						},
						animations: {
								open: Animations.normal,
								close: Animations.normal
						},
						callbacks: {
								open: _.noop,
								close: _.noop
						}
				}
		};

		/* EXPANDER */

		var Expander = function (_Widgets$Widget5) {
				_inherits(Expander, _Widgets$Widget5);

				function Expander() {
						_classCallCheck(this, Expander);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Expander).apply(this, arguments));
				}

				_createClass(Expander, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this.$expander = this.$element;
								this.$content = this.$expander.find(this.options.selectors.content);

								this._isOpen = this.$expander.hasClass(this.options.classes.open);
						}

						/* API */

				}, {
						key: 'isOpen',
						value: function isOpen() {

								return this._isOpen;
						}
				}, {
						key: 'toggle',
						value: function toggle() {
								var force = arguments.length <= 0 || arguments[0] === undefined ? !this._isOpen : arguments[0];


								if (!!force !== this._isOpen) {

										this._isOpen = !!force;

										this.$expander.toggleClass(this.options.classes.open, this._isOpen);

										this._trigger(this._isOpen ? 'open' : 'close');
								}
						}
				}, {
						key: 'open',
						value: function open() {

								this.toggle(true);
						}
				}, {
						key: 'close',
						value: function close() {

								this.toggle(false);
						}
				}]);

				return Expander;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(Expander, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Animations);

/* =========================================================================
 * Svelto - Widgets - Accordion
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require widgets/expander/expander.js
 * ========================================================================= */

//TODO: Add better support for changing `options.multiple` at runtime. `multiple: true` -> opening multiple, -> `multiple: false` -> multiple still opened

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'accordion',
				plugin: true,
				selector: '.accordion',
				options: {
						multiple: false, // Wheter to allow multiple expanders open or not
						selectors: {
								expander: Widgets.Expander.config.selector
						},
						callbacks: {
								open: _.noop,
								close: _.noop
						}
				}
		};

		/* ACCORDION */

		var Accordion = function (_Widgets$Widget6) {
				_inherits(Accordion, _Widgets$Widget6);

				function Accordion() {
						_classCallCheck(this, Accordion);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Accordion).apply(this, arguments));
				}

				_createClass(Accordion, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this.$accordion = this.$element;
								this.$expanders = this.$accordion.children(this.options.selectors.expander);

								this.instances = this.$expanders.get().map(function (expander) {
										return $(expander).expander('instance');
								});
						}
				}, {
						key: '_events',
						value: function _events() {

								this.___open();
								this.___close();
						}

						/* EXPANDER OPEN */

				}, {
						key: '___open',
						value: function ___open() {

								this._on(true, this.$expanders, 'expander:open', this.__open);
						}
				}, {
						key: '__open',
						value: function __open(event) {

								this._trigger('open', { index: this.$expanders.index(event.target) });

								this.__multiple(event.target);
						}

						/* EXPANDER CLOSE */

				}, {
						key: '___close',
						value: function ___close() {

								this._on(true, this.$expanders, 'expander:close', this.__close);
						}
				}, {
						key: '__close',
						value: function __close(event) {

								this._trigger('close', { index: this.$expanders.index(event.target) });
						}

						/* MULTIPLE */

				}, {
						key: '__multiple',
						value: function __multiple(expander) {

								if (this.options.multiple) return;

								this.instances.forEach(function (instance) {
										return instance.element !== expander ? instance.close() : false;
								});
						}

						/* API OVERRIDES */

				}, {
						key: 'enable',
						value: function enable() {

								_get(Object.getPrototypeOf(Accordion.prototype), 'enable', this).call(this);

								_.invokeMap(this.instances, 'enable');
						}
				}, {
						key: 'disable',
						value: function disable() {

								_.invokeMap(this.instances, 'disable');
						}

						/* API */

				}, {
						key: 'isOpen',
						value: function isOpen(index) {

								return this.instances[index].isOpen();
						}
				}, {
						key: 'toggle',
						value: function toggle(index, force) {

								this.instances[index].toggle(force);
						}
				}, {
						key: 'open',
						value: function open(index) {

								this.toggle(index, true);
						}
				}, {
						key: 'close',
						value: function close(index) {

								this.toggle(index, false);
						}
				}]);

				return Accordion;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(Accordion, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Flickable
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/widget/widget.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory, Pointer) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'flickable',
				plugin: true,
				selector: '.flickable',
				options: {
						duration: 150, // Maximum duration of the flick gesture
						threshold: 5, // Minimum moving treshold of the flick gesture
						callbacks: {
								flick: _.noop
						}
				}
		};

		/* FLICKABLE */

		var Flickable = function (_Widgets$Widget7) {
				_inherits(Flickable, _Widgets$Widget7);

				function Flickable() {
						_classCallCheck(this, Flickable);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Flickable).apply(this, arguments));
				}

				_createClass(Flickable, [{
						key: '_events',


						/* SPECIAL */

						value: function _events() {

								this.___down();
						}

						/* DOWN */

				}, {
						key: '___down',
						value: function ___down() {

								this._on(Pointer.down, this.__down);
						}
				}, {
						key: '__down',
						value: function __down(event) {

								this._startXY = $.eventXY(event);
								this._startTimestamp = event.timeStamp || Date.now();

								this._motion = false;

								this.___move();
								this.___up();
								this.___cancel();
						}

						/* MOVE */

				}, {
						key: '___move',
						value: function ___move() {

								this._one(true, this.$document, Pointer.move, this.__move);
						}
				}, {
						key: '__move',
						value: function __move() {

								this._motion = true;
						}

						/* UP */

				}, {
						key: '___up',
						value: function ___up() {

								this._one(true, this.$document, Pointer.up, this.__up);
						}
				}, {
						key: '__up',
						value: function __up(event) {

								this._endTimestamp = event.timeStamp || Date.now();

								if (this._motion && this._endTimestamp - this._startTimestamp <= this.options.duration) {

										var endXY = $.eventXY(event),
										    deltaXY = {
												x: endXY.x - this._startXY.x,
												y: endXY.y - this._startXY.y
										},
										    absDeltaXY = {
												x: Math.abs(deltaXY.x),
												y: Math.abs(deltaXY.y)
										};

										if (absDeltaXY.x >= this.options.threshold || absDeltaXY.y >= this.options.threshold) {

												var orientation = void 0,
												    direction = void 0;

												if (absDeltaXY.x > absDeltaXY.y) {

														orientation = 'horizontal';
														direction = deltaXY.x > 0 ? 'right' : 'left';
												} else {

														orientation = 'vertical';
														direction = deltaXY.y > 0 ? 'bottom' : 'top';
												}

												this._trigger('flick', {
														orientation: orientation,
														direction: direction,
														startEvent: this._startEvent,
														startXY: this._startXY,
														endEvent: event,
														endXY: endXY
												});
										}
								}

								if (!this._motion) {

										this._off(this.$document, Pointer.move, this.__move);
								}

								this._off(this.$document, Pointer.cancel, this.__cancel);
						}

						/* CANCEL */

				}, {
						key: '___cancel',
						value: function ___cancel() {

								this._one(true, this.$document, Pointer.cancel, this.__cancel);
						}
				}, {
						key: '__cancel',
						value: function __cancel() {

								if (!this._motion) {

										this._off(this.$document, Pointer.move, this.__move);
								}

								this._off(this.$document, Pointer.up, this.__up);
						}
				}]);

				return Flickable;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(Flickable, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Pointer);

/* =========================================================================
 * Svelto - Widgets - Flippable
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/widget/widget.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'flippable',
				plugin: true,
				selector: '.flippable',
				options: {
						classes: {
								flip: 'flipped'
						},
						callbacks: {
								front: _.noop,
								back: _.noop
						}
				}
		};

		/* FLIPPABLE */

		var Flippable = function (_Widgets$Widget8) {
				_inherits(Flippable, _Widgets$Widget8);

				function Flippable() {
						_classCallCheck(this, Flippable);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Flippable).apply(this, arguments));
				}

				_createClass(Flippable, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this.$flippable = this.$element;

								this._isFlipped = this.$flippable.hasClass(this.options.classes.flip);
						}

						/* API */

				}, {
						key: 'isFlipped',
						value: function isFlipped() {

								return this._isFlipped;
						}
				}, {
						key: 'flip',
						value: function flip() {
								var force = arguments.length <= 0 || arguments[0] === undefined ? !this._isFlipped : arguments[0];


								if (!!force !== this._isFlipped) {

										this._isFlipped = force;

										this.$flippable.toggleClass(this.options.classes.flip, this._isFlipped);

										this._trigger(this._isFlipped ? 'back' : 'front');
								}
						}
				}, {
						key: 'front',
						value: function front() {

								this.flip(false);
						}
				}, {
						key: 'back',
						value: function back() {

								this.flip(true);
						}
				}]);

				return Flippable;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(Flippable, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Form Sync
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/widget/widget.js
 * ========================================================================= */

//TODO: Maybe add the ability to trigger a sync when widgetizing a new form in the group, so that if we are appending a new one it gets synced (as a base or not, if not maybe we can get a data-target or the first of othe others in the group as a base)

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'formSync',
				plugin: true,
				selector: 'form[data-sync-group]',
				options: {
						live: false, // Basically it triggers the syncing also when the `input` event is fired
						attributes: {
								name: 'name'
						},
						datas: {
								group: 'sync-group'
						},
						selectors: {
								form: 'form',
								elements: 'input:not([type="button"]), textarea, select',
								checkable: '[type="radio"], [type="checkbox"]',
								radio: '[type="radio"]',
								checkbox: '[type="checkbox"]',
								textfield: 'input:not([type="button"]):not([type="checkbox"]):not([type="radio"]), textarea'
						}
				}
		};

		/* FORM SYNC */

		var FormSync = function (_Widgets$Widget9) {
				_inherits(FormSync, _Widgets$Widget9);

				function FormSync() {
						_classCallCheck(this, FormSync);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(FormSync).apply(this, arguments));
				}

				_createClass(FormSync, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this.$form = this.$element;
								this.$elements = this.$form.find(this.options.selectors.elements);

								this.group = this.$form.data(this.options.datas.group);
						}
				}, {
						key: '_events',
						value: function _events() {

								this.___change();
								this.___input();
						}

						/* CHANGE */

				}, {
						key: '___change',
						value: function ___change() {

								this._on(true, this.$elements, 'change', this._debounce(this.__sync, 100));
						}

						/* INPUT */

				}, {
						key: '___input',
						value: function ___input() {

								if (this.options.live) {

										var $textfields = this.$elements.filter(this.options.selectors.textfield);

										this._on(true, $textfields, 'input', this._debounce(this.__sync, 100));
								}
						}

						/* SYNC */

				}, {
						key: '__sync',
						value: function __sync(event, data) {

								if (data && data._formSynced === this.group) return;

								var $element = $(event.target),
								    name = $element.attr(this.options.attributes.name),
								    $otherElements = $(this.options.selectors.form + '[data-' + this.options.datas.group + '="' + this.group + '"]').not(this.$form).find('[' + this.options.attributes.name + '="' + name + '"]').not($element);

								if (!$otherElements.length) return;

								var value = $element.val(),
								    checked = !!$element.prop('checked');

								var _iteratorNormalCompletion9 = true;
								var _didIteratorError9 = false;
								var _iteratorError9 = undefined;

								try {
										for (var _iterator9 = $otherElements[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
												var otherElement = _step9.value;


												var $otherElement = $(otherElement),
												    otherValue = $otherElement.val(),
												    otherChecked = !!$otherElement.prop('checked');

												if (value === otherValue && checked === otherChecked) continue;

												if ($element.is(this.options.selectors.radio) && (value !== otherValue || checked === otherChecked)) continue;

												if ($element.is(this.options.selectors.checkable)) {

														$otherElement.prop('checked', checked).trigger('change', { _formSynced: this.group });
												} else {

														$otherElement.val(value).trigger('change', { _formSynced: this.group });
												}
										}
								} catch (err) {
										_didIteratorError9 = true;
										_iteratorError9 = err;
								} finally {
										try {
												if (!_iteratorNormalCompletion9 && _iterator9.return) {
														_iterator9.return();
												}
										} finally {
												if (_didIteratorError9) {
														throw _iteratorError9;
												}
										}
								}
						}
				}]);

				return FormSync;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(FormSync, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Infobar
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/widget/widget.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'infobar',
				plugin: true,
				selector: '.infobar',
				options: {
						callbacks: {
								close: _.noop
						}
				}
		};

		/* INFOBAR */

		var Infobar = function (_Widgets$Widget10) {
				_inherits(Infobar, _Widgets$Widget10);

				function Infobar() {
						_classCallCheck(this, Infobar);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Infobar).apply(this, arguments));
				}

				_createClass(Infobar, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this.$infobar = this.$element;
						}

						/* API */

				}, {
						key: 'close',
						value: function close() {

								this.$infobar.detach();

								this._trigger('close');
						}
				}]);

				return Infobar;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(Infobar, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Input - Autogrow
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/browser/browser.js
 * @require core/widget/widget.js
 * ========================================================================= */

// It supports only `box-sizing: border-box` inputs

(function ($, _, Svelto, Widgets, Factory, Browser) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'inputAutogrow',
				plugin: true,
				selector: 'input.autogrow',
				options: {
						minWidth: 1, // So that the cursor will get displayed even when empty
						callbacks: {
								change: _.noop
						}
				}
		};

		/* INPUT AUTOGROW */

		var InputAutogrow = function (_Widgets$Widget11) {
				_inherits(InputAutogrow, _Widgets$Widget11);

				function InputAutogrow() {
						_classCallCheck(this, InputAutogrow);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(InputAutogrow).apply(this, arguments));
				}

				_createClass(InputAutogrow, [{
						key: '_variables',
						value: function _variables() {

								this.$input = this.$element;

								this.$tempInput = $('<input>').css({
										'position': 'fixed',
										'visibility': 'hidden',
										'padding': 0,
										'min-width': 0,
										'width': 0
								});
						}
				}, {
						key: '_init',
						value: function _init() {

								this._update();
						}
				}, {
						key: '_events',
						value: function _events() {

								this.___inputChange();
						}

						/* PRIVATE */

				}, {
						key: '_getNeededWidth',
						value: function _getNeededWidth() {

								this.$tempInput.css('font', this.$input.css('font')).val(this.$input.val()).appendTo(this.$layout);

								var width = this.$tempInput[0].scrollWidth;

								this.$tempInput.detach();

								return Math.max(this.options.minWidth, width);
						}

						/* INPUT / CHANGE */

				}, {
						key: '___inputChange',
						value: function ___inputChange() {

								this._on(true, 'input change', this._update);
						}

						/* UPDATE */

				}, {
						key: '_update',
						value: function _update() {

								var width = this._getNeededWidth();

								if (width === this._prevWidth) return;

								this._prevWidth = width;

								this.$input.width(width);

								this._trigger('change');
						}
				}], [{
						key: 'widgetize',


						/* SPECIAL */

						value: function widgetize($input) {

								/* SKIP IE/EDGE */

								//FIXME: input.scrollWidth is not supported by them, find another reliable way of implementing it

								if (Browser.is.ie || Browser.is.edge) return;

								/* WIDGETIZE */

								$input.inputAutogrow();
						}
				}]);

				return InputAutogrow;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(InputAutogrow, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Browser);

/* =========================================================================
 * Svelto - Widgets - Input - File - Names
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/widget/widget.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'inputFileNames',
				plugin: true,
				selector: '.input-file-names',
				options: {
						placeholder: 'Select a file...',
						callbacks: {
								change: _.noop
						}
				}
		};

		/* INPUT FILE NAMES */

		var InputFileNames = function (_Widgets$Widget12) {
				_inherits(InputFileNames, _Widgets$Widget12);

				function InputFileNames() {
						_classCallCheck(this, InputFileNames);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(InputFileNames).apply(this, arguments));
				}

				_createClass(InputFileNames, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this.$names = this.$element;

								this.$input = this.$names.closest('label').find('input[type="file"]');
								this.input = this.$input[0];
						}
				}, {
						key: '_init',
						value: function _init() {

								this.options.placeholder = this.$names.text() || this.options.placeholder;

								this._update();
						}
				}, {
						key: '_events',
						value: function _events() {

								this.___change();
						}

						/* PRIVATE */

				}, {
						key: '_getNames',
						value: function _getNames() {

								var names = [];

								for (var i = 0, l = this.input.files.length; i < l; i++) {

										names.push(this.input.files[i].name);
								}

								return names;
						}
				}, {
						key: '_getText',
						value: function _getText() {

								var names = this._getNames();

								return names.length ? names.join(', ') : this.options.placeholder;
						}

						/* CHANGE */

				}, {
						key: '___change',
						value: function ___change() {

								this._on(true, this.$input, 'change', this._update);
						}

						/* UPDATE */

				}, {
						key: '_update',
						value: function _update() {

								var previous = this.$names.text(),
								    current = this._getText();

								if (previous === current) return;

								this.$names.text(current);

								this._trigger('change');
						}
				}]);

				return InputFileNames;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(InputFileNames, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Modal
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/animations/animations.js
 * @require core/widget/widget.js
 * ========================================================================= */

//FIXME: Multiple open modals (read it: multiple backdrops) are not well supported

(function ($, _, Svelto, Widgets, Factory, Pointer, Animations) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'modal',
				plugin: true,
				selector: '.modal',
				options: {
						classes: {
								show: 'show',
								open: 'open',
								backdrop: {
										show: 'modal-backdrop obscured-show obscured',
										open: 'obscured-open'
								}
						},
						animations: {
								open: Animations.normal,
								close: Animations.normal
						},
						keystrokes: {
								'esc': 'close'
						},
						callbacks: {
								beforeopen: _.noop,
								open: _.noop,
								beforeclose: _.noop,
								close: _.noop
						}
				}
		};

		/* MODAL */

		var Modal = function (_Widgets$Widget13) {
				_inherits(Modal, _Widgets$Widget13);

				function Modal() {
						_classCallCheck(this, Modal);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Modal).apply(this, arguments));
				}

				_createClass(Modal, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this.$modal = this.$element;
								this.modal = this.element;

								this.$backdrop = this.$html;

								this._isOpen = this.$modal.hasClass(this.options.classes.open);
						}
				}, {
						key: '_events',
						value: function _events() {

								if (this._isOpen) {

										this.___keydown();
										this.___tap();
										this.___route();
								}
						}
				}, {
						key: '_destroy',
						value: function _destroy() {

								this.close();
						}

						/* TAP */

				}, {
						key: '___tap',
						value: function ___tap() {

								this._on(true, this.$html, Pointer.tap, this.__tap);
						}
				}, {
						key: '__tap',
						value: function __tap(event) {

								if (this._lock || !$(event.target).isAttached() || $(event.target).closest(this.$modal).length) return;

								this.close();
						}

						/* ROUTE */

				}, {
						key: '__route',
						value: function __route() {

								if (this._isOpen && !this.$modal.isAttached()) {

										this.close();
								}
						}

						/* API */

				}, {
						key: 'isOpen',
						value: function isOpen() {

								return this._isOpen;
						}
				}, {
						key: 'toggle',
						value: function toggle() {
								var force = arguments.length <= 0 || arguments[0] === undefined ? !this._isOpen : arguments[0];


								if (!!force !== this._isOpen) {

										this[force ? 'open' : 'close']();
								}
						}
				}, {
						key: 'open',
						value: function open() {

								if (this._lock || this._isOpen) return;

								this._lock = true;
								this._isOpen = true;

								this._trigger('beforeopen');

								this.$layout.disableScroll();

								this._frame(function () {

										this.$modal.addClass(this.options.classes.show);
										this.$backdrop.addClass(this.options.classes.backdrop.show);

										this._frame(function () {

												this.$modal.addClass(this.options.classes.open);
												this.$backdrop.addClass(this.options.classes.backdrop.open);

												this._lock = false;

												this._trigger('open');
										});
								});

								this.___keydown();
								this.___tap();
								this.___route();
						}
				}, {
						key: 'close',
						value: function close() {

								if (this.lock || !this._isOpen) return;

								this._lock = true;
								this._isOpen = false;

								this._trigger('beforeclose');

								this._frame(function () {

										this.$modal.removeClass(this.options.classes.open);
										this.$backdrop.removeClass(this.options.classes.backdrop.open);

										this._delay(function () {

												this.$modal.removeClass(this.options.classes.show);
												this.$backdrop.removeClass(this.options.classes.backdrop.show);

												this.$layout.enableScroll();

												this._lock = false;

												this._trigger('close');
										}, this.options.animations.close);
								});

								this._reset();
						}
				}]);

				return Modal;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(Modal, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Pointer, Svelto.Animations);

/* =========================================================================
 * Svelto - Widgets - Numbox
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/widget/widget.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory, Pointer) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'numbox',
				plugin: true,
				selector: '.numbox',
				options: {
						min: 0,
						max: 100,
						value: 0,
						step: 1, // Only multiples of `step` are valid values
						datas: {
								min: 'min',
								max: 'max',
								step: 'step'
						},
						selectors: {
								decreaser: '.numbox-decreaser',
								increaser: '.numbox-increaser',
								input: 'input'
						},
						keystrokes: {
								'left, down': 'decrease',
								'right, up': 'increase'
						},
						callbacks: {
								change: _.noop
						}
				}
		};

		/* NUMBOX */

		var Numbox = function (_Widgets$Widget14) {
				_inherits(Numbox, _Widgets$Widget14);

				function Numbox() {
						_classCallCheck(this, Numbox);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Numbox).apply(this, arguments));
				}

				_createClass(Numbox, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this.$numbox = this.$element;
								this.$input = this.$numbox.find(this.options.selectors.input);
								this.$decreaser = this.$numbox.find(this.options.selectors.decreaser);
								this.$increaser = this.$numbox.find(this.options.selectors.increaser);

								this._prevValue = false;
						}
				}, {
						key: '_init',
						value: function _init() {

								/* VARIABLES */

								var value = this.$input.val();

								/* OPTIONS */

								this.options.min = Number(this.$numbox.data(this.options.datas.min) || this.options.min);
								this.options.max = Number(this.$numbox.data(this.options.datas.max) || this.options.max);
								this.options.step = Number(this.$numbox.data(this.options.datas.step) || this.options.step);
								this.options.value = this._sanitizeValue(value || this.options.value);

								/* UPDATE */

								if (Number(value) !== this.options.value) {

										this._update();
								} else {

										this._updateButtons();
								}
						}
				}, {
						key: '_events',
						value: function _events() {

								this.___inputChange();

								this.___keydown();

								this.___increaser();
								this.___decreaser();
						}

						/* PRIVATE */

				}, {
						key: '_sanitizeValue',
						value: function _sanitizeValue(value) {

								value = Number(value);

								value = _.isNaN(value) ? 0 : _.roundCloser(value, this.options.step);

								return _.clamp(value, this.options.min, this.options.max);
						}

						/* INPUT / CHANGE */

				}, {
						key: '___inputChange',
						value: function ___inputChange() {

								this._on(true, this.$input, 'input change', this.__inputChange);
						}
				}, {
						key: '__inputChange',
						value: function __inputChange() {

								this.set(this.$input.val());
						}

						/* KEYDOWN */

				}, {
						key: '___keydown',
						value: function ___keydown() {

								this._onHover([this.$document, 'keydown', this.__keydown]);
						}

						/* INCREASER */

				}, {
						key: '___increaser',
						value: function ___increaser() {

								this._on(this.$decreaser, Pointer.tap, this.decrease);
						}

						/* DECREASER */

				}, {
						key: '___decreaser',
						value: function ___decreaser() {

								this._on(this.$increaser, Pointer.tap, this.increase);
						}

						/* UPDATE */

				}, {
						key: '_updateInput',
						value: function _updateInput() {

								this.$input.val(this.options.value).trigger('change');
						}
				}, {
						key: '_updateButtons',
						value: function _updateButtons() {

								var isMin = this.options.value === this.options.min,
								    isMax = this.options.value === this.options.max;

								this.$decreaser.toggleClass(this.options.classes.disabled, isMin);
								this.$increaser.toggleClass(this.options.classes.disabled, isMax);
						}
				}, {
						key: '_update',
						value: function _update() {

								this._updateInput();
								this._updateButtons();
						}

						/* API */

				}, {
						key: 'get',
						value: function get() {

								return this.options.value;
						}
				}, {
						key: 'set',
						value: function set(value) {

								value = Number(value);

								if (!_.isNaN(value)) {

										value = this._sanitizeValue(value);

										if (value !== this.options.value) {

												this._prevValue = this.options.value;

												this.options.value = value;

												this._update();

												this._trigger('change');

												return;
										}
								}

								/* RESETTING IF WE ALTERED THE INPUT VALUE */

								if (this.$input.val() !== String(this.options.value)) {

										this._updateInput();
								}
						}
				}, {
						key: 'increase',
						value: function increase() {

								this.set(this.options.value + this.options.step);
						}
				}, {
						key: 'decrease',
						value: function decrease() {

								this.set(this.options.value - this.options.step);
						}
				}]);

				return Numbox;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(Numbox, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Pointer);

/* =========================================================================
 * Svelto - Widgets - Overlay
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/animations/animations.js
 * @require core/widget/widget.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory, Animations) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'overlay',
				plugin: true,
				selector: '.overlay',
				options: {
						classes: {
								show: 'show',
								open: 'open',
								parent: {
										show: 'overlay-parent-show',
										open: 'overlay-parent-open'
								}
						},
						animations: {
								open: Animations.fast,
								close: Animations.fast
						},
						keystrokes: {
								'esc': 'close'
						},
						callbacks: {
								open: _.noop,
								close: _.noop
						}
				}
		};

		/* OVERLAY */

		var Overlay = function (_Widgets$Widget15) {
				_inherits(Overlay, _Widgets$Widget15);

				function Overlay() {
						_classCallCheck(this, Overlay);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Overlay).apply(this, arguments));
				}

				_createClass(Overlay, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this.$overlay = this.$element;

								this._isOpen = this.$overlay.hasClass(this.options.classes.open);
						}
				}, {
						key: '_events',
						value: function _events() {

								if (this._isOpen) {

										this.___keydown();
								}
						}
				}, {
						key: '_destroy',
						value: function _destroy() {

								this.close();
						}

						/* PARENT */

				}, {
						key: '_getParent',
						value: function _getParent() {

								if (!this.$parent) {

										this.$parent = this.$overlay.parent();
								}

								return this.$parent;
						}

						/* KEYDOWN */

				}, {
						key: '___keydown',
						value: function ___keydown() {

								this._onHover(true, [this.$document, 'keydown', this.__keydown]); //FIXME: Using _onHover in an undocumented way, the first value was supposed to be $element
						}

						/* API */

				}, {
						key: 'isOpen',
						value: function isOpen() {

								return this._isOpen;
						}
				}, {
						key: 'toggle',
						value: function toggle() {
								var force = arguments.length <= 0 || arguments[0] === undefined ? !this._isOpen : arguments[0];


								if (!!force !== this._isOpen) {

										this[force ? 'open' : 'close']();
								}
						}
				}, {
						key: 'open',
						value: function open() {

								if (this._lock || this._isOpen) return;

								this._lock = true;
								this._isOpen = true;

								this._frame(function () {

										this.$overlay.addClass(this.options.classes.show);
										this._getParent().addClass(this.options.classes.parent.show);

										this._frame(function () {

												this.$overlay.addClass(this.options.classes.open);
												this._getParent().addClass(this.options.classes.parent.open);

												this._lock = false;

												this._trigger('open');
										});
								});

								this.___keydown();
						}
				}, {
						key: 'close',
						value: function close() {

								if (this._lock || !this._isOpen) return;

								this._lock = true;
								this._isOpen = false;

								this._frame(function () {

										this.$overlay.removeClass(this.options.classes.open);
										this._getParent().removeClass(this.options.classes.parent.open);

										this._delay(function () {

												this.$overlay.removeClass(this.options.classes.show);
												this._getParent().removeClass(this.options.classes.parent.show);

												this._lock = false;

												this._trigger('close');
										}, this.options.animations.close);
								});

								this._reset();
						}
				}]);

				return Overlay;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(Overlay, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Animations);

/* =========================================================================
 * Svelto - Widgets - Spinner - Overlay
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/colors/colors.js
 * @require widgets/overlay/overlay.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory, Colors) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'spinnerOverlay',
				plugin: true,
				templates: {
						overlay: '<div class="overlay spinner-overlay <%= o.dimmer ? "dimmer" : "" %>">' + '<% if ( o.labeled ) { %>' + '<div class="spinner-label <%= o.colors.labeled %>">' + '<% } %>' + '<svg class="spinner <%= ( o.multicolor ? "multicolor" : ( o.labeled ? "" : o.unlabeled ) ) %>">' + '<circle cx="1.625em" cy="1.625em" r="1.25em">' + '</svg>' + '<% if ( o.labeled ) { %>' + '</div>' + '<% } %>' + '</div>'
				},
				options: {
						labeled: true,
						dimmer: true,
						multicolor: false,
						colors: {
								labeled: Colors.white,
								unlabeled: Colors.secondary
						},
						callbacks: {
								open: _.noop,
								close: _.noop
						}
				}
		};

		/* SPINNER OVERLAY */

		var SpinnerOverlay = function (_Widgets$Widget16) {
				_inherits(SpinnerOverlay, _Widgets$Widget16);

				function SpinnerOverlay() {
						_classCallCheck(this, SpinnerOverlay);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(SpinnerOverlay).apply(this, arguments));
				}

				_createClass(SpinnerOverlay, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this.$overlayed = this.$element;
								this.$overlay = $(this._template('overlay', this.options));

								this.instance = this.$overlay.overlay('instance');
						}

						/* API */

				}, {
						key: 'isOpen',
						value: function isOpen() {

								return this.instance.isOpen();
						}
				}, {
						key: 'toggle',
						value: function toggle() {
								var force = arguments.length <= 0 || arguments[0] === undefined ? !this.isOpen() : arguments[0];


								if (!!force !== this.isOpen()) {

										this[force ? 'open' : 'close']();
								}
						}
				}, {
						key: 'open',
						value: function open() {

								if (this._lock || this.isOpen()) return;

								this.$overlay.prependTo(this.$overlayed);

								this.instance.open();

								this._trigger('open');
						}
				}, {
						key: 'close',
						value: function close() {

								if (this._lock || !this.isOpen()) return;

								this._lock = true;

								this.instance.close();

								this._delay(function () {

										this.$overlay.detach();

										this._lock = false;

										this._trigger('close');
								}, Widgets.Overlay.config.options.animations.close);
						}
				}]);

				return SpinnerOverlay;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(SpinnerOverlay, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Colors);

/* =========================================================================
* Svelto - Widgets - Progressbar
* =========================================================================
* Copyright (c) 2015-2016 Fabio Spampinato
* Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
* =========================================================================
* @require core/widget/widget.js
* ========================================================================= */

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'progressbar',
				plugin: true,
				selector: '.progressbar',
				templates: {
						base: '<div class="progressbar <%= o.striped ? "striped" : "" %> <%= o.indeterminate ? "indeterminate" : "" %> <%= o.labeled ? "labeled" : "" %> <%= o.colors.off %> <%= o.size %> <%= o.css %>">' + '<div class="progressbar-highlight <%= o.colors.on %>"></div>' + '</div>'
				},
				options: {
						value: 0, // Percentage
						colors: { // Colors to use for the progressbar
								on: '', // Color of `.progressbar-highlight`
								off: '' // Color of `.progressbar`
						},
						striped: false, // Draw striped over it
						indeterminate: false, // Indeterminate state
						labeled: false, // Draw a label inside
						decimals: 0, // Amount of decimals to round the label value to
						size: '', // Size of the progressbar: '', 'compact', 'slim'
						css: '',
						datas: {
								value: 'value',
								decimals: 'decimals'
						},
						selectors: {
								highlight: '.progressbar-highlight'
						},
						callbacks: {
								change: _.noop,
								empty: _.noop,
								full: _.noop
						}
				}
		};

		/* PROGRESSBAR */

		var Progressbar = function (_Widgets$Widget17) {
				_inherits(Progressbar, _Widgets$Widget17);

				function Progressbar() {
						_classCallCheck(this, Progressbar);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Progressbar).apply(this, arguments));
				}

				_createClass(Progressbar, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this.$progressbar = this.$element;
								this.$highlight = this.$progressbar.find(this.options.selectors.highlight);
						}
				}, {
						key: '_init',
						value: function _init() {

								/* OPTIONS */

								this.options.value = this._sanitizeValue(this.$progressbar.data(this.options.datas.value) || this.options.value);
								this.options.decimals = Number(this.$progressbar.data(this.options.datas.decimals) || this.options.decimals);

								/* UPDATE */

								this._update();
						}

						/* VALUE */

				}, {
						key: '_sanitizeValue',
						value: function _sanitizeValue(value) {

								var nr = Number(value);

								return _.clamp(_.isNaN(nr) ? 0 : nr, 0, 100);
						}
				}, {
						key: '_roundValue',
						value: function _roundValue(value) {

								return Number(value.toFixed(this.options.decimals));
						}

						/* UPDATE */

				}, {
						key: '_updateWidth',
						value: function _updateWidth() {

								this.$highlight.css('min-width', this.options.value + '%');
						}
				}, {
						key: '_updateLabel',
						value: function _updateLabel() {

								this.$highlight.attr('data-' + this.options.datas.value, this._roundValue(this.options.value) + '%');
						}
				}, {
						key: '_update',
						value: function _update() {

								this._updateWidth();
								this._updateLabel();
						}

						/* API */

				}, {
						key: 'get',
						value: function get() {

								return this.options.value;
						}
				}, {
						key: 'set',
						value: function set(value) {

								value = this._sanitizeValue(value);

								if (value === this.options.value) return;

								this.options.value = value;

								this._update();

								this._trigger('change');

								if (this.options.value === 0) {

										this._trigger('empty');
								} else if (this.options.value === 100) {

										this._trigger('full');
								}
						}
				}]);

				return Progressbar;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(Progressbar, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Progressbar (Helper)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ./progressbar.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets) {

		'use strict';

		/* HELPER */

		$.progressbar = function (options) {

				options = _.isNumber(options) ? { value: options } : options;

				return new Widgets.Progressbar(options);
		};
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets);

/* =========================================================================
 * Svelto - Widgets - Rails
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/animations/animations.js
 * @require core/widget/widget.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory, Animations, Pointer) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'rails',
				plugin: true,
				selector: '.rails',
				options: {
						navigation: {
								hidable: false // Controls whether the navigation should be hidden when all the buttons are disabled
						},
						scroll: {
								speed: 200 // The distance scrolled when calling `left` or `right`
						},
						selectors: {
								start: '.rails-start',
								left: '.rails-left',
								right: '.rails-right',
								end: '.rails-end',
								navigation: '.rails-navigation, .rails-start, .rails-left, .rails-right, .rails-end',
								content: '.rails-content',
								active: '.rails-active'
						},
						animations: {
								scroll: Animations.fast
						},
						keystrokes: {
								'home, page_up': 'start',
								'left': 'left',
								'right': 'right',
								'end, page_down': 'end'
						}
				}
		};

		/* RAILS */

		var Rails = function (_Widgets$Widget18) {
				_inherits(Rails, _Widgets$Widget18);

				function Rails() {
						_classCallCheck(this, Rails);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Rails).apply(this, arguments));
				}

				_createClass(Rails, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this.$rails = this.$element;

								this.$start = this.$rails.find(this.options.selectors.start);
								this.$left = this.$rails.find(this.options.selectors.left);
								this.$right = this.$rails.find(this.options.selectors.right);
								this.$end = this.$rails.find(this.options.selectors.end);
								this.$navigation = this.$rails.find(this.options.selectors.navigation);
								this.$content = this.$rails.find(this.options.selectors.content);
								this.$active = this.$content.find(this.options.selectors.active);
						}
				}, {
						key: '_init',
						value: function _init() {

								this._scrollToElement(this.$active);
								this._updateNavigation();
						}
				}, {
						key: '_events',
						value: function _events() {

								this.___keydown();
								this.___resize();
								this.___scroll();
								this.___startTap();
								this.___leftTap();
								this.___rightTap();
								this.___endTap();
						}

						/* KEYDOWN */

				}, {
						key: '___keydown',
						value: function ___keydown() {

								this._onHover([this.$document, 'keydown', this.__keydown]);
						}

						/* START TAP */

				}, {
						key: '___startTap',
						value: function ___startTap() {

								this._on(this.$start, Pointer.tap, this.start);
						}

						/* LEFT TAP */

				}, {
						key: '___leftTap',
						value: function ___leftTap() {

								this._on(this.$left, Pointer.tap, this.left);
						}

						/* RIGHT TAP */

				}, {
						key: '___rightTap',
						value: function ___rightTap() {

								this._on(this.$right, Pointer.tap, this.right);
						}

						/* END TAP */

				}, {
						key: '___endTap',
						value: function ___endTap() {

								this._on(this.$end, Pointer.tap, this.end);
						}

						/* UPDATE */

				}, {
						key: '_updateNavigation',
						value: function _updateNavigation() {

								if (!this.$navigation.length) return;

								var scrollLeft = this.$content.scrollLeft(),
								    isStart = scrollLeft === 0,
								    isEnd = this.$content[0].scrollWidth - scrollLeft - this.$content.outerWidth() <= 1; // If we use `0`, as we should` it won't always trigger

								if (this.$start.length || this.$left.length) {

										this.$start.add(this.$left).toggleClass(this.options.classes.disabled, isStart);
								}

								if (this.$end.length || this.$right.length) {

										this.$end.add(this.$right).toggleClass(this.options.classes.disabled, isEnd);
								}

								if (this.options.navigation.hidable) {

										var hidable = isStart && isEnd;

										this.$navigation.toggleClass(this.options.classes.hidden, hidable);
								}
						}

						/* RESIZE */

				}, {
						key: '___resize',
						value: function ___resize() {

								this._on(true, this.$window, 'resize', this._throttle(this._updateNavigation, Math.max(this.options.animations.scroll || 100)));
						}

						/* SCROLL */

				}, {
						key: '___scroll',
						value: function ___scroll() {

								this._on(true, this.$content, 'scroll', this._throttle(this._updateNavigation, Math.max(this.options.animations.scroll || 100)));
						}
				}, {
						key: '_scroll',
						value: function _scroll(left) {

								this.$content.animate({ scrollLeft: left }, this.options.animations.scroll);
						}
				}, {
						key: '_deltaScroll',
						value: function _deltaScroll(delta) {

								this._scroll(this.$content.scrollLeft() + delta);
						}
				}, {
						key: '_scrollToElement',
						value: function _scrollToElement($element) {

								if (!$element.length) return;

								var left = $element.position().left + this.$content.scrollLeft() + $element.outerWidth() / 2 - this.$content.outerWidth() / 2;

								this._scroll(left);
						}

						/* API */

				}, {
						key: 'start',
						value: function start() {

								this._scroll(0);
						}
				}, {
						key: 'left',
						value: function left() {

								this._deltaScroll(-this.options.scroll.speed);
						}
				}, {
						key: 'right',
						value: function right() {

								this._deltaScroll(this.options.scroll.speed);
						}
				}, {
						key: 'end',
						value: function end() {

								this._scroll(this.$content[0].scrollWidth);
						}
				}]);

				return Rails;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(Rails, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Animations, Svelto.Pointer);

/* =========================================================================
 * Svelto - Widgets - Remote
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/widget/widget.js
 * ========================================================================= */

//TODO: Add locking capabilities

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'remote',
				options: {
						ajax: { // Options to pass to `$.ajax`
								cache: true, // If set to false, it will force the requested url not to be cached by the browser
								method: 'GET', // Method of the remote request
								timeout: 31000 // 1 second more than the default value of PHP's `max_execution_time` setting
						},
						callbacks: {
								beforesend: _.noop,
								complete: _.noop,
								error: _.noop,
								success: _.noop,
								abort: _.noop
						}
				}
		};

		/* REMOTE */

		var Remote = function (_Widgets$Widget19) {
				_inherits(Remote, _Widgets$Widget19);

				function Remote() {
						_classCallCheck(this, Remote);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Remote).apply(this, arguments));
				}

				_createClass(Remote, [{
						key: '_reset',


						/* SPECIAL */

						value: function _reset() {

								this.abort();

								_get(Object.getPrototypeOf(Remote.prototype), '_reset', this).call(this);
						}

						/* REQUEST HANDLERS */

				}, {
						key: '__beforesend',
						value: function __beforesend(res) {

								if (this.isAborted()) return;

								this._trigger('beforesend', res);
						}
				}, {
						key: '__complete',
						value: function __complete(res) {

								if (this.isAborted()) return;

								this._trigger('complete', res);
						}
				}, {
						key: '__error',
						value: function __error(res) {

								if (this.isAborted()) return;

								this._trigger('error', res);
						}
				}, {
						key: '__success',
						value: function __success(res) {

								if (this.isAborted()) return;

								this._trigger('success', res);
						}
				}, {
						key: '__abort',
						value: function __abort() {

								this._trigger('abort');
						}

						/* API */

				}, {
						key: 'isRequesting',
						value: function isRequesting() {

								return !!this.xhr && !_.includes([0, 4], this.xhr.readyState); // 0: UNSENT, 4: DONE
						}
				}, {
						key: 'request',
						value: function request() {

								this._isAborted = false;

								this.xhr = $.ajax(_.extend({}, this.options.ajax, {
										beforeSend: this.__beforesend.bind(this),
										complete: this.__complete.bind(this),
										error: this.__error.bind(this),
										success: this.__success.bind(this)
								}));
						}
				}, {
						key: 'isAborted',
						value: function isAborted() {

								return !!this._isAborted;
						}
				}, {
						key: 'abort',
						value: function abort() {

								if (!this.xhr || !this.isRequesting()) return;

								this._isAborted = true;

								this.xhr.abort();

								this.__abort();
						}
				}]);

				return Remote;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(Remote, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Remote (Trigger)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/widget/widget.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory, Pointer) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'remoteTrigger',
				options: {
						widget: false, // The `Remote` widget class to call
						ajax: {}, // Using as `new widget ( ajax )`
						attributes: {
								href: 'href' // In order to better support `a` elements (the data value has higher priority)
						},
						datas: {
								url: 'url',
								data: 'data',
								method: 'method'
						}
				}
		};

		/* REMOTE TRIGGER */

		var RemoteTrigger = function (_Widgets$Widget20) {
				_inherits(RemoteTrigger, _Widgets$Widget20);

				function RemoteTrigger() {
						_classCallCheck(this, RemoteTrigger);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(RemoteTrigger).apply(this, arguments));
				}

				_createClass(RemoteTrigger, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this.$trigger = this.$element;

								/* OPTIONS */

								this.options.ajax.url = this.$trigger.data(this.options.datas.url) || this.$trigger.attr(this.options.attributes.href) || this.options.ajax.url;
								this.options.ajax.data = this.$trigger.data(this.options.datas.data) || this.options.ajax.data;
								this.options.ajax.method = this.$trigger.data(this.options.datas.method) || this.options.ajax.method;
						}
				}, {
						key: '_events',
						value: function _events() {

								this.___tap();
						}

						/* TAP */

				}, {
						key: '___tap',
						value: function ___tap() {

								this._on(Pointer.tap, this.trigger);
						}

						/* API */

				}, {
						key: 'trigger',
						value: function trigger() {

								new this.options.widget({ ajax: this.options.ajax }).request();
						}
				}]);

				return RemoteTrigger;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(RemoteTrigger, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Pointer);

/* =========================================================================
 * Svelto - Widgets - Ripple
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/animations/animations.js
 * @require core/browser/browser.js
 * @require core/widget/widget.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory, Browser, Pointer, Animations) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'ripple',
				plugin: true,
				selector: '.ripple',
				templates: {
						circle: '<div class="ripple-circle"></div>'
				},
				options: {
						classes: {
								circle: {
										show: 'show',
										hide: 'hide'
								},
								center: 'ripple-center'
						},
						animations: {
								show: Animations.xslow,
								hide: Animations.xslow,
								overlap: Animations.xslow / 100 * 58 // Used for triggering the hide animation while still opening, for a better visual effect
						},
						callbacks: {
								show: _.noop,
								hide: _.noop
						}
				}
		};

		/* RIPPLE */

		var Ripple = function (_Widgets$Widget21) {
				_inherits(Ripple, _Widgets$Widget21);

				function Ripple() {
						_classCallCheck(this, Ripple);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Ripple).apply(this, arguments));
				}

				_createClass(Ripple, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this.$ripple = this.$element;

								this.circles = [];
						}
				}, {
						key: '_events',
						value: function _events() {

								this.___downTap();
						}

						/* DOWN / TAP */

				}, {
						key: '___downTap',
						value: function ___downTap() {

								// Touch devices triggers a `Pointer.down` event, but maybe they will just scroll the page, more appropriate to bind on `Pointer.tap`

								this._on(Browser.is.touchDevice ? Pointer.tap : Pointer.down, this.__downTap);
						}
				}, {
						key: '__downTap',
						value: function __downTap(event) {

								if (this.$ripple.hasClass(this.options.classes.center)) {

										var offset = this.$ripple.offset();

										this._show({
												x: offset.left + this.$ripple.outerWidth() / 2,
												y: offset.top + this.$ripple.outerHeight() / 2
										});
								} else {

										this._show($.eventXY(event));
								}

								this._one(true, this.$document, Pointer.up, this.__up);
						}

						/* UP */

				}, {
						key: '__up',
						value: function __up() {
								var _iteratorNormalCompletion10 = true;
								var _didIteratorError10 = false;
								var _iteratorError10 = undefined;

								try {

										for (var _iterator10 = this.circles[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
												var _step10$value = _slicedToArray(_step10.value, 2);

												var $circle = _step10$value[0];
												var timestamp = _step10$value[1];


												this._hide($circle, timestamp);
										}
								} catch (err) {
										_didIteratorError10 = true;
										_iteratorError10 = err;
								} finally {
										try {
												if (!_iteratorNormalCompletion10 && _iterator10.return) {
														_iterator10.return();
												}
										} finally {
												if (_didIteratorError10) {
														throw _iteratorError10;
												}
										}
								}

								this.circles = [];
						}

						/* SHOW */

				}, {
						key: '_show',
						value: function _show(XY) {

								var $circle = $(this._template('circle'));

								/* SIZE */

								var offset = this.$ripple.offset(),
								    insetX = XY.x - offset.left,
								    insetY = XY.y - offset.top,
								    sideX = Math.max(insetX, this.$ripple.outerWidth() - insetX),
								    sideY = Math.max(insetY, this.$ripple.outerHeight() - insetY),
								    radius = Math.sqrt(Math.pow(sideX, 2) + Math.pow(sideY, 2)),
								    // Basically the max the distances from the point to the corners
								diameter = radius * 2;

								/* ADDING */

								this.circles.push([$circle, _.now()]);

								/* SHOW */

								this._frame(function () {

										/* PREPEND */

										$circle.css({
												width: diameter,
												height: diameter,
												top: insetY,
												left: insetX
										}).prependTo(this.$ripple);

										/* SHOW */

										this._frame(function () {

												$circle.addClass(this.options.classes.circle.show);

												this._trigger('show');
										});
								});
						}

						/* HIDE */

				}, {
						key: '_hide',
						value: function _hide($circle, timestamp) {

								var remaining = Math.max(0, this.options.animations.show - this.options.animations.overlap + timestamp - _.now());

								this._delay(function () {

										$circle.addClass(this.options.classes.circle.hide);

										this._delay(function () {

												$circle.remove();

												this._trigger('hide');
										}, this.options.animations.hide);
								}, remaining);
						}
				}]);

				return Ripple;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(Ripple, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Browser, Svelto.Pointer, Svelto.Animations);

/* =========================================================================
 * Svelto - Widgets - Table - Sortable
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/widget/widget.js
 * ========================================================================= */

//TODO: Better performance with tableHelper, just put the new addded row in the right position, performance boost

(function ($, _, Svelto, Widgets, Factory, Pointer) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'tableSortable',
				plugin: true,
				selector: 'table.sortable:not(.datatable)',
				options: {
						sorters: {
								int: function int(a, b) {
										return parseInt(a, 10) - parseInt(b, 10);
								},
								float: function float(a, b) {
										return parseFloat(a) - parseFloat(b);
								},
								string: function string(a, b) {
										a = a.toLocaleLowerCase();
										b = b.toLocaleLowerCase();
										return a.localeCompare(b);
								}
						},
						datas: {
								sorter: 'sort',
								value: 'sort-value'
						},
						classes: {
								sort: {
										asc: 'sort-asc',
										desc: 'sort-desc'
								}
						},
						selectors: {
								header: 'thead th',
								sortable: '[data-sort]',
								body: 'tbody',
								notEmptyRow: 'tr:not(.table-row-empty)',
								rowCell: 'td'
						},
						callbacks: {
								sort: _.noop
						}
				}
		};

		/* TABLE SORTABLE */

		var TableSortable = function (_Widgets$Widget22) {
				_inherits(TableSortable, _Widgets$Widget22);

				function TableSortable() {
						_classCallCheck(this, TableSortable);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(TableSortable).apply(this, arguments));
				}

				_createClass(TableSortable, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this.$table = this.$element;
								this.$headers = this.$table.find(this.options.selectors.header);
								this.$sortables = this.$headers.filter(this.options.selectors.sortable);
								this.$tbody = this.$table.find(this.options.selectors.body);

								this.table = this.element;
								this.tbody = this.$tbody[0];

								this.sortData = {}; // Caching object for datas and references to rows
								this.isDirty = true;

								this.$currentSortable = false;
								this.currentIndex = false; // `$headers` index, not `$sortables` index
								this.currentDirection = false;
						}
				}, {
						key: '_init',
						value: function _init() {

								var $initial = this.$headers.filter('.' + this.options.classes.sort.asc + ', .' + this.options.classes.sort.desc).first();

								if ($initial.length === 1) {

										this.sort(this.$headers.index($initial), $initial.hasClass(this.options.classes.sort.asc) ? 'asc' : 'desc');
								}
						}
				}, {
						key: '_events',
						value: function _events() {

								this.___change();
								this.___tap();
						}

						/* CHANGE */

				}, {
						key: '___change',
						value: function ___change() {

								this._on(true, 'change tablehelper:change', this.__change);
						}
				}, {
						key: '__change',
						value: function __change() {

								if (this.currentIndex !== false) {

										this.sortData = {};
										this.isDirty = true;

										this.sort(this.currentIndex, this.currentDirection);
								}
						}

						/* TAP */

				}, {
						key: '___tap',
						value: function ___tap() {

								this._on(this.$sortables, Pointer.tap, this.__tap);
						}
				}, {
						key: '__tap',
						value: function __tap(event) {

								var newIndex = this.$headers.index(event.target),
								    newDirection = this.currentIndex === newIndex ? this.currentDirection === 'asc' ? 'desc' : 'asc' : 'asc';

								this.sort(newIndex, newDirection);
						}

						/* SORT */

				}, {
						key: 'sort',
						value: function sort(index, direction) {

								/* VALIDATE */

								var $sortable = this.$headers.eq(index);

								if (!$sortable.length) return; // Bad index

								var sorterName = $sortable.data(this.options.datas.sorter);

								if (!sorterName) return; // Unsortable column

								var sorter = this.options.sorters[sorterName];

								if (!sorter) return; // Unsupported sorter

								direction = direction && direction.toLowerCase() === 'desc' ? 'desc' : 'asc';

								/* CHECKING CACHED DATAS */

								if (_.isUndefined(this.sortData[index]) || this.isDirty) {

										/* VARIABLES */

										var $trs = this.$tbody.find(this.options.selectors.notEmptyRow);

										this.sortData[index] = new Array($trs.length);

										/* POPULATE */

										for (var i = 0, l = $trs.length; i < l; i++) {

												var $td = $trs.eq(i).find(this.options.selectors.rowCell).eq(index),
												    value = $td.data(this.options.datas.value) || $td.text();

												this.sortData[index][i] = [$trs[i], value];
										}
								}

								/* SORT */

								if (index !== this.currentIndex || this.isDirty) {

										this.sortData[index].sort(function (a, b) {

												return sorter(a[1], b[1]);
										});
								}

								/* REVERSING */

								var needReversing = false;

								if (!this.isDirty && index === this.currentIndex && this.currentDirection !== false) {

										needReversing = direction !== this.currentDirection;
								} else {

										needReversing = direction === 'desc';
								}

								if (needReversing) {

										this.sortData[index].reverse();
								}

								/* REORDER */

								if (index !== this.currentIndex || direction !== this.currentDirection || this.isDirty) {

										this.table.removeChild(this.tbody); // Detach

										for (var _i = 0, _l = this.sortData[index].length; _i < _l; _i++) {

												this.tbody.appendChild(this.sortData[index][_i][0]); // Reorder
										}

										this.table.appendChild(this.tbody); // Attach
								}

								/* STYLE */

								if (index !== this.currentIndex || direction !== this.currentDirection) {

										if (this.$currentSortable) {

												this.$currentSortable.removeClass(this.options.classes.sort[this.currentDirection]);
										}

										$sortable.addClass(this.options.classes.sort[direction]);
								}

								/* UPDATE */

								this.isDirty = false;

								this.$currentSortable = $sortable;
								this.currentIndex = index;
								this.currentDirection = direction;

								/* TRIGGER */

								this._trigger('sort', {
										index: this.currentIndex,
										direction: this.currentDirection
								});
						}
				}]);

				return TableSortable;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(TableSortable, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Pointer);

/* =========================================================================
 * Svelto - Widgets - Table Helper
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/widget/widget.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'tableHelper',
				plugin: true,
				selector: 'table.table',
				templates: {
						row: '<tr <%= o.id ? "class=" + o.id : "" %> >' + '<% for ( var i = 0, l = o.datas.length; i < l; i++ ) { %>' + '<td>' + '<%= o.datas[i] %>' + '</td>' + '<% } %>' + '<% for ( var i = 0, l = o.missing; i < l; i++ ) { %>' + '<td></td>' + '<% } %>' + '</tr>'
				},
				options: {
						rowIdPrefix: 'srid',
						selectors: {
								header: 'thead',
								body: 'tbody',
								headerCell: 'th',
								rowCell: 'td',
								emptyRow: 'tr.table-row-empty',
								notEmptyRow: 'tr:not(.table-row-empty)'
						},
						callbacks: {
								change: _.noop,
								add: _.noop,
								update: _.noop,
								remove: _.noop,
								clear: _.noop
						}
				}
		};

		/* TABLE HELPER */

		var TableHelper = function (_Widgets$Widget23) {
				_inherits(TableHelper, _Widgets$Widget23);

				function TableHelper() {
						_classCallCheck(this, TableHelper);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(TableHelper).apply(this, arguments));
				}

				_createClass(TableHelper, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this.$table = this.$element;
								this.$header = this.$table.find(this.options.selectors.header);
								this.$body = this.$table.find(this.options.selectors.body);
								this.$headerCells = this.$header.find(this.options.selectors.headerCell);
								this.$emptyRow = this.$body.find(this.options.selectors.emptyRow);

								this.columnsNr = this.$headerCells.length;
						}

						/* PRIVATE */

				}, {
						key: '_getRowId',
						value: function _getRowId(id) {

								return this.options.rowIdPrefix + '-' + this.guid + '-' + id;
						}

						/* API */

				}, {
						key: 'add',
						value: function add(id) {

								var rowId = id ? this._getRowId(id) : false;

								for (var _len4 = arguments.length, datas = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
										datas[_key4 - 1] = arguments[_key4];
								}

								if (datas.length) {

										if (rowId && $('.' + rowId).length === 1) return this;

										var chunks = _.chunk(datas, this.columnsNr),
										    $rows = $();

										var _iteratorNormalCompletion11 = true;
										var _didIteratorError11 = false;
										var _iteratorError11 = undefined;

										try {
												for (var _iterator11 = chunks[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
														var chunk = _step11.value;


														var rowHtml = this._template('row', { id: rowId, datas: chunk, missing: this.columnsNr - chunk.length });

														$rows = $rows.add(rowHtml);
												}
										} catch (err) {
												_didIteratorError11 = true;
												_iteratorError11 = err;
										} finally {
												try {
														if (!_iteratorNormalCompletion11 && _iterator11.return) {
																_iterator11.return();
														}
												} finally {
														if (_didIteratorError11) {
																throw _iteratorError11;
														}
												}
										}

										this.$body.append($rows);

										this._trigger('change');

										this._trigger('add', {
												$rows: $rows
										});
								}
						}
				}, {
						key: 'update',
						value: function update(id) {

								var $row = $('.' + this._getRowId(id));

								for (var _len5 = arguments.length, datas = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
										datas[_key5 - 1] = arguments[_key5];
								}

								if (datas.length && $row.length === 1) {

										var $rowCells = $row.find(this.options.selectors.rowCell);

										for (var i = 0, l = datas.length; i < l; i++) {

												if (_.isString(datas[i])) {

														$rowCells.eq(i).html(datas[i]);
												}
										}

										this._trigger('change');

										this._trigger('update', {
												$row: $row
										});
								}
						}
				}, {
						key: 'remove',
						value: function remove(id) {

								var $row = $('.' + this._getRowId(id));

								if ($row.length === 1) {

										$row.remove();

										this._trigger('change');

										this._trigger('remove', {
												$row: $row
										});
								}
						}
				}, {
						key: 'clear',
						value: function clear() {

								var $rows = this.$body.find(this.options.selectors.notEmptyRow);

								if ($rows.length) {

										$rows.remove();

										this._trigger('change');

										this._trigger('clear', {
												$rows: $rows
										});
								}
						}
				}]);

				return TableHelper;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(TableHelper, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Targeter
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/widget/widget.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'targeter',
				options: {
						widget: false, // The target's widget class
						target: false, // Selector used to select the target
						datas: {
								target: 'target'
						}
				}
		};

		/* TARGETER */

		var Targeter = function (_Widgets$Widget24) {
				_inherits(Targeter, _Widgets$Widget24);

				function Targeter() {
						_classCallCheck(this, Targeter);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Targeter).apply(this, arguments));
				}

				_createClass(Targeter, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this._targetSelector = this.options.target || this.$element.data(this.options.datas.target);

								this.$target = this._targetSelector ? $(this._targetSelector) : this.$element.closest(this.options.widget.config.selector);

								if (!this.$target.length) return false;

								this._targetInstance = this.$target[this.options.widget.config.name]('instance');
						}
				}, {
						key: '_events',
						value: function _events() {

								this.___targetRemove();
						}

						/* TARGET REMOVE */

				}, {
						key: '___targetRemove',
						value: function ___targetRemove() {

								this._on(true, this.$target, 'remove', this.__targetRemove);
						}
				}, {
						key: '__targetRemove',
						value: function __targetRemove() {

								this.__remove();
						}
				}]);

				return Targeter;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(Targeter, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Targeter - Closer
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../targeter.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory, Pointer) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'closer',
				options: {
						methods: {
								isOpen: 'isOpen',
								close: 'close'
						}
				}
		};

		/* CLOSER */

		var Closer = function (_Widgets$Targeter) {
				_inherits(Closer, _Widgets$Targeter);

				function Closer() {
						_classCallCheck(this, Closer);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Closer).apply(this, arguments));
				}

				_createClass(Closer, [{
						key: '_events',


						/* SPECIAL */

						value: function _events() {

								this.___targetRemove();
								this.___tap();
						}

						/* TAP */

				}, {
						key: '___tap',
						value: function ___tap() {

								this._on(Pointer.tap, this.__tap);
						}
				}, {
						key: '__tap',
						value: function __tap(event) {

								this.close(event);
						}

						/* API */

				}, {
						key: 'isOpen',
						value: function isOpen() {

								return this._targetInstance[this.options.methods.isOpen]();
						}
				}, {
						key: 'close',
						value: function close(event) {

								return this._targetInstance[this.options.methods.close](this.element, event);
						}
				}]);

				return Closer;
		}(Widgets.Targeter);

		/* FACTORY */

		Factory.init(Closer, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Pointer);

/* =========================================================================
 * Svelto - Widgets - Expander - Targeters - Closer
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../expander.js
 * @require widgets/targeter/closer/closer.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'expanderCloser',
				plugin: true,
				selector: '.expander-closer',
				options: {
						widget: Widgets.Expander
				}
		};

		/* EXPANDER CLOSER */

		var ExpanderCloser = function (_Widgets$Closer) {
				_inherits(ExpanderCloser, _Widgets$Closer);

				function ExpanderCloser() {
						_classCallCheck(this, ExpanderCloser);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(ExpanderCloser).apply(this, arguments));
				}

				return ExpanderCloser;
		}(Widgets.Closer);

		/* FACTORY */

		Factory.init(ExpanderCloser, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Infobar - Targeters - Closer
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../infobar.js
 * @require widgets/targeter/closer/closer.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'infobarCloser',
				plugin: true,
				selector: '.infobar-closer',
				options: {
						widget: Widgets.Infobar
				}
		};

		/* INFOBAR CLOSER */

		var InfobarCloser = function (_Widgets$Closer2) {
				_inherits(InfobarCloser, _Widgets$Closer2);

				function InfobarCloser() {
						_classCallCheck(this, InfobarCloser);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(InfobarCloser).apply(this, arguments));
				}

				return InfobarCloser;
		}(Widgets.Closer);

		/* FACTORY */

		Factory.init(InfobarCloser, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Modal - Targeters - Closer
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../modal.js
 * @require widgets/targeter/closer/closer.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'modalCloser',
				plugin: true,
				selector: '.modal-closer',
				options: {
						widget: Widgets.Modal
				}
		};

		/* MODAL CLOSER */

		var ModalCloser = function (_Widgets$Closer3) {
				_inherits(ModalCloser, _Widgets$Closer3);

				function ModalCloser() {
						_classCallCheck(this, ModalCloser);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(ModalCloser).apply(this, arguments));
				}

				return ModalCloser;
		}(Widgets.Closer);

		/* FACTORY */

		Factory.init(ModalCloser, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Overlay - Targeters - Closer
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../overlay.js
 * @require widgets/targeter/closer/closer.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'overlayCloser',
				plugin: true,
				selector: '.overlay-closer',
				options: {
						widget: Widgets.Overlay
				}
		};

		/* OVERLAY CLOSER */

		var OverlayCloser = function (_Widgets$Closer4) {
				_inherits(OverlayCloser, _Widgets$Closer4);

				function OverlayCloser() {
						_classCallCheck(this, OverlayCloser);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(OverlayCloser).apply(this, arguments));
				}

				return OverlayCloser;
		}(Widgets.Closer);

		/* FACTORY */

		Factory.init(OverlayCloser, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Targeter - Opener
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../closer/closer.js
 * @require core/browser/browser.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory, Browser, Pointer) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'opener',
				options: {
						hover: {
								active: false,
								delays: {
										open: 750,
										close: 250
								}
						},
						methods: {
								open: 'open'
						}
				}
		};

		/* OPENER */

		var Opener = function (_Widgets$Closer5) {
				_inherits(Opener, _Widgets$Closer5);

				function Opener() {
						_classCallCheck(this, Opener);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Opener).apply(this, arguments));
				}

				_createClass(Opener, [{
						key: '_events',


						/* SPECIAL */

						value: function _events() {

								this.___targetRemove();
								this.___tap();
								this.___hover();
						}

						/* TAP */

				}, {
						key: '___tap',
						value: function ___tap() {

								this._on(Pointer.tap, this.__tap);
						}
				}, {
						key: '__tap',
						value: function __tap(event) {

								this.open(event);
						}

						/* HOVER */

				}, {
						key: '___hover',
						value: function ___hover() {

								if (this.options.hover.active && !Browser.is.touchDevice) {

										this._on(Pointer.enter, this.__hoverEnter);
								}
						}
				}, {
						key: '__hoverEnter',
						value: function __hoverEnter() {

								if (!this.isOpen()) {

										this._isHoverOpen = false;

										this._hoverOpenTimeout = this._delay(this.__hoverOpen, this.options.hover.delays.open);

										this._one(true, Pointer.leave, this.__hoverLeave);
								} else if (this._isHoverOpen) {

										if (this._hoverCloseTimeout) {

												clearTimeout(this._hoverCloseTimeout);

												this._hoverCloseTimeout = false;
										}

										this._one(true, Pointer.leave, this.__hoverLeave);
								}
						}
				}, {
						key: '__hoverOpen',
						value: function __hoverOpen() {

								if (!this.isOpen()) {

										this.open();

										this._isHoverOpen = true;
								}

								this._hoverOpenTimeout = false;
						}
				}, {
						key: '__hoverLeave',
						value: function __hoverLeave() {

								if (this._hoverOpenTimeout) {

										clearTimeout(this._hoverOpenTimeout);

										this._hoverOpenTimeout = false;
								}

								if (this.isOpen() && this._isHoverOpen) {

										this._hoverCloseTimeout = this._delay(this.__hoverClose, this.options.hover.delays.close);

										this._one(true, this.$target, Pointer.enter, this.__hoverTargetEnter);
								}
						}
				}, {
						key: '__hoverClose',
						value: function __hoverClose() {

								if (this.isOpen() && this._isHoverOpen) {

										this.close();
								}

								this._isHoverOpen = false;

								this._hoverCloseTimeout = false;

								this._off(this.$target, Pointer.enter, this.__hoverTargetEnter);
						}
				}, {
						key: '__hoverTargetEnter',
						value: function __hoverTargetEnter() {

								if (this._hoverCloseTimeout) {

										clearTimeout(this._hoverCloseTimeout);

										this._hoverCloseTimeout = false;
								}

								if (this.isOpen() && this._isHoverOpen) {

										this._one(true, this.$target, Pointer.leave, this.__hoverTargetLeave);
								}
						}
				}, {
						key: '__hoverTargetLeave',
						value: function __hoverTargetLeave() {

								if (this.isOpen() && this._isHoverOpen) {

										this._hoverCloseTimeout = this._delay(this.__hoverClose, this.options.hover.delays.close);

										this._one(true, this.$target, Pointer.enter, this.__hoverTargetEnter);
								}
						}

						/* API */

				}, {
						key: 'open',
						value: function open(event) {

								return this._targetInstance[this.options.methods.open](this.element, event);
						}
				}]);

				return Opener;
		}(Widgets.Closer);

		/* FACTORY */

		Factory.init(Opener, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Browser, Svelto.Pointer);

/* =========================================================================
 * Svelto - Widgets - Expander - Targeters - Opener
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../expander.js
 * @require widgets/targeter/opener/opener.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'expanderOpener',
				plugin: true,
				selector: '.expander-opener',
				options: {
						widget: Widgets.Expander
				}
		};

		/* EXPANDER OPENER */

		var ExpanderOpener = function (_Widgets$Opener) {
				_inherits(ExpanderOpener, _Widgets$Opener);

				function ExpanderOpener() {
						_classCallCheck(this, ExpanderOpener);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(ExpanderOpener).apply(this, arguments));
				}

				return ExpanderOpener;
		}(Widgets.Opener);

		/* FACTORY */

		Factory.init(ExpanderOpener, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Modal - Targeters - Opener
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../modal.js
 * @require widgets/targeter/opener/opener.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'modalOpener',
				plugin: true,
				selector: '.modal-opener',
				options: {
						widget: Widgets.Modal
				}
		};

		/* MODAL OPENER */

		var ModalOpener = function (_Widgets$Opener2) {
				_inherits(ModalOpener, _Widgets$Opener2);

				function ModalOpener() {
						_classCallCheck(this, ModalOpener);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(ModalOpener).apply(this, arguments));
				}

				return ModalOpener;
		}(Widgets.Opener);

		/* FACTORY */

		Factory.init(ModalOpener, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Overlay - Targeters - Opener
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../overlay.js
 * @require widgets/targeter/opener/opener.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'overlayOpener',
				plugin: true,
				selector: '.overlay-opener',
				options: {
						widget: Widgets.Overlay
				}
		};

		/* OVERLAY OPENER */

		var OverlayOpener = function (_Widgets$Opener3) {
				_inherits(OverlayOpener, _Widgets$Opener3);

				function OverlayOpener() {
						_classCallCheck(this, OverlayOpener);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(OverlayOpener).apply(this, arguments));
				}

				return OverlayOpener;
		}(Widgets.Opener);

		/* FACTORY */

		Factory.init(OverlayOpener, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Targeter - Toggler
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../opener/opener.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'toggler',
				options: {
						methods: {
								toggle: 'toggle'
						}
				}
		};

		/* TOGGLER */

		var Toggler = function (_Widgets$Opener4) {
				_inherits(Toggler, _Widgets$Opener4);

				function Toggler() {
						_classCallCheck(this, Toggler);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Toggler).apply(this, arguments));
				}

				_createClass(Toggler, [{
						key: '__tap',


						/* TAP */

						value: function __tap(event) {

								this.toggle(undefined, event);
						}

						/* API */

				}, {
						key: 'toggle',
						value: function toggle(force, event) {

								return this._targetInstance[this.options.methods.toggle](force, this.element, event);
						}
				}]);

				return Toggler;
		}(Widgets.Opener);

		/* FACTORY */

		Factory.init(Toggler, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Expander - Targeters - Toggler
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../expander.js
 * @require widgets/targeter/toggler/toggler.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'expanderToggler',
				plugin: true,
				selector: '.expander-toggler',
				options: {
						widget: Widgets.Expander
				}
		};

		/* EXPANDER TOGGLER */

		var ExpanderToggler = function (_Widgets$Toggler) {
				_inherits(ExpanderToggler, _Widgets$Toggler);

				function ExpanderToggler() {
						_classCallCheck(this, ExpanderToggler);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(ExpanderToggler).apply(this, arguments));
				}

				return ExpanderToggler;
		}(Widgets.Toggler);

		/* FACTORY */

		Factory.init(ExpanderToggler, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Flippable - Targeters - Flipper
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../flippable.js
 * @require widgets/targeter/toggler/toggler.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'flippableFlipper',
				plugin: true,
				selector: '.flippable-flipper',
				options: {
						widget: Widgets.Flippable,
						methods: {
								toggle: 'flip',
								open: 'front',
								close: 'back'
						}
				}
		};

		/* FLIPPABLE FLIPPER */

		var FlippableFlipper = function (_Widgets$Toggler2) {
				_inherits(FlippableFlipper, _Widgets$Toggler2);

				function FlippableFlipper() {
						_classCallCheck(this, FlippableFlipper);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(FlippableFlipper).apply(this, arguments));
				}

				return FlippableFlipper;
		}(Widgets.Toggler);

		/* FACTORY */

		Factory.init(FlippableFlipper, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Modal - Targeters - Toggler
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../modal.js
 * @require widgets/targeter/toggler/toggler.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'modalToggler',
				plugin: true,
				selector: '.modal-toggler',
				options: {
						widget: Widgets.Modal
				}
		};

		/* MODAL TOGGLER */

		var ModalToggler = function (_Widgets$Toggler3) {
				_inherits(ModalToggler, _Widgets$Toggler3);

				function ModalToggler() {
						_classCallCheck(this, ModalToggler);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(ModalToggler).apply(this, arguments));
				}

				return ModalToggler;
		}(Widgets.Toggler);

		/* FACTORY */

		Factory.init(ModalToggler, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Overlay - Targeters - Toggler
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../overlay.js
 * @require widgets/targeter/toggler/toggler.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'overlayToggler',
				plugin: true,
				selector: '.overlay-toggler',
				options: {
						widget: Widgets.Overlay
				}
		};

		/* OVERLAY TOGGLER */

		var OverlayToggler = function (_Widgets$Toggler4) {
				_inherits(OverlayToggler, _Widgets$Toggler4);

				function OverlayToggler() {
						_classCallCheck(this, OverlayToggler);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(OverlayToggler).apply(this, arguments));
				}

				return OverlayToggler;
		}(Widgets.Toggler);

		/* FACTORY */

		Factory.init(OverlayToggler, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Pointer);

/* =========================================================================
 * Svelto - Widgets - Textarea - Autogrow
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/widget/widget.js
 * ========================================================================= */

// It supports only `box-sizing: border-box` textareas

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'textareaAutogrow',
				plugin: true,
				selector: 'textarea.autogrow',
				options: {
						callbacks: {
								change: _.noop
						}
				}
		};

		/* AUTOGROW TEXTAREA */

		var AutogrowTextarea = function (_Widgets$Widget25) {
				_inherits(AutogrowTextarea, _Widgets$Widget25);

				function AutogrowTextarea() {
						_classCallCheck(this, AutogrowTextarea);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(AutogrowTextarea).apply(this, arguments));
				}

				_createClass(AutogrowTextarea, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this.$textarea = this.$element;

								this.$tempTextarea = $('<textarea>').css({
										'position': 'fixed',
										'visibility': 'hidden',
										'padding': 0,
										'min-height': 0,
										'height': 0
								});
						}
				}, {
						key: '_init',
						value: function _init() {

								this._update();
						}
				}, {
						key: '_events',
						value: function _events() {

								this.___inputChange();
						}

						/* PRIVATE */

				}, {
						key: '_getNeededHeight',
						value: function _getNeededHeight() {

								this.$tempTextarea.css('font', this.$textarea.css('font')).val(this.$textarea.val() || ' ').appendTo(this.$layout); // Ensuring that there's at least a space character inside of it fixed a bug in IE/Edge where the textarea gets shrinked

								var height = this.$tempTextarea[0].scrollHeight;

								this.$tempTextarea.detach();

								return height;
						}

						/* INPUT / CHANGE */

				}, {
						key: '___inputChange',
						value: function ___inputChange() {

								this._on(true, 'input change', this._update);
						}

						/* UPDATE */

				}, {
						key: '_update',
						value: function _update() {

								var height = this._getNeededHeight();

								if (height === this._prevHeight) return;

								this.$textarea.height(height);

								this._prevHeight = height;

								this._trigger('change');
						}
				}]);

				return AutogrowTextarea;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(AutogrowTextarea, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Time Ago
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/widget/widget.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'timeAgo',
				plugin: true,
				selector: '.timeago, .time-ago',
				options: {
						timestamp: false, // UNIX timestamp
						title: false, // Update the title or the text?
						datas: {
								timestamp: 'timestamp'
						},
						callbacks: {
								change: _.noop
						}
				}
		};

		/* TIME AGO */

		var TimeAgo = function (_Widgets$Widget26) {
				_inherits(TimeAgo, _Widgets$Widget26);

				function TimeAgo() {
						_classCallCheck(this, TimeAgo);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(TimeAgo).apply(this, arguments));
				}

				_createClass(TimeAgo, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this.$timeAgoElement = this.$element;
						}
				}, {
						key: '_init',
						value: function _init() {

								if (!this.options.timestamp) {

										this.options.timestamp = this.$timeAgoElement.data(this.options.datas.timestamp);
								}

								if (this.isEnabled()) {

										this._loop();
								}
						}
				}, {
						key: '_destroy',
						value: function _destroy() {

								clearTimeout(this.loopId);
						}

						/* LOOP */

				}, {
						key: '_loop',
						value: function _loop() {
								var seconds = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];


								this.loopId = this._delay(function () {

										this._loop(this._update().next);
								}, seconds * 1000);
						}

						/* UPDATE */

				}, {
						key: '_update',
						value: function _update() {

								var timeAgo = _.timeAgo(this.options.timestamp);

								if (this.options.title) {

										this.$timeAgoElement.attr('title', timeAgo.str);
								} else {

										this.$timeAgoElement.text(timeAgo.str);
								}

								this._trigger('change');

								return timeAgo;
						}

						/* API OVERRIDES */

				}, {
						key: 'enable',
						value: function enable() {

								_get(Object.getPrototypeOf(TimeAgo.prototype), 'enable', this).call(this);

								this._loop();
						}
				}, {
						key: 'disable',
						value: function disable() {

								_get(Object.getPrototypeOf(TimeAgo.prototype), 'disable', this).call(this);

								clearTimeout(this.loopId);
						}
				}]);

				return TimeAgo;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(TimeAgo, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Timer);

/* =========================================================================
 * Svelto - Core - Z-Depths
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/svelto/svelto.js
 * ========================================================================= */

(function ($, _, Svelto) {

		'use strict';

		/* Z-DEPTHS */

		var ZDepths = {};

		for (var i = 0, l = 24; i <= l; i++) {

				ZDepths[i] = 'z-depth-' + i;
		}

		/* EXPORT */

		Svelto.ZDepths = ZDepths;
})(Svelto.$, Svelto._, Svelto);

/* =========================================================================
 * Svelto - Decorators - Blurred
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/svelto/svelto.js
 * ========================================================================= */

(function ($, _, Svelto) {

		'use strict';

		/* BLURRED */

		$.fn.blurred = function (force) {

				return this.toggleClass('blurred', force);
		};
})(Svelto.$, Svelto._, Svelto);

/* =========================================================================
 * Svelto - Decorators - Obscured
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/svelto/svelto.js
 * ========================================================================= */

(function ($, _, Svelto) {

		'use strict';

		/* OBSCURED */

		$.fn.obscured = function (force) {

				return this.toggleClass('obscured', force);
		};
})(Svelto.$, Svelto._, Svelto);

/* =========================================================================
 * Svelto - Lib - Color
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/svelto/svelto.js
 * ========================================================================= */

//TODO: Add support for the alpha channel
//TODO: Maybe add better support for hex color provided as string, basically Color.hex2hsl should also accept an hex color in string format

(function ($, _, Svelto) {

		'use strict';

		/* COLOR */

		var Color = function () {
				function Color(color, colorspace) {
						_classCallCheck(this, Color);

						this.set(color, colorspace);
				}

				/* ----- API ----- */

				/* SET */

				_createClass(Color, [{
						key: 'set',
						value: function set(color, colorspace) {

								if (colorspace) {

										switch (colorspace.toLowerCase()) {

												case 'hex':
														return this.setHex(color);

												case 'rgb':
														return this.setRgb(color);

												case 'hsv':
														return this.setHsv(color);

												case 'hsl':
														return this.setHsl(color);

										}
								}

								if (_.isPlainObject(color)) {

										if ('r' in color && 'g' in color && 'b' in color) {

												if (Number(color.r) > 99 || Number(color.g) > 99 || Number(color.b) > 99) {

														return this.setRgb(color);
												} else {

														return this.setHex(color);
												}
										} else if ('h' in color && 's' in color) {

												if ('l' in color) {

														return this.setHsl(color);
												} else if ('v' in color) {

														return this.setHsv(color);
												}
										}
								} else if (_.isString(color)) {

										color = _.trim(color, '#');

										if (/^[0-9a-f]{6}$/i.test(color)) {
												// Full 6-chars hex color notation

												return this.setHex({
														r: color[0] + color[1],
														g: color[2] + color[3],
														b: color[4] + color[5]
												});
										} else if (/^[0-9a-f]{3}$/i.test(color)) {
												// Shorthand 3-chars hex color notation

												return this.setHex({
														r: color[0].repeat(2),
														g: color[1].repeat(2),
														b: color[2].repeat(2)
												});
										}
								}

								throw new Error('Invalid color');
						}
				}, {
						key: 'setHex',
						value: function setHex(color) {

								this.hex = _.cloneDeep(color);
						}
				}, {
						key: 'setRgb',
						value: function setRgb(color) {

								this.hex = Color.rgb2hex(color);
						}
				}, {
						key: 'setHsv',
						value: function setHsv(color) {

								this.hex = Color.hsv2hex(color);
						}
				}, {
						key: 'setHsl',
						value: function setHsl(color) {

								this.hex = Color.hsl2hex(color);
						}

						/* GET */

				}, {
						key: 'getHex',
						value: function getHex() {

								return this.hex;
						}
				}, {
						key: 'getRgb',
						value: function getRgb() {

								return Color.hex2rgb(this.hex);
						}
				}, {
						key: 'getHsv',
						value: function getHsv() {

								return Color.hex2hsv(this.hex);
						}
				}, {
						key: 'getHsl',
						value: function getHsl() {

								return Color.hex2hsl(this.hex);
						}

						/* ----- STATICS ----- */

						/* HEX */

				}], [{
						key: 'hex2rgb',
						value: function hex2rgb(hex) {

								return {
										r: Color.hex2dec(hex.r),
										g: Color.hex2dec(hex.g),
										b: Color.hex2dec(hex.b)
								};
						}
				}, {
						key: 'hex2hsv',
						value: function hex2hsv(hex) {

								return Color.rgb2hsv(Color.hex2rgb(hex));
						}
				}, {
						key: 'hex2hsl',
						value: function hex2hsl(hex) {

								return Color.hsv2hsl(Color.hex2hsv(hex));
						}

						/* RGB */

				}, {
						key: 'rgb2hex',
						value: function rgb2hex(rgb) {

								return {
										r: Color.dec2hex(rgb.r),
										g: Color.dec2hex(rgb.g),
										b: Color.dec2hex(rgb.b)
								};
						}
				}, {
						key: 'rgb2hsv',
						value: function rgb2hsv(rgb) {

								var r = rgb.r / 255,
								    g = rgb.g / 255,
								    b = rgb.b / 255,
								    h = void 0,
								    s = void 0,
								    v = Math.max(r, g, b),
								    diff = v - Math.min(r, g, b),
								    diffc = function diffc(c) {
										return (v - c) / 6 / diff + 1 / 2;
								};

								if (diff === 0) {

										h = s = 0;
								} else {

										s = diff / v;

										var rr = diffc(r),
										    gg = diffc(g),
										    bb = diffc(b);

										if (r === v) {

												h = bb - gg;
										} else if (g === v) {

												h = 1 / 3 + rr - bb;
										} else if (b === v) {

												h = 2 / 3 + gg - rr;
										}

										if (h < 0) {

												h += 1;
										} else if (h > 1) {

												h -= 1;
										}
								}

								return {
										h: h * 360,
										s: s * 100,
										v: v * 100
								};
						}
				}, {
						key: 'rgb2hsl',
						value: function rgb2hsl(rgb) {

								return Color.hsv2hsl(Color.rgb2hsv(rgb));
						}

						/* HSV */

				}, {
						key: 'hsv2hex',
						value: function hsv2hex(hsv) {

								return Color.rgb2hex(Color.hsv2rgb(hsv));
						}
				}, {
						key: 'hsv2rgb',
						value: function hsv2rgb(hsv) {

								var r = void 0,
								    g = void 0,
								    b = void 0,
								    h = hsv.h,
								    s = hsv.s,
								    v = hsv.v;

								s /= 100;
								v /= 100;

								if (s === 0) {

										r = g = b = v;
								} else {

										var i = void 0,
										    f = void 0,
										    p = void 0,
										    q = void 0,
										    t = void 0;

										h /= 60;
										i = Math.floor(h);
										f = h - i;
										p = v * (1 - s);
										q = v * (1 - s * f);
										t = v * (1 - s * (1 - f));

										switch (i) {

												case 0:
														r = v;
														g = t;
														b = p;
														break;

												case 1:
														r = q;
														g = v;
														b = p;
														break;

												case 2:
														r = p;
														g = v;
														b = t;
														break;

												case 3:
														r = p;
														g = q;
														b = v;
														break;

												case 4:
														r = t;
														g = p;
														b = v;
														break;

												default:
														r = v;
														g = p;
														b = q;

										}
								}

								return {
										r: Math.round(r * 255),
										g: Math.round(g * 255),
										b: Math.round(b * 255)
								};
						}
				}, {
						key: 'hsv2hsl',
						value: function hsv2hsl(hsv) {

								var s = hsv.s / 100,
								    v = hsv.v / 100,
								    tempL = (2 - s) * v,
								    tempS = s * v;

								return {
										h: hsv.h,
										s: tempS !== 0 ? tempS / (tempL <= 1 ? tempL : 2 - tempL) * 100 : 0,
										l: tempL / 2 * 100
								};
						}

						/* HSL */

				}, {
						key: 'hsl2hex',
						value: function hsl2hex(hsl) {

								return Color.hsv2hex(Color.hsl2hsv(hsl));
						}
				}, {
						key: 'hsl2rgb',
						value: function hsl2rgb(hsl) {

								return Color.hsv2rgb(Color.hsl2hsv(hsl));
						}
				}, {
						key: 'hsl2hsv',
						value: function hsl2hsv(hsl) {

								var l = hsl.l / 100 * 2,
								    s = hsl.s / 100 * (l <= 1 ? l : 2 - l);

								return {
										h: hsl.h,
										s: l + s !== 0 ? 2 * s / (l + s) * 100 : 0,
										v: (l + s) / 2 * 100
								};
						}

						/* DECIMAL / HEX */

				}, {
						key: 'dec2hex',
						value: function dec2hex(dec) {

								return _.padStart(parseInt(dec, 10).toString(16), 2, '0');
						}
				}, {
						key: 'hex2dec',
						value: function hex2dec(hex) {

								return parseInt(hex, 16);
						}
				}]);

				return Color;
		}();

		/* EXPORT */

		Svelto.Color = Color;
})(Svelto.$, Svelto._, Svelto);

/* =========================================================================
 * Svelto - Widgets - Colorpicker
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/widget/widget.js
 * @require lib/color/color.js
 * ========================================================================= */

//FIXME: Add support of it working without a `startColor`
//TODO: Add support for not setting a starting color, in some cases it might be needed not to set a color by default
//TODO: Add support for alpha channel, by adding an opacity slider at the bottom of the sbWrp, it should be optional

(function ($, _, Svelto, Widgets, Factory, Color, Keyboard) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'colorpicker',
				plugin: true,
				selector: '.colorpicker',
				options: {
						exporters: {
								hex: function hex(color) {
										var hex = color.getHex();
										return '#' + hex.r + hex.g + hex.b;
								}
						},
						startColor: '#ff0000', // It can be anything supported by the `Color` obj
						format: {
								type: 'hex', // One of the formats implemented in the exporters
								data: undefined // Passed to the called the exporter
						},
						live: false, // Wether it will update the input also on `Draggable.move` or just on `Draggable.end`
						selectors: {
								sb: {
										wrp: '.colorpicker-sb',
										handler: '.colorpicker-sb .colorpicker-handler'
								},
								hue: {
										wrp: '.colorpicker-hue',
										handler: '.colorpicker-hue .colorpicker-handler'
								},
								input: 'input'
						},
						callbacks: {
								change: _.noop
						}
				}
		};

		/* COLORPICKER */

		var Colorpicker = function (_Widgets$Widget27) {
				_inherits(Colorpicker, _Widgets$Widget27);

				function Colorpicker() {
						_classCallCheck(this, Colorpicker);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Colorpicker).apply(this, arguments));
				}

				_createClass(Colorpicker, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this.$colorpicker = this.$element;
								this.$sbWrp = this.$colorpicker.find(this.options.selectors.sb.wrp);
								this.$sbHandler = this.$colorpicker.find(this.options.selectors.sb.handler);
								this.$hueWrp = this.$colorpicker.find(this.options.selectors.hue.wrp);
								this.$hueHandler = this.$colorpicker.find(this.options.selectors.hue.handler);

								this.$input = this.$colorpicker.find(this.options.selectors.input);

								this.sbWrpSize = this.$sbWrp.width();

								this.hueWrpHeight = this.sbWrpSize;

								this.hsv = false;
						}
				}, {
						key: '_init',
						value: function _init() {

								this.set(this.$input.val());

								if (!this.hsv) {

										this.set(this.options.startColor);
								}
						}
				}, {
						key: '_events',
						value: function _events() {

								this.___change();

								this.___sbKeydown();
								this.___sbDrag();

								this.___hueKeydown();
								this.___hueDrag();
						}
				}, {
						key: '_destroy',
						value: function _destroy() {

								/* DRAG */

								this.$sbHandler.draggable('destroy');
								this.$hueHandler.draggable('destroy');
						}

						/* CHANGE */

				}, {
						key: '___change',
						value: function ___change() {

								this._on(true, this.$input, 'change', this.__change);
						}
				}, {
						key: '__change',
						value: function __change() {

								this.set(this.$input.val());
						}

						/* SB ARROWS */

				}, {
						key: '___sbKeydown',
						value: function ___sbKeydown() {

								this._onHover(this.$sbWrp, [this.$document, 'keydown', this.__sbKeydown]);
						}
				}, {
						key: '__sbKeydown',
						value: function __sbKeydown(event) {

								switch (event.keyCode) {

										case Keyboard.keys.UP:
												this.hsv.v = Math.min(100, this.hsv.v + 1);
												break;

										case Keyboard.keys.RIGHT:
												this.hsv.s = Math.min(100, this.hsv.s + 1);
												break;

										case Keyboard.keys.DOWN:
												this.hsv.v = Math.max(0, this.hsv.v - 1);
												break;

										case Keyboard.keys.LEFT:
												this.hsv.s = Math.max(0, this.hsv.s - 1);
												break;

										default:
												return;

								}

								event.preventDefault();
								event.stopImmediatePropagation();

								this._updateSb();
								this._updateInput();
						}

						/* SB DRAG */

				}, {
						key: '___sbDrag',
						value: function ___sbDrag() {

								this.$sbHandler.draggable({
										draggable: this.isEnabled.bind(this),
										proxy: {
												$element: this.$sbWrp
										},
										constrainer: {
												$element: this.$sbWrp,
												center: true
										},
										callbacks: {
												move: this._throttle(this.__sbDragMove.bind(this), 100),
												end: this.__sbDragEnd.bind(this)
										}
								});
						}
				}, {
						key: '_sbDragSet',
						value: function _sbDragSet(XY, update) {

								this.hsv.s = _.clamp(XY.x, 0, this.sbWrpSize) * 100 / this.sbWrpSize;
								this.hsv.v = 100 - _.clamp(XY.y, 0, this.sbWrpSize) * 100 / this.sbWrpSize;

								this._updateSb(false);

								if (update) {

										this._updateInput();
								}
						}
				}, {
						key: '__sbDragMove',
						value: function __sbDragMove(event, data) {

								this._sbDragSet(data.dragXY, this.options.live);
						}
				}, {
						key: '__sbDragEnd',
						value: function __sbDragEnd(event, data) {

								this._sbDragSet(data.dragXY, true);
						}

						/* HUE ARROWS */

				}, {
						key: '___hueKeydown',
						value: function ___hueKeydown() {

								this._onHover(this.$hueWrp, [this.$document, 'keydown', this.__hueKeydown]);
						}
				}, {
						key: '__hueKeydown',
						value: function __hueKeydown(event) {

								switch (event.keyCode) {

										case Keyboard.keys.UP:
												this.hsv.h = Math.min(359, this.hsv.h + 1);
												break;

										case Keyboard.keys.DOWN:
												this.hsv.h = Math.max(0, this.hsv.h - 1);
												break;

										default:
												return;

								}

								event.preventDefault();
								event.stopImmediatePropagation();

								this._updateHue();
								this._updateInput();
						}

						/* HUE DRAG */

				}, {
						key: '___hueDrag',
						value: function ___hueDrag() {

								this.$hueHandler.draggable({
										draggable: this.isEnabled.bind(this),
										axis: 'y',
										proxy: {
												$element: this.$hueWrp
										},
										constrainer: {
												$element: this.$hueWrp
										},
										callbacks: {
												move: this._throttle(this.__hueDragMove.bind(this), 50),
												end: this.__hueDragEnd.bind(this)
										}
								});
						}
				}, {
						key: '_hueDragSet',
						value: function _hueDragSet(XY, update) {

								this.hsv.h = 359 - _.clamp(XY.y, 0, this.hueWrpHeight) * 359 / this.hueWrpHeight;

								this._updateHue(false);

								if (update) {

										this._updateInput();
								}
						}
				}, {
						key: '__hueDragMove',
						value: function __hueDragMove(event, data) {

								this._hueDragSet(data.dragXY, this.options.live);
						}
				}, {
						key: '__hueDragEnd',
						value: function __hueDragEnd(event, data) {

								this._hueDragSet(data.dragXY, true);
						}

						/* UPDATE */

				}, {
						key: '_updateSb',
						value: function _updateSb() {
								var _translate = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

								/* HSL */

								var hsl = Color.hsv2hsl(this.hsv);

								this.$sbHandler.hsl(hsl.h, hsl.s, hsl.l);

								/* TRANSLATE */

								if (_translate) {

										var translateX = this.sbWrpSize / 100 * this.hsv.s,
										    translateY = this.sbWrpSize / 100 * (100 - this.hsv.v);

										this.$sbHandler.translate(translateX, translateY);
								}
						}
				}, {
						key: '_updateHue',
						value: function _updateHue() {
								var _translate = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

								/* HSL */

								var hsl = Color.hsv2hsl(this.hsv);

								this.$hueHandler.hsl(this.hsv.h, 100, 50);
								this.$sbHandler.hsl(hsl.h, hsl.s, hsl.l);
								this.$sbWrp.hsl(this.hsv.h, 100, 50);

								/* TRANSLATE */

								if (_translate) {

										var translateY = this.hueWrpHeight / 100 * (100 - this.hsv.h / 360 * 100);

										this.$hueHandler.translateY(translateY);
								}
						}
				}, {
						key: '_updateInput',
						value: function _updateInput() {

								this.$input.val(this._export()).trigger('change');

								this._trigger('change');
						}
				}, {
						key: '_update',
						value: function _update() {

								this._updateSb();
								this._updateHue();
								this._updateInput();
						}

						/* EXPORT */

				}, {
						key: '_export',
						value: function _export() {

								return this.options.exporters[this.options.format.type](new Color(this.hsv, 'hsv'), this.options.format.data);
						}

						/* API */

				}, {
						key: 'get',
						value: function get() {

								return this._export();
						}
				}, {
						key: 'set',
						value: function set(color) {

								color = _.attempt(function () {
										return new Color(color);
								});

								if (_.isError(color)) return;

								var hsv = color.getHsv();

								if (_.isEqual(this.hsv, hsv)) return;

								this.hsv = hsv;

								this._update();
						}
				}]);

				return Colorpicker;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(Colorpicker, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Color, Svelto.Keyboard);

/* =========================================================================
 * Svelto - Lib - Directions
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/svelto/svelto.js
 * ========================================================================= */

(function ($, _, Svelto) {

		'use strict';

		/* DIRECTIONS */

		var Directions = {
				get: function get() {

						return ['top', 'bottom', 'left', 'right'];
				},
				getOpposite: function getOpposite(direction) {

						return {
								'top': 'bottom',
								'bottom': 'top',
								'left': 'right',
								'right': 'left'
						}[direction];
				}
		};

		/* EXPORT */

		Svelto.Directions = Directions;
})(Svelto.$, Svelto._, Svelto);

/* =========================================================================
 * Svelto - Widgets - Panel
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/animations/animations.js
 * @require core/widget/widget.js
 * @require lib/directions/directions.js
 * ========================================================================= */

//FIXME: Multiple open panels (read it: multiple backdrops) are not well supported
//TODO: Replace flickable support with a smooth moving panel, so operate on drag

(function ($, _, Svelto, Widgets, Factory, Pointer, Animations, Directions) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'panel',
				plugin: true,
				selector: '.panel',
				options: {
						direction: 'left',
						type: 'default', // `default`, `slim` (officially supported) or any other implemented type
						pin: false, // If is a valid key of `Breakpoints` it will get auto pinned/unpinned when we are above or below that breakpoint
						flick: {
								open: false,
								close: true,
								treshold: 20 // Amount of pixels close to the window border where the opening flick gesture should be considered intentional
						},
						classes: {
								show: 'show',
								open: 'open',
								pinned: 'pinned',
								flickable: 'flickable', // As a side effect it will gain a `Svelto.Flickable` instance, therefor it will also trigger `flickable:flick` events, that are what we want
								backdrop: {
										show: 'panel-backdrop obscured-show obscured',
										open: 'obscured-open',
										pinned: 'panel-backdrop-pinned'
								},
								layout: {
										show: 'panel-layout'
								}
						},
						datas: {
								type: 'type'
						},
						animations: {
								open: Animations.normal,
								close: Animations.normal
						},
						keystrokes: {
								'esc': '__esc'
						},
						callbacks: {
								open: _.noop,
								close: _.noop
						}
				}
		};

		/* PANEL */

		var Panel = function (_Widgets$Widget28) {
				_inherits(Panel, _Widgets$Widget28);

				function Panel() {
						_classCallCheck(this, Panel);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Panel).apply(this, arguments));
				}

				_createClass(Panel, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {
								var _this48 = this;

								this.$panel = this.$element;
								this.panel = this.element;

								this.$backdrop = this.$html;

								this.options.direction = Directions.get().find(function (direction) {
										return _this48.$panel.hasClass(direction);
								}) || this.options.direction;
								this.options.flick.open = this.options.flick.open || this.$panel.hasClass(this.options.classes.flickable);

								if (this.options.pin) {

										_.merge(this.options.breakpoints, {
												up: _defineProperty({}, this.options.pin, '_autopin'),
												down: _defineProperty({}, this.options.pin, '_autounpin')
										});
								}

								this._isOpen = this.$panel.hasClass(this.options.classes.open);
								this._isPinned = this.$panel.hasClass(this.options.classes.pinned);

								this.options.type = this.$panel.data(this.options.datas.type) || this.options.type;

								this.layoutPinnedClass = Widgets.Panel.config.name + '-' + this.options.type + '-' + this.options.classes.pinned + '-' + this.options.direction;
						}
				}, {
						key: '_events',
						value: function _events() {

								if (this._isOpen) {

										this.___breakpoint();
										this.___tap();
										this.___keydown();
										this.___panelFlick();
										this.___route();
								} else {

										this.___layoutFlick();
										this.___panelFlick();
								}
						}
				}, {
						key: '_destroy',
						value: function _destroy() {

								this.close();
						}

						/* TAP */

				}, {
						key: '___tap',
						value: function ___tap() {

								this._on(true, this.$html, Pointer.tap, this.__tap);
						}
				}, {
						key: '__tap',
						value: function __tap(event) {

								if (this._lock || this._isPinned || !$(event.target).isAttached() || $(event.target).closest(this.$panel).length) return;

								this.close();
						}

						/* ESC */

				}, {
						key: '___keydown',
						value: function ___keydown() {
								//TODO: Listen to `keydown` only within the layout, so maybe just if the layout is hovered or focused (right?)

								this._on(true, this.$document, 'keydown', this.__keydown);
						}
				}, {
						key: '__esc',
						value: function __esc() {

								if (!this._isPinned) {

										this.close();
								}
						}

						/* LAYOUT FLICK */

				}, {
						key: '___layoutFlick',
						value: function ___layoutFlick() {

								if (!this.options.flick.open) return;

								this.$layout.flickable();

								this._on(this.$layout, 'flickable:flick', this.__layoutFlick);
						}
				}, {
						key: '__layoutFlick',
						value: function __layoutFlick(event, data) {

								if (this._isOpen) return;

								if (data.direction !== Directions.getOpposite(this.options.direction)) return;

								var layoutOffset = this.$layout.offset();

								switch (this.options.direction) {

										case 'left':
												if (data.startXY.x - layoutOffset.left > this.options.flick.treshold) return;
												break;

										case 'right':
												if (this.$layout.outerWidth() + layoutOffset.left - data.startXY.x > this.options.flick.treshold) return;
												break;

										case 'top':
												if (data.startXY.y - layoutOffset.top > this.options.flick.treshold) return;
												break;

										case 'bottom':
												if (this.$layout.outerHeight() + layoutOffset.top - data.startXY.y > this.options.flick.treshold) return;
												break;

								}

								event.preventDefault();
								event.stopImmediatePropagation();

								this.open();
						}

						/* PANEL FLICK */

				}, {
						key: '___panelFlick',
						value: function ___panelFlick() {

								if (!this.options.flick.close) return;

								this.$panel.flickable();

								this._on(true, 'flickable:flick', this.__panelFlick);
						}
				}, {
						key: '__panelFlick',
						value: function __panelFlick(event, data) {

								if (!this._isOpen) return;

								if (data.direction !== this.options.direction) return;

								event.preventDefault();
								event.stopImmediatePropagation();

								this.close();
						}

						/* ROUTE */

				}, {
						key: '__route',
						value: function __route() {

								if (this._isOpen && !this.$panel.isAttached()) {

										this.close();
								}
						}

						/* AUTO PINNING */

				}, {
						key: '_autopin',
						value: function _autopin() {

								if (this._isPinned) return;

								this._wasAutoOpened = !this._isOpen;

								this.pin();
						}
				}, {
						key: '_autounpin',
						value: function _autounpin() {

								if (!this._isPinned) return;

								this[this._wasAutoOpened ? 'close' : 'unpin']();
						}

						/* API */

				}, {
						key: 'isOpen',
						value: function isOpen() {

								return this._isOpen;
						}
				}, {
						key: 'toggle',
						value: function toggle() {
								var force = arguments.length <= 0 || arguments[0] === undefined ? !this._isOpen : arguments[0];


								if (!!force !== this._isOpen) {

										this[force ? 'open' : 'close']();
								}
						}
				}, {
						key: 'open',
						value: function open() {

								if (this._lock || this._isOpen) return;

								this._lock = true;
								this._isOpen = true;

								if (!this._isPinned) {

										this.$layout.disableScroll();
								}

								this._frame(function () {

										this.$panel.addClass(this.options.classes.show);
										this.$backdrop.addClass(this.options.classes.backdrop.show);
										this.$layout.addClass(this.options.classes.layout.show);

										this._frame(function () {

												this.$panel.addClass(this.options.classes.open);
												this.$backdrop.addClass(this.options.classes.backdrop.open);

												this._lock = false;

												this._trigger('open');
										});
								});

								this._reset();

								this.___breakpoint();
								this.___tap();
								this.___keydown();
								this.___panelFlick();
								this.___route();
						}
				}, {
						key: 'close',
						value: function close() {

								if (this._lock || !this._isOpen) return;

								this.unpin(true);

								this._lock = true;
								this._isOpen = false;

								this._frame(function () {

										this.$panel.removeClass(this.options.classes.open);
										this.$backdrop.removeClass(this.options.classes.backdrop.open);

										this._delay(function () {

												this.$panel.removeClass(this.options.classes.show);
												this.$backdrop.removeClass(this.options.classes.backdrop.show);
												this.$layout.removeClass(this.options.classes.layout.show);

												this.$layout.enableScroll();

												this._lock = false;

												this._trigger('close');
										}, this.options.animations.close);
								});

								this._reset();

								this.___breakpoint();
								this.___layoutFlick();
						}

						/* PINNING */

				}, {
						key: 'isPinned',
						value: function isPinned() {

								return this._isPinned;
						}
				}, {
						key: 'togglePin',
						value: function togglePin() {
								var force = arguments.length <= 0 || arguments[0] === undefined ? !this._isPinned : arguments[0];


								if (!!force !== this._isPinned) {

										this[force ? 'pin' : 'unpin']();
								}
						}
				}, {
						key: 'pin',
						value: function pin() {

								if (this._isPinned) return;

								this._isPinned = true;

								this.$panel.addClass(this.options.classes.pinned);

								this.$layout.addClass(this.layoutPinnedClass);

								this.$backdrop.addClass(this.options.classes.backdrop.pinned);

								if (this._isOpen) {

										this.$layout.enableScroll();
								} else {

										this.open();
								}
						}
				}, {
						key: 'unpin',
						value: function unpin(_closing) {

								if (!this._isOpen || !this._isPinned) return;

								this._isPinned = false;

								this.$layout.removeClass(this.layoutPinnedClass).disableScroll();

								this.$backdrop.removeClass(this.options.classes.backdrop.pinned);

								this._delay(function () {

										this.$panel.removeClass(this.options.classes.pinned);
								}, _closing ? this.options.animations.close : 0);
						}
				}]);

				return Panel;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(Panel, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Pointer, Svelto.Animations, Svelto.Directions);

/* =========================================================================
 * Svelto - Widgets - Panel - Targeters - Closer
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../panel.js
 * @require widgets/targeter/closer/closer.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'panelCloser',
				plugin: true,
				selector: '.panel-closer',
				options: {
						widget: Widgets.Panel
				}
		};

		/* PANEL CLOSER */

		var PanelCloser = function (_Widgets$Closer6) {
				_inherits(PanelCloser, _Widgets$Closer6);

				function PanelCloser() {
						_classCallCheck(this, PanelCloser);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(PanelCloser).apply(this, arguments));
				}

				return PanelCloser;
		}(Widgets.Closer);

		/* FACTORY */

		Factory.init(PanelCloser, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Panel - Targeters - Opener
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../panel.js
 * @require widgets/targeter/opener/opener.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'panelOpener',
				plugin: true,
				selector: '.panel-opener',
				options: {
						widget: Widgets.Panel
				}
		};

		/* PANEL OPENER */

		var PanelOpener = function (_Widgets$Opener5) {
				_inherits(PanelOpener, _Widgets$Opener5);

				function PanelOpener() {
						_classCallCheck(this, PanelOpener);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(PanelOpener).apply(this, arguments));
				}

				return PanelOpener;
		}(Widgets.Opener);

		/* FACTORY */

		Factory.init(PanelOpener, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Panel - Targeters - Toggler
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../panel.js
 * @require widgets/targeter/toggler/toggler.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'panelToggler',
				plugin: true,
				selector: '.panel-toggler',
				options: {
						widget: Widgets.Panel
				}
		};

		/* PANEL TOGGLER */

		var PanelToggler = function (_Widgets$Toggler5) {
				_inherits(PanelToggler, _Widgets$Toggler5);

				function PanelToggler() {
						_classCallCheck(this, PanelToggler);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(PanelToggler).apply(this, arguments));
				}

				return PanelToggler;
		}(Widgets.Toggler);

		/* FACTORY */

		Factory.init(PanelToggler, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Tabs
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/widget/widget.js
 * @require lib/directions/directions.js
 * ========================================================================= */

//TODO: Add again the super cool moving indicator
//TODO: Not well written, make it better
//TODO: Doesn't handle properly a change of the direction

(function ($, _, Svelto, Widgets, Factory, Pointer, Directions) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'tabs',
				plugin: true,
				selector: '.tabs',
				options: {
						direction: 'top',
						highlight: true,
						classes: {
								active: {
										trigger: 'active',
										container: 'active'
								}
						},
						selectors: {
								triggers: '.tabs-triggers > *',
								containers: '.tabs-containers > *'
						},
						callbacks: {
								change: _.noop
						}
				}
		};

		/* TABS */

		var Tabs = function (_Widgets$Widget29) {
				_inherits(Tabs, _Widgets$Widget29);

				function Tabs() {
						_classCallCheck(this, Tabs);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Tabs).apply(this, arguments));
				}

				_createClass(Tabs, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {
								var _this53 = this;

								this.$tabs = this.$element;
								this.$triggers = this.$tabs.find(this.options.selectors.triggers);
								this.$containers = this.$tabs.find(this.options.selectors.containers);

								this.options.direction = Directions.get().find(function (direction) {
										return _this53.$tabs.hasClass(direction);
								}) || this.options.direction;

								this.index = false;
						}
				}, {
						key: '_init',
						value: function _init() {

								var $active = this.$triggers.filter('.' + this.options.classes.active.trigger).first(),
								    index = this.$triggers.index($active);

								this.set(index);
						}
				}, {
						key: '_events',
						value: function _events() {

								this.___tap();
						}

						/* PRIVATE */

				}, {
						key: '_sanitizeIndex',
						value: function _sanitizeIndex(index) {

								return _.clamp(index, 0, this.$triggers.length);
						}

						/* TAP */

				}, {
						key: '___tap',
						value: function ___tap() {

								this._on(this.$triggers, Pointer.tap, this.__tap);
						}
				}, {
						key: '__tap',
						value: function __tap(event) {

								event.stopImmediatePropagation();

								var index = this.$triggers.index($(event.currentTarget));

								this.set(index);
						}

						/* SELECTION */

				}, {
						key: '_toggleSelection',
						value: function _toggleSelection(index, force) {

								var $trigger = this.$triggers.eq(index),
								    $container = this.$containers.eq(index);

								$trigger.toggleClass(this.options.classes.active.trigger, force);
								$container.toggleClass(this.options.classes.active.container, force);

								if (force) {

										$container.widgetize();
								}

								if (this.options.highlight) {

										var oppositeDirection = Directions.getOpposite(this.options.direction);

										$trigger.toggleClass('highlighted highlight-' + oppositeDirection, force);
								}
						}
				}, {
						key: '_select',
						value: function _select(index) {

								this._toggleSelection(index, true);
						}
				}, {
						key: '_unselect',
						value: function _unselect(index) {

								this._toggleSelection(index, false);
						}

						/* API */

				}, {
						key: 'get',
						value: function get() {

								return this.index;
						}
				}, {
						key: 'set',
						value: function set(index) {

								index = this._sanitizeIndex(index);

								if (index === this.index) return;

								/* PREVIOUS */

								if (_.isNumber(this.index)) {

										this._unselect(this.index);
								}

								/* NEW */

								this.index = index;

								this._select(this.index);

								/* CALLBACKS */

								this._trigger('change');
						}
				}]);

				return Tabs;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(Tabs, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Pointer, Svelto.Directions);

/* =========================================================================
 * Svelto - Lib - Embedded CSS
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/svelto/svelto.js
 * ========================================================================= */

/* EMBEDDED CSS */

(function ($, _, Svelto) {

		'use strict';

		/* EMBEDDED CSS */

		var EmbeddedCSS = function () {
				function EmbeddedCSS() {
						_classCallCheck(this, EmbeddedCSS);

						this.$stylesheet = $('<style class="svelto-embedded svelto-embedded-' + $.guid++ + '">');
						this.tree = {};
				}

				/* PRIVATE */

				_createClass(EmbeddedCSS, [{
						key: '_cssfy',
						value: function _cssfy() {

								var css = '';

								for (var selector in this.tree) {

										if (this.tree.hasOwnProperty(selector)) {

												css += selector + '{';

												if (_.isPlainObject(this.tree[selector])) {

														for (var property in this.tree[selector]) {

																if (this.tree[selector].hasOwnProperty(property)) {

																		css += property + ':' + this.tree[selector][property] + ';';
																}
														}
												} else if (_.isString(this.tree[selector])) {

														css += this.tree[selector] + ';';
												}

												css += '}';
										}
								}

								return css;
						}
				}, {
						key: '_refresh',
						value: function _refresh() {

								this.$stylesheet.text(this._cssfy());
						}

						/* API */

				}, {
						key: 'get',
						value: function get(selector) {

								return this.tree[selector];
						}
				}, {
						key: 'set',
						value: function set(selector, property, value) {

								if (property === false) {

										return this.remove(selector);
								}

								if (_.isPlainObject(property)) {

										this.tree[selector] = _.extend(_.isPlainObject(this.tree[selector]) ? this.tree[selector] : {}, property);
								} else if (_.isString(property)) {

										if (!value) {

												this.tree[selector] = property;
										} else {

												return this.set(selector, _defineProperty({}, property, value));
										}
								}

								this._refresh();
						}
				}, {
						key: 'remove',
						value: function remove(selector) {

								if (selector in this.tree) {

										delete this.tree[selector];

										this._refresh();
								}
						}
				}, {
						key: 'clear',
						value: function clear() {

								if (_.size(this.tree)) {

										this.tree = {};

										this._refresh();
								}
						}
				}, {
						key: 'attach',
						value: function attach() {

								this.$stylesheet.appendTo($(document.head));
						}
				}, {
						key: 'detach',
						value: function detach() {

								this.$stylesheet.remove();
						}
				}]);

				return EmbeddedCSS;
		}();

		/* EXPORT */

		Svelto.EmbeddedCSS = new EmbeddedCSS();

		/* READY */

		$(function () {

				Svelto.EmbeddedCSS.attach();
		});
})(Svelto.$, Svelto._, Svelto);

/* =========================================================================
 * Svelto - Lib - Fuzzy
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/svelto/svelto.js
 * ========================================================================= */

(function ($, _, Svelto) {

		'use strict';

		/* FUZZY */

		var Fuzzy = {
				match: function match(str, search) {
						var isCaseSensitive = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];


						if (!isCaseSensitive) {

								str = str.toLowerCase();
								search = search.toLowerCase();
						}

						var currentIndex = -1,
						    str_i = void 0,
						    str_l = str.length;

						for (var search_i = 0, search_l = search.length; search_i < search_l; search_i++) {

								for (str_i = currentIndex + 1; str_i < str_l; str_i++) {

										if (str[str_i] === search[search_i]) {

												currentIndex = str_i;
												str_i = str_l + 1;
										}
								}

								if (str_i === str_l) {

										return false;
								}
						}

						return true;
				}
		};

		/* EXPORT */

		Svelto.Fuzzy = Fuzzy;
})(Svelto.$, Svelto._, Svelto);

/* =========================================================================
 * Svelto - Lib - N Times Action (Group)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/cookie/cookie.js
 * @require core/svelto/svelto.js
 * ========================================================================= */

(function ($, _, Svelto, Cookie, NTA) {

		'use strict';

		/* UTILITIES */

		var getExpiry = function getExpiry(expiry) {

				if (expiry) {

						switch (expiry.constructor) {

								case Number:
										return expiry === Infinity ? false : _.nowSecs() + expiry;

								case String:
										return getExpiry(new Date(expiry));

								case Date:
										var timestamp = expiry.getTime();
										return _.isNaN(timestamp) ? false : Math.floor(timestamp / 1000);

						}
				}

				return false;
		};

		/* CONFIG */

		var config = {
				encoder: JSON.stringify,
				decoder: JSON.parse
		};

		/* GROUP */

		var Group = function () {
				function Group(options) {
						_classCallCheck(this, Group);

						this.name = options.name;
						this.cookie = options.cookie;

						this.actions = NTA.Group.config.decoder(Cookie.get(this.name) || '{}');
				}

				_createClass(Group, [{
						key: 'get',
						value: function get(action) {

								var actionj = this.actions[action];

								if (actionj) {

										if (actionj.x && actionj.x < _.nowSecs()) {

												this.remove(action);
										} else {

												return actionj.t;
										}
								}

								return 0;
						}
				}, {
						key: 'set',
						value: function set(action, times, expiry) {

								times = Number(times);

								if (_.isNaN(times)) return;

								if (action in this.actions) {

										if (times === 0 && !this.actions[action].x) {

												return this.remove(action);
										} else {

												this.actions[action].t = times;
										}
								} else {

										this.actions[action] = { t: times };

										expiry = getExpiry(expiry);

										if (expiry) {

												this.actions[action].x = expiry;
										}
								}

								this.update();
						}
				}, {
						key: 'update',
						value: function update() {

								Cookie.set(this.name, NTA.Group.config.encoder(this.actions), this.cookie.end, this.cookie.path, this.cookie.domain, this.cookie.secure);
						}
				}, {
						key: 'remove',
						value: function remove(action) {

								if (action) {

										if (_.size(this.actions) > 1) {

												delete this.actions[action];

												this.update();
										} else {

												this.remove();
										}
								} else {

										this.actions = {};

										Cookie.remove(this.name, this.cookie.path, this.cookie.domain);
								}
						}
				}]);

				return Group;
		}();

		/* BINDING */

		NTA.Group = Group;
		NTA.Group.config = config;
})(Svelto.$, Svelto._, Svelto, Svelto.Cookie, Svelto.NTA = {});

/* =========================================================================
 * Svelto - Lib - N Times Action (Action)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ./NTA.Group.js
 * @require core/svelto/svelto.js
 * ========================================================================= */

(function ($, _, Svelto, NTA) {

		'use strict';

		/* ACTION */

		var Action = function () {
				function Action(options) {
						_classCallCheck(this, Action);

						this.group = new NTA.Group({ name: options.group, cookie: options.cookie });
						this.name = options.name;
						this.expiry = options.expiry;
				}

				_createClass(Action, [{
						key: 'get',
						value: function get() {

								return this.group.get(this.name);
						}
				}, {
						key: 'set',
						value: function set(times, expiry) {

								this.group.set(this.name, times, expiry || this.expiry);
						}
				}, {
						key: 'remove',
						value: function remove() {

								this.group.remove(this.name);
						}
				}]);

				return Action;
		}();

		/* BINDING */

		NTA.Action = Action;
})(Svelto.$, Svelto._, Svelto, Svelto.NTA);

/* =========================================================================
 * Svelto - Lib - N Times Action
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ./NTA.Action.js
 * @require ./NTA.Group.js
 * @require core/svelto/svelto.js
 * ========================================================================= */

(function ($, _, Svelto, NTA) {

		'use strict';

		/* DEFAULTS */

		var defaults = {
				group: 'nta', // The cookie name that holds the actions, a namespace for related actions basically
				action: false, // The action name
				times: Infinity, // The times an action can be executed
				expiry: false, // When a single action will expire and will then get removed from its group
				fn: false, // The function to execute
				cookie: { // Values that will get passed to `Cookie` when appropriate
						end: Infinity,
						path: undefined,
						domain: undefined,
						secure: undefined
				}
		};

		/* N TIMES ACTION */

		$.nTimesAction = function (options) {

				/* OPTIONS */

				options = _.merge({}, $.nTimesAction.defaults, options);

				/* N TIMES ACTION */

				if (options.action) {

						var action = new NTA.Action({ group: options.group, name: options.action, expiry: options.expiry, cookie: options.cookie }),
						    actionTimes = action.get();

						/* EXECUTE */

						if (options.fn && actionTimes < options.times) {

								var returnValue = options.fn(options.group, options.action, actionTimes + 1);

								/* INCREMENT */

								if (returnValue !== false) {

										action.set(actionTimes + 1);
								}
						}

						return action;
				} else if (options.group) {

						return new NTA.Group({ name: options.group, cookie: options.cookie });
				}
		};

		/* BINDING */

		$.nTimesAction.defaults = defaults;
})(Svelto.$, Svelto._, Svelto, Svelto.NTA);

/* =========================================================================
 * Svelto - Lib - One Time Action
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/svelto/svelto.js
 * @require lib/n_times_action/n_times_action.js
 * ========================================================================= */

(function ($, _, Svelto) {

		'use strict';

		/* ONE TIME ACTION */

		$.oneTimeAction = function (options) {

				return $.nTimesAction(_.extend({ group: 'ota' }, options, { times: 1 }));
		};
})(Svelto.$, Svelto._, Svelto);

/* =========================================================================
 * Svelto - Lib - Regexes
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/svelto/svelto.js
 * ========================================================================= */

(function ($, _, Svelto) {

		'use strict';

		/* REGEXES */

		var Regexes = {

				/* TYPE */

				alpha: /^[a-zA-Z]+$/,
				alphanumeric: /^[a-zA-Z0-9]+$/,
				hexadecimal: /^[a-fA-F0-9]+$/,
				integer: /^(?:-?(?:0|[1-9][0-9]*))$/, //FIXME: It breaks if multiple 0 are added at the beginning (should this case be supported?)
				float: /^-?(?:(?:\d+)(?:\.\d*)?|(?:\.\d+)+)$/,

				/* THINGS */

				email: /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i,
				creditCard: /^(?:(4[0-9]{12}(?:[0-9]{3})?)|(5[1-5][0-9]{14})|(6(?:011|5[0-9]{2})[0-9]{12})|(3[47][0-9]{13})|(3(?:0[0-5]|[68][0-9])[0-9]{11})|((?:2131|1800|35[0-9]{3})[0-9]{11}))$/,
				ssn: /^(?!000|666)[0-8][0-9]{2}-(?!00)[0-9]{2}-(?!0000)[0-9]{4}$/,
				ipv4: /^(?:(?:\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])\.){3}(?:\d|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])$/,
				url: /^(?:(?:https?|ftp):\/\/)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/\S*)?$/i

		};

		/* EXPORT */

		Svelto.Regexes = Regexes;
})(Svelto.$, Svelto._, Svelto);

/* =========================================================================
 * Svelto - Lib - Timer
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * Fork of http://jchavannes.com/jquery-timer - Jason Chavannes
 * =========================================================================
 * @require core/svelto/svelto.js
 * ========================================================================= */

(function ($, _, Svelto) {

		'use strict';

		/* TIMER */

		var Timer = function () {
				function Timer() {
						_classCallCheck(this, Timer);

						this.set.apply(this, arguments);
				}

				_createClass(Timer, [{
						key: 'set',
						value: function set(callback, time, autostart) {

								this.init = true;
								this.action = callback;

								if (!isNaN(time)) {

										this.intervalTime = time;
								}

								if (autostart && !this.isActive) {

										this.isActive = true;
										this.setTimer();
								}

								return this;
						}
				}, {
						key: 'once',
						value: function once(time) {
								var _this54 = this;

								if (isNaN(time)) {

										time = 0;
								}

								setTimeout(function () {
										return _this54.action();
								}, time);

								return this;
						}
				}, {
						key: 'play',
						value: function play(reset) {

								if (!this.isActive) {

										if (reset) {

												this.setTimer();
										} else {

												this.setTimer(this.remainingTime);
										}

										this.isActive = true;
								}

								return this;
						}
				}, {
						key: 'pause',
						value: function pause() {

								if (this.isActive) {

										this.isActive = false;
										this.remainingTime -= Date.now() - this.last;
										this.clearTimer();
								}

								return this;
						}
				}, {
						key: 'stop',
						value: function stop() {

								this.isActive = false;
								this.remainingTime = this.intervalTime;
								this.clearTimer();

								return this;
						}
				}, {
						key: 'toggle',
						value: function toggle(reset) {

								if (this.isActive) {

										this.pause();
								} else if (reset) {

										this.play(true);
								} else {

										this.play();
								}

								return this;
						}
				}, {
						key: 'reset',
						value: function reset() {

								this.isActive = false;

								this.play(true);

								return this;
						}
				}, {
						key: 'clearTimer',
						value: function clearTimer() {

								clearTimeout(this.timeoutObject);
						}
				}, {
						key: 'setTimer',
						value: function setTimer(time) {
								var _this55 = this;

								if (isNaN(time)) {

										time = this.intervalTime;
								}

								this.remainingTime = time;
								this.last = Date.now();
								this.clearTimer();

								this.timeoutObject = setTimeout(function () {
										return _this55.go();
								}, time);
						}
				}, {
						key: 'go',
						value: function go() {

								if (this.isActive) {

										this.action();
										this.setTimer();
								}
						}
				}, {
						key: 'remaining',
						value: function remaining(value) {

								if (_.isUndefined(value)) {

										return this.remainingTime;
								}

								this.remainingTime = value;

								return this;
						}
				}]);

				return Timer;
		}();

		/* EXPORT */

		Svelto.Timer = Timer;
})(Svelto.$, Svelto._, Svelto);

/* =========================================================================
 * Svelto - Widgets - Carousel
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/animations/animations.js
 * @require core/widget/widget.js
 * @require lib/timer/timer.js
 * ========================================================================= */

//TODO: Add slides drag support

(function ($, _, Svelto, Widgets, Factory, Pointer, Timer, Animations) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'carousel',
				plugin: true,
				selector: '.carousel',
				options: {
						startIndex: 0,
						wrap: true, // Wether we should connect the start with the end, so that when calling `previous` from the start we reach the end and vice versa
						cycle: false, // If the carousel should auto-cycle or not
						interval: 5000, // Interval between auto-cycling slides
						intervalMinimumRemaining: 1000, // Auto-cycling will be stopped on hover and started again on leave, with a remaining time of `Math.min ( what the remaining time was, this option )`;
						classes: {
								previous: 'previous',
								current: 'current'
						},
						selectors: {
								previous: '.carousel-previous',
								next: '.carousel-next',
								indicator: '.carousel-indicator',
								itemsWrp: '.carousel-items',
								item: '.carousel-items > *'
						},
						animations: {
								cycle: Animations.normal
						},
						keystrokes: {
								'left, up': 'previous',
								'right, down, space': 'next'
						},
						callbacks: {
								change: _.noop
						}
				}
		};

		/* CAROUSEL */

		var Carousel = function (_Widgets$Widget30) {
				_inherits(Carousel, _Widgets$Widget30);

				function Carousel() {
						_classCallCheck(this, Carousel);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Carousel).apply(this, arguments));
				}

				_createClass(Carousel, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this.$carousel = this.$element;
								this.$previous = this.$carousel.find(this.options.selectors.previous);
								this.$next = this.$carousel.find(this.options.selectors.next);
								this.$indicators = this.$carousel.find(this.options.selectors.indicator);
								this.$itemsWrp = this.$carousel.find(this.options.selectors.itemsWrp);
								this.$items = this.$carousel.find(this.options.selectors.item);

								this.maxIndex = this.$items.length - 1;

								this._previous = false;
								this._current = false;

								this.timer = new Timer(this.next.bind(this), this.options.interval, false);
						}
				}, {
						key: '_init',
						value: function _init() {

								var $current = this.$items.filter('.' + this.options.classes.current).first();

								if ($current.length) {

										this._current = this._getItemObj(this.$items.index($current));
								} else {

										this.set(this.options.startIndex);
								}
						}
				}, {
						key: '_events',
						value: function _events() {

								this.___previousTap();
								this.___nextTap();
								this.___indicatorTap();

								this.___keydown();
								this.___cycle();
						}
				}, {
						key: '_destroy',
						value: function _destroy() {

								this.timer.stop();
						}

						/* PRIVATE */

				}, {
						key: '_sanitizeIndex',
						value: function _sanitizeIndex(index) {

								index = Number(index);

								return _.isNaN(index) ? NaN : _.clamp(index, 0, this.maxIndex);
						}

						/* PREVIOUS TAP */

				}, {
						key: '___previousTap',
						value: function ___previousTap() {

								this._on(this.$previous, Pointer.tap, this.previous);
						}

						/* NEXT TAP */

				}, {
						key: '___nextTap',
						value: function ___nextTap() {

								this._on(this.$next, Pointer.tap, this.next);
						}

						/* INDICATOR TAP */

				}, {
						key: '___indicatorTap',
						value: function ___indicatorTap() {

								this._on(this.$indicators, Pointer.tap, this.__indicatorTap);
						}
				}, {
						key: '__indicatorTap',
						value: function __indicatorTap(event) {

								this.set(this.$indicators.index(event.currentTarget));
						}

						/* KEYDOWN */

				}, {
						key: '___keydown',
						value: function ___keydown() {

								this._onHover([this.$document, 'keydown', this.__keydown]);
						}

						/* CYCLE */

				}, {
						key: '___cycle',
						value: function ___cycle() {

								this._on(true, this.$itemsWrp, Pointer.enter, this.__cycleEnter);
								this._on(true, this.$itemsWrp, Pointer.leave, this.__cycleLeave);
						}
				}, {
						key: '__cycleEnter',
						value: function __cycleEnter() {

								if (this.options.cycle) {

										this.timer.pause();
								}
						}
				}, {
						key: '__cycleLeave',
						value: function __cycleLeave() {

								if (this.options.cycle) {

										this.timer.remaining(Math.max(this.options.intervalMinimumRemaining, this.timer.remaining()));

										this.timer.play();
								}
						}

						/* ITEM OBJ */

				}, {
						key: '_getItemObj',
						value: function _getItemObj(index) {

								return {
										index: index,
										$item: this.$items.eq(index),
										$indicator: this.$indicators.eq(index)
								};
						}

						/* INDEX */

				}, {
						key: '_getPrevIndex',
						value: function _getPrevIndex(index) {

								return index > 0 ? index - 1 : this.options.wrap ? this.maxIndex : 0;
						}
				}, {
						key: '_getNextIndex',
						value: function _getNextIndex(index) {

								return index < this.maxIndex ? index + 1 : this.options.wrap ? 0 : this.maxIndex;
						}

						/* UPDATE */

				}, {
						key: '_updatePreviousNext',
						value: function _updatePreviousNext() {

								this.$previous.toggleClass(this.options.classes.disabled, this._current.index === 0 && !this.options.wrap);
								this.$next.toggleClass(this.options.classes.disabled, this._current.index === this.maxIndex && !this.options.wrap);
						}

						/* API OVERRIDES */

				}, {
						key: 'enable',
						value: function enable() {

								_get(Object.getPrototypeOf(Carousel.prototype), 'enable', this).call(this);

								if (this.options.cycle || this._wasCycling) {

										this.play();
								}
						}
				}, {
						key: 'disable',
						value: function disable() {

								_get(Object.getPrototypeOf(Carousel.prototype), 'disable', this).call(this);

								this._wasCycling = this.options.cycle;

								if (this.options.cycle) {

										this.stop();
								}
						}

						/* API */

				}, {
						key: 'get',
						value: function get() {

								return this._current.index;
						}
				}, {
						key: 'set',
						value: function set(index) {

								index = this._sanitizeIndex(index);

								if (this._lock || _.isNaN(index) || this._current && index === this._current.index) return;

								this._lock = true;

								if (this._current) {

										this._current.$item.removeClass(this.options.classes.current).addClass(this.options.classes.previous);
										this._current.$indicator.removeClass(this.options.classes.current);

										this._previous = this._current;
								}

								this._current = this._getItemObj(index);
								this._current.$item.addClass(this.options.classes.current);
								this._current.$indicator.addClass(this.options.classes.current);

								this._updatePreviousNext();

								if (this.options.cycle) {

										this.timer.stop();
								}

								this._delay(function () {

										if (this._previous) {

												this._previous.$item.removeClass(this.options.classes.previous);
										}

										if (this.options.cycle) {

												this.timer.play();
										}

										this._lock = false;

										this._trigger('change');
								}, this.options.animations.cycle);
						}
				}, {
						key: 'previous',
						value: function previous() {

								this.set(this._getPrevIndex(this._current.index));
						}
				}, {
						key: 'next',
						value: function next() {

								this.set(this._getNextIndex(this._current.index));
						}

						/* API TIMER */

				}, {
						key: 'play',
						value: function play() {

								this.options.cycle = true;
								this.timer.remaining(Math.max(this.options.intervalMinimumRemaining, this.timer.remaining()));
								this.timer.play();
						}
				}, {
						key: 'pause',
						value: function pause() {

								this.options.cycle = false;
								this.timer.pause();
						}
				}, {
						key: 'stop',
						value: function stop() {

								this.options.cycle = false;
								this.timer.stop();
						}
				}, {
						key: 'reset',
						value: function reset() {

								this.options.cycle = true;
								this.timer.reset();
						}
				}]);

				return Carousel;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(Carousel, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Pointer, Svelto.Timer, Svelto.Animations);

/* =========================================================================
 * Svelto - Widgets - Toast
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/animations/animations.js
 * @require core/colors/colors.js
 * @require core/sizes/sizes.js
 * @require core/widget/widget.js
 * @require lib/timer/timer.js
 * ========================================================================= */

//TODO: Add support for dismissing a toast that contains only one button
//TODO: Add better support for swipe to dismiss

(function ($, _, Svelto, Widgets, Factory, Pointer, Timer, Animations, Colors, Sizes) {

		'use strict';

		/* VARIABLES */

		var openNotiesData = {};

		/* CONFIG */

		var config = {
				name: 'toast',
				plugin: true,
				selector: '.toast',
				templates: {
						base: '<div class="toast <%= o.type %> <%= o.color %> <%= o.type !== "action" ? "actionable" : "" %> <%= o.css %>">' + ('<div class="infobar ' + Colors.transparent + '">') + '<% if ( o.img ) { %>' + '<img src="<%= o.img %>" class="toast-img infobar-left">' + '<% } %>' + '<% if ( o.icon ) { %>' + '<i class="icon <%= o.title && o.body ? "xlarge" : "" %> infobar-left"><%= o.icon %></i>' + '<% } %>' + '<% if ( o.title || o.body ) { %>' + '<div class="infobar-center">' + '<% if ( o.title ) { %>' + '<p class="infobar-title">' + '<%= o.title %>' + '</p>' + '<% } %>' + '<% if ( o.body ) { %>' + '<%= o.body %>' + '<% } %>' + '</div>' + '<% } %>' + '<% if ( o.buttons.length === 1 ) { %>' + '<div class="infobar-right">' + '<% print ( self.button ( o.buttons[0] ) ) %>' + '</div>' + '<% } %>' + '</div>' + '<% if ( o.buttons.length > 1 ) { %>' + '<div class="toast-buttons multiple center-x">' + '<% for ( var i = 0; i < o.buttons.length; i++ ) { %>' + '<% print ( self.button ( o.buttons[i] ) ) %>' + '<% } %>' + '</div>' + '<% } %>' + '</div>',
						button: '<div class="button <%= o.color || "' + Colors.white + '" %> <%= o.size || "' + Sizes.small + '" %> <%= o.css || "" %>">' + '<%= o.text || "" %>' + '</div>'
				},
				options: {
						anchor: { // Used for selecting the proper queue where this Toast should be attached
								x: 'left',
								y: 'bottom'
						},
						title: false,
						body: false,
						img: false,
						icon: false,
						buttons: [],
						/*
             : [{
                color: Colors.white,
                size: Sizes.small,
                css: '',
                text: '',
                onClick: _.noop // If it returns `false` the Toast won't be closed
             }],
      */
						type: 'alert',
						color: Colors.black,
						css: '',
						persistent: false, // Wether it should survive a change of page or not. Needed when used in frameworks like Meteor
						autoplay: true,
						ttl: 3500,
						ttlMinimumRemaining: 1000, // Auto-closing will be stopped on hover and started again on leave, with a remaining time of `Math.min ( what the remaining time was, this option )`;
						classes: {
								open: 'open'
						},
						selectors: {
								queues: '.toast-queues',
								queue: '.toast-queue',
								button: '.toast-buttons .button, .infobar-right .button'
						},
						animations: {
								open: Animations.normal,
								close: Animations.normal
						},
						keystrokes: {
								'esc': 'close'
						},
						callbacks: {
								open: _.noop,
								close: _.noop
						}
				}
		};

		/* TOAST */

		var Toast = function (_Widgets$Widget31) {
				_inherits(Toast, _Widgets$Widget31);

				function Toast() {
						_classCallCheck(this, Toast);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Toast).apply(this, arguments));
				}

				_createClass(Toast, [{
						key: '_variables',
						value: function _variables() {

								this.$toast = this.$element;
								this.$buttons = this.$toast.find(this.options.selectors.button);

								this.timer = false;
								this._openUrl = false;

								this._isOpen = this.$toast.hasClass(this.options.classes.open);
						}
				}, {
						key: '_init',
						value: function _init() {

								this.$toast.widgetize();

								if (this._isOpen) {

										this.___timer();
										this.___tap();
										this.___flick();
										this.___buttonTap();
										this.___hover();
										this.___persistent();
										this.___keydown();
										this.___breakpoint();
								} else if (this.options.autoplay) {

										this.open();
								}
						}

						/* PRIVATE */

				}, {
						key: '_getUrl',
						value: function _getUrl() {

								return window.location.href.split('#')[0];
						}

						/* TIMER */

				}, {
						key: '___timer',
						value: function ___timer() {

								if (this.options.type !== 'action' && _.isNumber(this.options.ttl) && !_.isNaN(this.options.ttl) && this.options.ttl !== Infinity) {

										if (!this.timer) {

												this.timer = new Timer(this.close.bind(this), this.options.ttl, true);
										} else {

												this.timer.reset();
										}

										openNotiesData[this.guid] = [this.timer, this.options.ttlMinimumRemaining];
								}
						}

						/* TAP */

				}, {
						key: '___tap',
						value: function ___tap() {

								if (this.options.type !== 'action') {

										this._on(Pointer.tap, this.__tap);
								}
						}
				}, {
						key: '__tap',
						value: function __tap(event) {

								event.preventDefault(); // Otherwise the click goes through the toast in Chrome for iOS

								this.close();
						}

						/* BUTTON TAP */

				}, {
						key: '___buttonTap',
						value: function ___buttonTap() {

								this._on(this.$buttons, Pointer.tap, this.__buttonTap);
						}
				}, {
						key: '__buttonTap',
						value: function __buttonTap(event, data) {

								var $button = $(event.target),
								    index = this.$buttons.index($button),
								    buttonObj = this.options.buttons[index];

								if (buttonObj.onClick) {

										if (buttonObj.onClick.apply($button[0], [event, data]) === false) return;
								}

								this.close();
						}

						/* HOVER */

				}, {
						key: '___hover',
						value: function ___hover() {

								this.$toast.hover(function () {

										_.forOwn(openNotiesData, function (data) {
												return data[0].pause();
										});
								}, function () {

										_.forOwn(openNotiesData, function (data) {
												return data[0].remaining(Math.max(data[1], data[0].remaining())).play();
										});
								});
						}

						/* FLICK */

				}, {
						key: '___flick',
						value: function ___flick() {

								if (this.options.type !== 'action') {

										this.$toast.flickable({
												callbacks: {
														flick: this.__flick.bind(this)
												}
										});
								}
						}
				}, {
						key: '__flick',
						value: function __flick(event, data) {

								if (data.orientation === 'horizontal') {

										this.close();
								}
						}

						/* PERSISTENT */

				}, {
						key: '___persistent',
						value: function ___persistent() {

								if (!this.options.persistent) {

										this.___route();
								}
						}
				}, {
						key: '__route',
						value: function __route() {

								var currentUrl = this._getUrl();

								if (this._openUrl && this._openUrl !== currentUrl) {

										this.close();
								}
						}

						/* RESET */

				}, {
						key: '_reset',
						value: function _reset() {

								/* TIMER */

								delete openNotiesData[this.guid];

								/* FLICK */

								this.$toast.flickable('destroy');

								/* SUPER */

								_get(Object.getPrototypeOf(Toast.prototype), '_reset', this).call(this);
						}

						/* API */

				}, {
						key: 'isOpen',
						value: function isOpen() {

								return this._isOpen;
						}
				}, {
						key: 'open',
						value: function open() {

								if (this._lock || this._isOpen) return;

								this._lock = true;
								this._isOpen = true;

								this._frame(function () {

										$(this.options.selectors.queues + '.' + this.options.anchor.y + ' ' + this.options.selectors.queue + '.' + this.options.anchor.x).append(this.$toast);

										this._frame(function () {

												this.$toast.addClass(this.options.classes.open);

												this._lock = false;

												this._trigger('open');
										});
								});

								this.___timer();
								this.___tap();
								this.___flick();
								this.___buttonTap();
								this.___hover();
								this.___persistent();
								this.___keydown();
								this.___breakpoint();

								this._defer(function () {

										this._openUrl = this._getUrl();
								});
						}
				}, {
						key: 'close',
						value: function close() {

								if (this._lock || !this._isOpen) return;

								this._lock = true;
								this._isOpen = false;
								this._openUrl = false;

								this._frame(function () {

										this.$toast.removeClass(this.options.classes.open);

										this._delay(function () {

												this.$toast.remove();

												this._lock = false;

												this._trigger('close');
										}, this.options.animations.close);
								});

								this._reset();
						}
				}], [{
						key: 'ready',


						/* SPECIAL */

						value: function ready() {

								$('.layout, body').first().append( // `body` is used as a fallback
								'<div class="toast-queues top">' + '<div class="toast-queue expanded"></div>' + '<div class="toast-queues-row">' + '<div class="toast-queue left"></div>' + '<div class="toast-queue center"></div>' + '<div class="toast-queue right"></div>' + '</div>' + '</div>' + '<div class="toast-queues bottom">' + '<div class="toast-queues-row">' + '<div class="toast-queue left"></div>' + '<div class="toast-queue center"></div>' + '<div class="toast-queue right"></div>' + '</div>' + '<div class="toast-queue expanded"></div>' + '</div>');
						}
				}]);

				return Toast;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(Toast, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Pointer, Svelto.Timer, Svelto.Animations, Svelto.Colors, Svelto.Sizes);

/* =========================================================================
 * Svelto - Lib - Notification
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/svelto/svelto.js
 * @require widgets/toast/toast.js
 * ========================================================================= */

// If the tab hasn't the focus and we can use the native notifications than we'll send a native notification, otherwise we will fallback to a toast

(function ($, _, Svelto, Widgets) {

		'use strict';

		/* DEFAULTS */

		var defaults = {
				title: false,
				body: false,
				img: false,
				ttl: Widgets.Toast.config.options.ttl
		};

		/* NOTIFICATION */

		//TODO: Add support for string options

		$.notification = function (options) {

				/* OPTIONS */

				options = _.extend({}, $.notification.defaults, options);

				/* NOTIFICATIONS */

				if (!document.hasFocus() && window.Notification && Notification.permission !== 'denied') {

						Notification.requestPermission(function (status) {

								if (status === 'granted') {
										(function () {

												var notification = new Notification(options.title, { body: options.body, icon: options.img });

												if (_.isNumber(options.ttl) && !_.isNaN(options.ttl) && options.ttl !== Infinity) {

														setTimeout(function () {

																notification.close();
														}, options.ttl);
												}
										})();
								} else {

										$.toast(options);
								}
						});
				} else {

						$.toast(options);
				}
		};

		/* BINDING */

		$.notification.defaults = defaults;
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets);

/* =========================================================================
 * Svelto - Widgets - Rater
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require widgets/toast/toast.js
 * ========================================================================= */

//FIXME: Crappy, not working atm, maybe should get removed
//TODO: Support the use of the rater as an input, basically don't perform any ajax operation but instead update an input field

(function ($, _, Svelto, Widgets, Factory, Pointer) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'rater',
				plugin: true,
				selector: '.rater',
				templates: {
						base: '<div class="rater">' + '<% print ( self.stars ( o ) ) %>' + '</div>',
						stars: '<% for ( var i = 1; i <= o.amount; i++ ) { %>' + '<div class="rater-star <%= ( o.value >= i ? "active" : ( o.value >= i - 0.5 ? "half-active" : "" ) ) %>"></div>' + '<% } %>'
				},
				options: {
						value: 0,
						amount: 5,
						url: false,
						rated: false,
						messages: {
								error: 'An error occurred, please try again later'
						},
						datas: {
								value: 'value',
								amount: 'amount',
								url: 'url'
						},
						classes: {
								rated: 'rated'
						},
						selectors: {
								star: '.rater-star'
						},
						callbacks: {
								change: _.noop
						}
				}
		};

		/* SELECT */

		var Rater = function (_Widgets$Widget32) {
				_inherits(Rater, _Widgets$Widget32);

				function Rater() {
						_classCallCheck(this, Rater);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Rater).apply(this, arguments));
				}

				_createClass(Rater, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this.$rater = this.$element;

								this.doingAjax = false;
						}
				}, {
						key: '_init',
						value: function _init() {

								this.options.value = Number(this.$rater.data(this.options.datas.value)) || this.options.value;
								this.options.amount = Number(this.$rater.data(this.options.datas.amount)) || this.options.amount;
								this.options.url = Number(this.$rater.data(this.options.datas.url)) || this.options.url;
								this.options.rated = this.$rater.hasClass(this.options.classes.rated);
						}
				}, {
						key: '_events',
						value: function _events() {

								this.___tap();
						}

						/* TAP */

				}, {
						key: '___tap',
						value: function ___tap() {

								if (!this.options.rated) {

										/* TAP */

										this._on(Pointer.tap, this.options.selectors.star, this.__tap);
								}
						}
				}, {
						key: '__tap',
						value: function __tap(event) {
								var _this59 = this;

								if (!this.options.rated && !this.doingAjax && this.options.url) {

										var rating = this.$stars.index(event.currentTarget) + 1;

										$.ajax({

												data: { rating: rating },
												type: 'POST',
												url: this.options.url,

												beforeSend: function beforeSend() {

														_this59.doingAjax = true;
												},

												error: function error(res) {

														var resj = _.isPlainObject(res) ? res : _.attempt(JSON.parse, res);

														$.toast(_.isError(resj) || !('message' in resj) ? _this59.options.messages.error : resj.message);
												},

												success: function success(res) {

														//FIXME: Handle the case where the server requests succeeded but the user already rated or for whatever reason this rating is not processed
														//TODO: Make it work like formAjax's

														var resj = _.isPlainObject(res) ? res : _.attempt(JSON.parse, res);

														if (!_.isError(resj)) {

																_.merge(_this59.options, resj);

																_this59.$rater.html(_this59._template('stars', _this59.options));

																_this59.options.rated = true;

																_this59._trigger('change');
														}
												},

												complete: function complete() {

														_this59.doingAjax = false;
												}

										});
								}
						}

						/* API */

				}, {
						key: 'get',
						value: function get() {

								return {
										value: this.options.value,
										amount: this.options.amount
								};
						}
				}]);

				return Rater;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(Rater, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Pointer);

/* =========================================================================
 * Svelto - Widgets - Remote - Action
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../remote.js
 * @require core/colors/colors.js
 * @require core/sizes/sizes.js
 * @require widgets/toast/toast.js
 * ========================================================================= */

//TODO: Add locking capabilities (Disable the ability to trigger the same action multiple times simultaneously)
//TODO: Add support for customizable `confirmation` option //TODO: Update also `selectable actions`

//FIXME: Not well written
//FIXME: Clicking an error/success toast doesn't close it

(function ($, _, Svelto, Widgets, Factory, Colors, Sizes) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'remoteAction',
				options: {
						closingDelay: Widgets.Toast.config.options.ttl / 2,
						ajax: {
								cache: false,
								method: 'POST'
						},
						confirmation: { // Options to pass to a confirmation toast, if falsy or `buttons.length === 0` we won't ask for confirmation. If a button as `isConfirmative` it will be used for confirmation, otherwise the last one will be picked
								body: 'Execute action?',
								buttons: [{
										text: 'Cancel'
								}, {
										text: 'Execute',
										color: Colors.secondary,
										isConfirmative: true
								}]
						},
						messages: {
								error: 'An error occurred, please try again later',
								success: 'Done! A page refresh may be needed',
								refreshing: 'Done! Refreshing the page...',
								redirecting: 'Done! Redirecting...'
						},
						classes: {
								spinner: {
										color: Colors.white,
										size: Sizes.small,
										css: ''
								}
						}
				}
		};

		/* REMOTE ACTION */

		var RemoteAction = function (_Widgets$Remote) {
				_inherits(RemoteAction, _Widgets$Remote);

				function RemoteAction() {
						_classCallCheck(this, RemoteAction);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(RemoteAction).apply(this, arguments));
				}

				_createClass(RemoteAction, [{
						key: '___confirmationToast',


						/* TOAST */

						value: function ___confirmationToast() {

								if (this.$toast) return;

								/* VARIABLES */

								var options = _.cloneDeep(this.options.confirmation),
								    index = _.findIndex(options.buttons, 'isConfirmative'),
								    button = index >= 0 ? options.buttons[index] : _.last(options.buttons);

								/* ON CLICK */

								var _prevOnClick = button.onClick,
								    instance = this;

								button.onClick = function () {

										instance.request(true);

										if (_.isFunction(_prevOnClick)) {

												_prevOnClick.apply(this, arguments);
										}

										return false;
								};

								/* OPENING */

								this._replaceToast(options);
						}
				}, {
						key: '___loadingToast',
						value: function ___loadingToast() {

								this._replaceToast('<svg class="spinner ' + this.options.classes.spinner.color + ' ' + this.options.classes.spinner.size + ' ' + this.options.classes.spinner.css + '"><circle cx="1.625em" cy="1.625em" r="1.25em"></svg>');
						}
				}, {
						key: '_replaceToast',
						value: function _replaceToast(options) {

								var instance = $.toast(_.isString(options) ? { body: options, autoplay: false } : _.extend({}, options, { autoplay: false }));

								instance.close();

								var $toast = instance.$element;

								if (this.$toast) {

										this.$toast.html($toast.html()).widgetize();
								} else {

										this.$toast = $toast;

										this.$toast.toast('open');
								}
						}
				}, {
						key: '_destroyToast',
						value: function _destroyToast(delay) {

								if (!this.$toast) return;

								this._delay(function () {

										this.$toast.toast('close');

										this._delay(function () {

												this.$toast.remove();

												this.$toast = false;
										}, Widgets.Toast.config.options.animations.close);
								}, delay ? this.options.closingDelay : 0);
						}

						/* REQUEST HANDLERS */

				}, {
						key: '__beforesend',
						value: function __beforesend(res) {

								if (this.isAborted()) return;

								this.___loadingToast();

								_get(Object.getPrototypeOf(RemoteAction.prototype), '__beforesend', this).call(this, res);
						}
				}, {
						key: '__error',
						value: function __error(res) {

								if (this.isAborted()) return;

								var resj = _.isPlainObject(res) ? res : _.attempt(JSON.parse, res);

								this._replaceToast(_.isError(resj) || !('message' in resj) ? this.options.messages.error : resj.message);

								this._destroyToast(true);

								_get(Object.getPrototypeOf(RemoteAction.prototype), '__error', this).call(this, res);
						}
				}, {
						key: '__success',
						value: function __success(res) {

								if (this.isAborted()) return;

								var resj = _.isPlainObject(res) ? res : _.attempt(JSON.parse, res);

								if (!_.isError(resj)) {

										if (resj.refresh || resj.url === window.location.href || _.trim(resj.url, '/') === _.trim(window.location.pathname, '/')) {

												this._replaceToast(resj.message || this.options.messages.refreshing);

												location.reload();
										} else if (resj.url) {

												// In order to redirect to another domain the protocol must be provided. For instance `http://www.domain.tld` will work while `www.domain.tld` won't

												this._replaceToast(resj.message || this.options.messages.redirecting);

												location.assign(resj.url);
										} else {

												this._replaceToast(resj.message || this.options.messages.success);
										}
								} else {

										this._replaceToast(this.options.messages.success);
								}

								this._destroyToast(true);

								_get(Object.getPrototypeOf(RemoteAction.prototype), '__success', this).call(this, res);
						}

						/* API OVERRIDES */

				}, {
						key: 'request',
						value: function request(_confirmation) {

								if (!_confirmation && this.options.confirmation && 'buttons' in this.options.confirmation && this.options.confirmation.buttons.length) {

										this.___confirmationToast();
								} else {

										_get(Object.getPrototypeOf(RemoteAction.prototype), 'request', this).call(this);
								}
						}
				}, {
						key: 'abort',
						value: function abort() {

								this._destroyToast();

								_get(Object.getPrototypeOf(RemoteAction.prototype), 'abort', this).call(this);
						}
				}]);

				return RemoteAction;
		}(Widgets.Remote);

		/* FACTORY */

		Factory.init(RemoteAction, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Colors, Svelto.Sizes);

/* =========================================================================
 * Svelto - Widgets - Remote - Action (Helper)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ./action.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets) {

		'use strict';

		/* HELPER */

		$.remoteAction = function (ajax) {

				new Widgets.RemoteAction({ ajax: ajax }).request();
		};
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets);

/* =========================================================================
 * Svelto - Widgets - Remote - Action (Trigger)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../remote_trigger.js
 * @require ./action.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'remoteActionTrigger',
				plugin: true,
				selector: '.remote-action-trigger',
				options: {
						widget: Widgets.RemoteAction
				}
		};

		/* REMOTE ACTION TRIGGER */

		var RemoteActionTrigger = function (_Widgets$RemoteTrigge) {
				_inherits(RemoteActionTrigger, _Widgets$RemoteTrigge);

				function RemoteActionTrigger() {
						_classCallCheck(this, RemoteActionTrigger);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(RemoteActionTrigger).apply(this, arguments));
				}

				return RemoteActionTrigger;
		}(Widgets.RemoteTrigger);

		/* FACTORY */

		Factory.init(RemoteActionTrigger, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Remote - Modal
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../remote.js
 * @require widgets/modal/modal.js
 * @require widgets/toast/toast.js
 * ========================================================================= */

//TODO: Add locking capabilities, both at class-level and global-level (should be layout-level but seems impossible to implement)
//FIXME: Not well written

(function ($, _, Svelto, Widgets, Factory, Animations) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'remoteModal',
				options: {
						persistent: false, // Wether it should survive a change of page or not. Needed when used in frameworks like Meteor
						ajax: {
								cache: false,
								method: 'POST'
						},
						messages: {
								error: 'An error occurred, please try again later'
						},
						classes: {
								placeholder: 'remote-modal-placeholder',
								loaded: 'remote-modal-loaded',
								resizing: 'remote-modal-resizing',
								showing: 'remote-modal-showing'
						},
						animations: {
								resize: Animations.normal
						}
				}
		};

		/* REMOTE MODAL */

		var RemoteModal = function (_Widgets$Remote2) {
				_inherits(RemoteModal, _Widgets$Remote2);

				function RemoteModal() {
						_classCallCheck(this, RemoteModal);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(RemoteModal).apply(this, arguments));
				}

				_createClass(RemoteModal, [{
						key: '_getUrl',


						/* PRIVATE */

						value: function _getUrl() {

								return window.location.href.split('#')[0];
						}

						/* PERSISTENT */

				}, {
						key: '___persistent',
						value: function ___persistent() {

								if (!this.options.persistent) {

										this.___route();
								}
						}
				}, {
						key: '__route',
						value: function __route() {

								var currentUrl = this._getUrl();

								if (this._openUrl && this._openUrl !== currentUrl) {

										this.abort();
								}
						}

						/* MODAL */

				}, {
						key: '___loadingModal',
						value: function ___loadingModal() {

								/*
          <div class="modal ${this.options.classes.placeholder} card">
            <div class="card-block">
              <svg class="spinner">
                <circle cx="1.625em" cy="1.625em" r="1.25em">
              </svg>
            </div>
          </div>
        */

								this.$modal = $('<div class="modal ' + this.options.classes.placeholder + ' card"><div class="card-block"><svg class="spinner"><circle cx="1.625em" cy="1.625em" r="1.25em"></svg></div></div>').appendTo(this.$layout);
						}
				}, {
						key: '_destroyModal',
						value: function _destroyModal() {

								if (!this.$modal) return;

								this.$modal.modal('close');

								this._delay(function () {

										if (!this.$modal) return;

										this.$modal.remove();

										this.$modal = false;
								}, Widgets.Modal.config.options.animations.close);
						}

						/* ABORT */

				}, {
						key: '___abort',
						value: function ___abort() {

								this._on(true, this.$modal, 'modal:beforeclose', this.abort);
						}

						/* REQUEST HANDLERS */

				}, {
						key: '__beforesend',
						value: function __beforesend(res) {

								if (this.isAborted()) return;

								this._defer(function () {

										this._openUrl = this._getUrl();
								});

								this.___persistent();
								this.___loadingModal();
								this.___abort();

								this.$modal.modal('open');

								_get(Object.getPrototypeOf(RemoteModal.prototype), '__beforesend', this).call(this, res);
						}
				}, {
						key: '__error',
						value: function __error(res) {

								if (this.isAborted()) return;

								var resj = _.isPlainObject(res) ? res : _.attempt(JSON.parse, res);

								$.toast(_.isError(resj) || !('message' in resj) ? this.options.messages.error : resj.message);

								this._destroyModal();

								_get(Object.getPrototypeOf(RemoteModal.prototype), '__error', this).call(this, res);
						}
				}, {
						key: '__success',
						value: function __success(res) {

								if (this.isAborted()) return;

								var resj = _.isPlainObject(res) ? res : _.attempt(JSON.parse, res);

								if (_.isError(resj) || !('modal' in resj)) return this.__error(res);

								/* VARIABLES */

								var prevRect = this.$modal.getRect(),
								    $remoteModal = $(resj.modal);

								$remoteModal.addClass(Widgets.Modal.config.options.classes.show).addClass(Widgets.Modal.config.options.classes.open);

								/* AVOIDING MODAL CLOSE */

								var instance = this.$modal.modal('instance');
								instance.close = instance._reset;

								/* RESIZING */

								this._frame(function () {

										this.$modal.replaceWith($remoteModal);
										this.$modal = $remoteModal;
										this.$modal.widgetize();

										var newRect = this.$modal.getRect();

										this.$modal.css({
												width: prevRect.width,
												height: prevRect.height
										});

										this.$modal.addClass(this.options.classes.placeholder).addClass(this.options.classes.resizing);

										this._frame(function () {
												var _this63 = this;

												this.$modal.addClass(this.options.classes.showing);

												this.$modal.animate({
														width: newRect.width,
														height: newRect.height
												}, this.options.animations.resize, function () {
														_this63.$modal.css({
																width: '',
																height: ''
														}).removeClass(_this63.options.classes.placeholder + ' ' + _this63.options.classes.loaded + ' ' + _this63.options.classes.resizing + ' ' + _this63.options.classes.showing);
												});
										});
								});

								_get(Object.getPrototypeOf(RemoteModal.prototype), '__success', this).call(this, res);
						}

						/* API OVERRIDES */

				}, {
						key: 'abort',
						value: function abort() {

								this._destroyModal();

								_get(Object.getPrototypeOf(RemoteModal.prototype), 'abort', this).call(this);
						}
				}]);

				return RemoteModal;
		}(Widgets.Remote);

		/* FACTORY */

		Factory.init(RemoteModal, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Animations);

/* =========================================================================
 * Svelto - Widgets - Remote - Modal (Helper)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ./modal.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets) {

		'use strict';

		/* HELPER */

		$.remoteModal = function (ajax) {

				new Widgets.RemoteModal({ ajax: ajax }).request();
		};
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets);

/* =========================================================================
 * Svelto - Widgets - Remote - Modal (Trigger)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../remote_trigger.js
 * @require ./modal.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'remoteModalTrigger',
				plugin: true,
				selector: '.remote-modal-trigger',
				options: {
						widget: Widgets.RemoteModal
				}
		};

		/* REMOTE MODAL TRIGGER */

		var RemoteModalTrigger = function (_Widgets$RemoteTrigge2) {
				_inherits(RemoteModalTrigger, _Widgets$RemoteTrigge2);

				function RemoteModalTrigger() {
						_classCallCheck(this, RemoteModalTrigger);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(RemoteModalTrigger).apply(this, arguments));
				}

				return RemoteModalTrigger;
		}(Widgets.RemoteTrigger);

		/* FACTORY */

		Factory.init(RemoteModalTrigger, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Tagbox
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/keyboard/keyboard.js
 * @require widgets/toast/toast.js
 * ========================================================================= */

//FIXME: Auto focus on the partial input doesn't work good on mobile, the keyboard keeps opening and closing

(function ($, _, Svelto, Widgets, Factory, Colors, Sizes, Pointer, Keyboard) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'tagbox',
				plugin: true,
				selector: '.tagbox',
				templates: {
						tag: '<div class="label tagbox-tag <%= o.color %> <%= o.size %> <%= o.css %>" data-tag-value="<%= o.value %>">' + '<span>' + '<%= o.value %>' + '</span>' + ('<i class="icon ' + Sizes.xsmall + ' actionable tagbox-tag-remover">close</i>') + '</div>'
				},
				options: {
						init: '', // Initial value
						tags: [],
						tag: {
								minLength: 3,
								color: Colors.gray,
								size: '',
								css: 'circular'
						},
						characters: {
								forbid: true, // Forbid or not
								forbidden: ['<', '>', ';', '`'],
								separator: ',', // It will also become kind of a forbidden character, used for insertion
								inserters: [Keyboard.keys.ENTER, Keyboard.keys.TAB] // They are keyCodes
						},
						sort: false, // The tags will be outputted in alphanumeric-sort order
						escape: false, // Escape potential XSS characters
						deburr: false, // Replace non basic-latin characters
						messages: {
								tooShort: '`$1` is shorter than $2 characters',
								duplicate: '`$1` is a duplicate',
								forbidden: 'The character you entered is forbidden'
						},
						datas: {
								value: 'tag-value'
						},
						selectors: {
								input: 'input.hidden',
								partial: 'input.tagbox-partial, .tagbox-partial input',
								tags: '.tagbox-tags',
								tag: '.tagbox-tag',
								tagLabel: 'span',
								tagRemover: '.tagbox-tag-remover'
						},
						callbacks: {
								change: _.noop,
								add: _.noop,
								remove: _.noop,
								empty: _.noop
						}
				}
		};

		/* TAGBOX */

		var Tagbox = function (_Widgets$Widget33) {
				_inherits(Tagbox, _Widgets$Widget33);

				function Tagbox() {
						_classCallCheck(this, Tagbox);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Tagbox).apply(this, arguments));
				}

				_createClass(Tagbox, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this.$tagbox = this.$element;
								this.$tags = this.$tagbox.find(this.options.selectors.tags);
								this.$input = this.$tagbox.find(this.options.selectors.input);
								this.$partial = this.$tagbox.find(this.options.selectors.partial);
						}
				}, {
						key: '_init',
						value: function _init(suppressTriggers) {

								/* REMOVE PREVIOUS */

								this.$tagbox.find(this.options.selectors.tag).remove();

								/* OPTIONS */

								this.options.init = this.$input.val() || this.options.init;

								/* POPULATING */

								this.add(this.options.init, suppressTriggers);
						}
				}, {
						key: '_events',
						value: function _events() {

								this.___partial();

								this.___tapOnEmpty();
								this.___tapOnTagRemover();
						}

						/* PRIVATE */

				}, {
						key: '_sanitizeTag',
						value: function _sanitizeTag(value) {

								value = _.trim(value);

								if (this.options.escape) {

										value = _.escape(value);
								}

								if (this.options.deburr) {

										value = _.deburr(value);
								}

								return value;
						}
				}, {
						key: '_getTagHtml',
						value: function _getTagHtml(value) {

								return this._template('tag', _.extend({ value: value }, this.options.tag));
						}
				}, {
						key: '_clearPartial',
						value: function _clearPartial() {

								this.$partial.val('').trigger('change');
						}

						/* UPDATE */

				}, {
						key: '_updateInput',
						value: function _updateInput() {

								this.$input.val(this.options.tags.join(this.options.characters.separator)).trigger('change');
						}

						/* TAG */

				}, {
						key: '_add',
						value: function _add(value) {

								var valueTrimmed = _.trim(value);

								value = this._sanitizeTag(value);

								if (valueTrimmed.length < this.options.tag.minLength) {

										if (valueTrimmed.length) {
												// So it won't be triggered when the user presses enter and the $partial is empty

												$.toast(_.format(this.options.messages.tooShort, value, this.options.tag.minLength));
										}
								} else if (_.includes(this.options.tags, value)) {

										$.toast(_.format(this.options.messages.duplicate, value));
								} else {

										this.options.tags.push(value);

										if (this.options.sort) {

												this.options.tags.sort();
										}

										var tagHtml = this._getTagHtml(value);

										if (this.options.tags.length === 1) {

												this.$tags.prepend(tagHtml);
										} else if (!this.options.sort) {

												this.$tagbox.find(this.options.selectors.tag).last().after(tagHtml);
										} else {

												var index = this.options.tags.indexOf(value);

												if (index === 0) {

														this.$tagbox.find(this.options.selectors.tag).first().before(tagHtml);
												} else {

														this.$tagbox.find(this.options.selectors.tag).eq(index - 1).after(tagHtml);
												}
										}

										return true;
								}

								return false;
						}
				}, {
						key: '_remove',
						value: function _remove($tag, tag) {

								$tag.remove();

								_.pull(this.options.tags, tag);
						}

						/* PARTIAL */

				}, {
						key: '___partial',
						value: function ___partial() {

								this._on(this.$partial, 'keypress keydown', this.__keypressKeydown); // `keypress` is for printable characters, `keydown` for the others

								this._on(this.$partial, 'paste', this.__paste);
						}

						/* KEYPRESS / KEYDOWN */

				}, {
						key: '__keypressKeydown',
						value: function __keypressKeydown(event) {

								var value = this.$partial.val();

								if (_.includes(this.options.characters.inserters, event.keyCode) || event.keyCode === this.options.characters.separator.charCodeAt(0)) {

										var added = this.add(value);

										if (added) {

												this._clearPartial();
										}

										event.preventDefault();
										event.stopImmediatePropagation();
								} else if (event.keyCode === Keyboard.keys.BACKSPACE) {

										if (!value.length && this.options.tags.length) {

												var $tag = this.$tagbox.find(this.options.selectors.tag).last(),
												    edit = !Keyboard.keystroke.hasCtrlOrCmd(event);

												this.remove($tag, edit);

												event.preventDefault();
												event.stopImmediatePropagation();
										}
								} else if (this.options.characters.forbid && _.includes(this.options.characters.forbidden, String.fromCharCode(event.keyCode))) {

										$.toast(this.options.messages.forbidden);

										event.preventDefault();
										event.stopImmediatePropagation();
								}
						}

						/* PASTE */

				}, {
						key: '__paste',
						value: function __paste(event) {

								this.add(event.originalEvent.clipboardData.getData('text'));

								event.preventDefault();
								event.stopImmediatePropagation();
						}

						/* TAP ON TAG REMOVER */

				}, {
						key: '___tapOnTagRemover',
						value: function ___tapOnTagRemover() {

								this._on(Pointer.tap, this.options.selectors.tagRemover, this.__tapOnTagRemover);
						}
				}, {
						key: '__tapOnTagRemover',
						value: function __tapOnTagRemover(event) {

								event.stopImmediatePropagation();

								var $tag = $(event.currentTarget).closest(this.options.selectors.tag);

								this.remove($tag);
						}

						/* TAP ON EMPTY */

				}, {
						key: '___tapOnEmpty',
						value: function ___tapOnEmpty() {

								this._on(Pointer.tap, this.__tapOnEmpty);
						}
				}, {
						key: '__tapOnEmpty',
						value: function __tapOnEmpty(event) {

								if (document.activeElement !== this.$partial[0] && !$(event.target).is(this.options.selectors.partial + ',' + this.options.selectors.tagLabel)) {
										//TODO: Add an helper for checking if is focused

										this.$partial.focus();
								}
						}

						/* API */

				}, {
						key: 'get',
						value: function get() {

								return _.clone(this.options.tags);
						}
				}, {
						key: 'add',
						value: function add(tag, suppressTriggers) {
								// The tag can be a string containing a single tag, multiple tags separated by `this.options.characters.separator`, or it can be an array (nested or not) of those strings

								if (_.isArray(tag)) {

										tag = _.flatten(tag).join(this.options.characters.separator);
								}

								var tags = tag.split(this.options.characters.separator),
								    adds = _.map(tags, this._add.bind(this));

								var added = !!_.compact(adds).length;

								if (added) {

										this._updateInput();

										if (!suppressTriggers) {

												this._trigger('change');

												var addedTags = _.filter(tags, function (tag, index) {
														return adds[index];
												});

												this._trigger('add', addedTags);
										}
								}

								return added;
						}
				}, {
						key: 'remove',
						value: function remove(tag, edit, suppressTriggers) {
								// The tag can be a string containing a single tag, multiple tags separated by `this.options.characters.separator`, or it can be an array (nested or not) of those strings. In addition it can also be the jQuery object of that tag.

								var $tags = [],
								    tags = [];

								if (tag instanceof $) {

										$tags = [tag];
										tags = [tag.data(this.options.datas.value)];
								} else {

										if (_.isArray(tag)) {

												tag = _.flatten(tag).join(this.options.characters.separator);
										}

										tag = tag.split(this.options.characters.separator);

										for (var i = 0, l = tag.length; i < l; i++) {

												var value = this._sanitizeTag(tag[i]),
												    $tag = this.$tagbox.find(this.options.selectors.tag + '[data-' + this.options.datas.value + '="' + value.replace(/"/g, '\\"') + '"]');

												if ($tag.length === 1) {

														$tags.push($tag);
														tags.push(value);
												}
										}
								}

								if (tags.length) {

										for (var _i2 = 0, _l2 = tags.length; _i2 < _l2; _i2++) {

												this._remove($tags[_i2], tags[_i2]);
										}

										this._updateInput();

										if (tags.length === 1 && edit === true) {

												this.$partial.val(tags[0]).trigger('change');
										}

										if (!suppressTriggers) {

												this._trigger('change');

												this._trigger('remove', tags);

												if (!this.options.tags.length) {

														this._trigger('empty');
												}
										}
								}
						}
				}, {
						key: 'clear',
						value: function clear(suppressTriggers) {

								if (this.options.tags.length) {

										var previous = this.options.tags;

										this.options.tags = [];

										this.$tagbox.find(this.options.selectors.tag).remove();

										this._clearPartial();

										this._updateInput();

										if (!suppressTriggers) {

												this._trigger('change');

												this._trigger('remove', previous);

												this._trigger('empty');
										}
								}
						}
				}, {
						key: 'reset',
						value: function reset() {

								var previous = this.options.tags;

								this.clear(true);

								this._init(true);

								if (!_.isEqual(previous, this.options.tags)) {

										this._trigger('change');

										var added = _.difference(this.options.tags, previous);

										if (added.length) {

												this._trigger('add', added);
										}

										var removed = _.difference(previous, this.options.tags);

										if (removed.length) {

												this._trigger('remove', removed);
										}

										if (!this.options.tags.length) {

												this._trigger('empty');
										}
								}
						}
				}]);

				return Tagbox;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(Tagbox, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Colors, Svelto.Sizes, Svelto.Pointer, Svelto.Keyboard);

/* =========================================================================
 * Svelto - Widgets - Toast (Helper)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ./toast.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets) {

		'use strict';

		/* HELPER */

		$.toast = function () {
				var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];


				/* OPTIONS */

				options = _.isPlainObject(options) ? options : { body: String(options) };

				/* TYPE */

				if (options.buttons) {

						options.type = 'action';
				}

				/* TOAST */

				return new Widgets.Toast(options);
		};
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets);

/* =========================================================================
 * Svelto - Lib - Touching
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/svelto/svelto.js
 * ========================================================================= */

(function ($, _, Svelto) {

		'use strict';

		/* UTILITIES */

		var getOverlappingArea = function getOverlappingArea(rect1, rect2) {

				var overlapX = Math.max(0, Math.min(rect1.right, rect2.right) - Math.max(rect1.left, rect2.left)),
				    overlapY = Math.max(0, Math.min(rect1.bottom, rect2.bottom) - Math.max(rect1.top, rect2.top));

				return overlapX * overlapY;
		};

		/* DEFAULTS */

		var defaults = {
				point: false, // Used for the punctual search
				$comparer: false, // Used for the overlapping search
				$not: false,
				onlyBest: false
		};

		/* TOUCHING */

		$.fn.touching = function (options) {

				/* OPTIONS */

				options = _.extend({}, $.fn.touching.defaults, options);

				/* SEARCHABLE */

				var $searchable = options.$not ? this.not(options.$not) : this;

				/* COMPARER */

				if (options.$comparer) {

						var rect1 = options.$comparer.getRect(),
						    nodes = [],
						    areas = [];

						var _iteratorNormalCompletion12 = true;
						var _didIteratorError12 = false;
						var _iteratorError12 = undefined;

						try {
								for (var _iterator12 = $searchable[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
										var searchable = _step12.value;


										var rect2 = $.getRect(searchable),
										    area = getOverlappingArea(rect1, rect2);

										if (area > 0) {

												nodes.push(searchable);
												areas.push(area);
										}
								}
						} catch (err) {
								_didIteratorError12 = true;
								_iteratorError12 = err;
						} finally {
								try {
										if (!_iteratorNormalCompletion12 && _iterator12.return) {
												_iterator12.return();
										}
								} finally {
										if (_didIteratorError12) {
												throw _iteratorError12;
										}
								}
						}

						return nodes.length ? options.onlyBest ? $(nodes[areas.indexOf(_.max(areas))]) : $(nodes) : false;
				}

				/* PUNCTUAL */

				if (options.point) {
						var _iteratorNormalCompletion13 = true;
						var _didIteratorError13 = false;
						var _iteratorError13 = undefined;

						try {

								for (var _iterator13 = $searchable[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
										var _searchable = _step13.value;


										var rect = $.getRect(_searchable);

										if (options.point.y >= rect.top && options.point.y <= rect.bottom && options.point.x >= rect.left && options.point.x <= rect.right) {

												return $(_searchable);
										}
								}
						} catch (err) {
								_didIteratorError13 = true;
								_iteratorError13 = err;
						} finally {
								try {
										if (!_iteratorNormalCompletion13 && _iterator13.return) {
												_iterator13.return();
										}
								} finally {
										if (_didIteratorError13) {
												throw _iteratorError13;
										}
								}
						}
				}

				/* DEFAULT */

				return false;
		};

		/* BINDING */

		$.fn.touching.defaults = defaults;
})(Svelto.$, Svelto._, Svelto);

/* =========================================================================
 * Svelto - Widgets - Droppable
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/widget/widget.js
 * @require lib/touching/touching.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'droppable',
				plugin: true,
				selector: '.droppable',
				options: {
						selector: '*', // Only Draggables matching this selector will be able to drop inside this Droppable
						classes: {
								target: undefined, // The class to attach to the Droppable if the Draggable can be dropped inside of it
								hover: undefined // The class to attach to the Droppable when hovered by a Draggable
						},
						callbacks: {
								enter: _.noop,
								leave: _.noop,
								drop: _.noop
						}
				}
		};

		/* DROPPABLE */

		var Droppable = function (_Widgets$Widget34) {
				_inherits(Droppable, _Widgets$Widget34);

				function Droppable() {
						_classCallCheck(this, Droppable);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Droppable).apply(this, arguments));
				}

				_createClass(Droppable, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this.droppable = this.element;
								this.$droppable = this.$element;

								this.__isCompatible = undefined;
								this._wasHovering = false;
						}
				}, {
						key: '_events',
						value: function _events() {

								this.___drag();
						}

						/* PRIVATE */

				}, {
						key: '_isCompatible',
						value: function _isCompatible(element) {

								if (_.isUndefined(this.__isCompatible)) {

										this.__isCompatible = $(element).is(this.options.selector);

										if (this.__isCompatible) {

												this.$droppable.addClass(this.options.classes.target);
										}
								}

								return this.__isCompatible;
						}
				}, {
						key: '_isPointHovering',
						value: function _isPointHovering(pointXY) {

								return !!this.$droppable.touching({ point: pointXY }).length;
						}

						/* DRAG */

				}, {
						key: '___drag',
						value: function ___drag() {

								this.___dragMove();
								this.___dragEnd();
						}

						/* DRAG MOVE */

				}, {
						key: '___dragMove',
						value: function ___dragMove() {

								this._on(this.$layout, 'draggable:move', this._throttle(this.__dragMove, 100));
						}
				}, {
						key: '__dragMove',
						value: function __dragMove(event, data) {

								if (this._isCompatible(data.draggable)) {

										var isHovering = this._isPointHovering(data.moveXY);

										if (isHovering !== this._wasHovering) {

												this.$droppable.toggleClass(this.options.classes.hover, isHovering);

												this._trigger(isHovering ? 'enter' : 'leave', { draggable: data.draggable, helper: data.helper, droppable: this.droppable });
										}

										this._wasHovering = isHovering;
								}
						}

						/* DRAG END */

				}, {
						key: '___dragEnd',
						value: function ___dragEnd() {

								this._on(this.$layout, 'draggable:end', this.__dragEnd);
						}
				}, {
						key: '__dragEnd',
						value: function __dragEnd(event, data) {

								if (this._isCompatible(data.draggable)) {

										this.$droppable.removeClass(this.options.classes.target);

										if (this._isPointHovering(data.endXY)) {

												if (this._wasHovering) {

														this.$droppable.removeClass(this.options.classes.hover);
												}

												this._trigger('drop', { draggable: data.draggable, helper: data.helper, droppable: this.droppable });
										}
								}

								this.__isCompatible = undefined;
						}
				}]);

				return Droppable;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(Droppable, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Lib - Transform
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/svelto/svelto.js
 * ========================================================================= */

/* TRANSFORM UTILITIES */

(function ($, _, Modernizr, Svelto) {

		'use strict';

		/* MATRIX */

		var property = Modernizr.prefixedCSS('transform');

		$.fn.matrix = function (values) {

				if (values) {

						values = values.map(function (val) {
								return Number(val).toFixed(20);
						}).join(',');

						this.css(property, 'matrix(' + values + ')');

						return this;
				} else {

						var transformStr = this.css(property);

						return transformStr && transformStr !== 'none' ? transformStr.match(/[0-9., e-]+/)[0].split(', ').map(function (value) {
								return parseFloat(value);
						}) : [1, 0, 0, 1, 0, 0];
				}
		};

		/* TRANSFORMATIONS */

		var transformations = ['scaleX', 'skewY', 'skewX', 'scaleY', 'translateX', 'translateY']; // Their index is also the corresponsing index when applying `transform: matrix()`

		for (var i = 0, l = transformations.length; i < l; i++) {

				$.fn[transformations[i]] = function (index) {

						return function (value) {

								var matrix = this.matrix();

								if (!_.isUndefined(value)) {

										matrix[index] = value;

										return this.matrix(matrix);
								} else {

										return matrix[index];
								}
						};
				}(i);
		}

		/* TRANSLATE */

		$.fn.translate = function (X, Y) {

				var matrix = this.matrix();

				if (!_.isUndefined(X) && !_.isUndefined(Y)) {

						matrix[4] = X;
						matrix[5] = Y;

						return this.matrix(matrix);
				} else {

						return {
								x: matrix[4],
								y: matrix[5]
						};
				}
		};
})(Svelto.$, Svelto._, Svelto.Modernizr, Svelto);

/* =========================================================================
 * Svelto - Lib - Positionate
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/svelto/svelto.js
 * @require lib/directions/directions.js
 * @require lib/embedded_css/embedded_css.js
 * @require lib/transform/transform.js
 * ========================================================================= */

//FIXME: If the positionable element is less than half of the anchor, and it must be pointed, than the pointer may be not well positionated (expecially if we are not aligning to the center)

(function ($, _, Svelto, Directions, EmbeddedCSS) {

		'use strict';

		/* VARIABLES */

		var $window = $(window);

		/* UTILITES */

		var isHorizontal = function isHorizontal(direction) {

				return direction === 'left' || direction === 'right';
		};

		var isVertical = function isVertical(direction) {

				return !isHorizontal(direction);
		};

		/* DEFAULTS */

		var defaults = {
				axis: false, // Set a preferred axis
				strict: false, // If enabled only use the setted axis/direction, even if it won't be the optimial choice
				$anchor: false, // Positionate next to an $anchor element
				point: false, // Positionate at coordinates, ex: { x: number, y: number }
				pointer: false, // The element pointing to the anchor, can be: false -> no pointer, 'auto' -> pointer using the `pointing` decorator, $element -> element used as pointer
				spacing: 0, // Extra space to leave around the positionable element
				constrainer: { // Constrain the $positionable inside the $element
						$element: false, // If we want to keep the $positionable inside this $element
						center: false, // Set the constrain type, it will constrain the whole shape, or the center
						tolerance: { // The amount of pixel flexibility that a constrainer has
								x: 0,
								y: 0
						}
				},
				directions: { // How the directions should be prioritized when selecting the `x` axis, the `y` axis, or all of them
						x: ['right', 'left'],
						y: ['bottom', 'top'],
						all: ['bottom', 'right', 'left', 'top']
				},
				alignment: { // Set the alignment of the positionable relative to the anchor
						x: 'center', // `left`, center`, `right`
						y: 'center' // `top`, center`, `bottom`
				},
				callbacks: {
						change: _.noop
				}
		};

		/* POSITIONATE */

		$.fn.positionate = function (options) {

				/* NO ELEMENTS */

				if (!this.length) return this;

				/* OPTIONS */

				options = _.merge({}, $.fn.positionate.defaults, options);

				/* VARIABLES */

				var positionable = this[0],
				    $positionable = $(positionable),
				    positionableRect = $positionable.getRect(),
				    windowWidth = $window.width(),
				    windowHeight = $window.height(),
				    directions = _.uniq(_.union(options.direction ? [options.direction] : [], options.axis ? options.directions[options.axis] : [], !options.strict || !options.direction && !options.axis ? options.directions.all : [])),
				    anchorRect = options.$anchor ? options.$anchor.getRect() : { top: options.point.y - window.scrollY, bottom: options.point.y - window.scrollY, left: options.point.x - window.scrollX, right: options.point.x - window.scrollX, width: 0, height: 0 };

				/* ID */

				positionable._positionateGuid = positionable._positionateGuid || $.guid++;
				positionable._positionateGuc = 'positionate-' + positionable._positionateGuid;

				$positionable.addClass(positionable._positionateGuc);

				/* SPACES */

				var spaces = directions.map(function (direction) {

						switch (direction) {

								case 'top':
										return anchorRect.top;

								case 'bottom':
										return windowHeight - anchorRect.bottom;

								case 'left':
										return anchorRect.left;

								case 'right':
										return windowWidth - anchorRect.right;

						}
				});

				/* SPACES PRIORITIZATION */

				spaces.forEach(function (space, index) {

						if (space < 0) {

								var opposite = Directions.getOpposite(directions[index]),
								    oppositeIndex = directions.indexOf(opposite);

								if (oppositeIndex !== -1) {

										_.move(directions, oppositeIndex, 0);
										_.move(spaces, oppositeIndex, 0);
								}
						}
				});

				/* AREAS */

				var areas = directions.map(function (direction, index) {

						switch (direction) {

								case 'top':
								case 'bottom':
										return Math.min(positionableRect.height, spaces[index]) * Math.min(windowWidth, positionableRect.width);

								case 'left':
								case 'right':
										return Math.min(positionableRect.width, spaces[index]) * Math.min(windowHeight, positionableRect.height);

						}
				});

				/* BEST DIRECTION */

				var bestIndex = areas.indexOf(_.max(areas)),
				    bestDirection = directions[bestIndex],
				    coordinates = {};

				/* TOP / LEFT */

				switch (bestDirection) {

						case 'top':
								coordinates.top = anchorRect.top - positionableRect.height - options.spacing;
								break;

						case 'bottom':
								coordinates.top = anchorRect.bottom + options.spacing;
								break;

						case 'left':
								coordinates.left = anchorRect.left - positionableRect.width - options.spacing;
								break;

						case 'right':
								coordinates.left = anchorRect.right + options.spacing;
								break;

				}

				switch (bestDirection) {

						case 'top':
						case 'bottom':
								switch (options.alignment.x) {
										case 'left':
												coordinates.left = anchorRect.left;
												break;
										case 'center':
												coordinates.left = anchorRect.left + anchorRect.width / 2 - positionableRect.width / 2;
												break;
										case 'right':
												coordinates.left = anchorRect.right - positionableRect.width;
												break;
								}
								break;

						case 'left':
						case 'right':
								switch (options.alignment.y) {
										case 'top':
												coordinates.top = anchorRect.top;
												break;
										case 'center':
												coordinates.top = anchorRect.top + anchorRect.height / 2 - positionableRect.height / 2;
												break;
										case 'bottom':
												coordinates.top = anchorRect.bottom - positionableRect.height;
												break;
								}
								break;

				}

				/* CONSTRAIN */

				if (options.$anchor) {

						var oppositeSpace = spaces[bestIndex],
						    isAnchorVisible = isVertical(bestDirection) ? oppositeSpace <= windowHeight : oppositeSpace <= windowWidth;

						if (isAnchorVisible) {

								coordinates.top = _.clamp(coordinates.top, options.spacing, windowHeight - positionableRect.height - options.spacing);
								coordinates.left = _.clamp(coordinates.left, options.spacing, windowWidth - positionableRect.width - options.spacing);
						}
				} else if (options.constrainer.$element) {

						var constrainerRect = options.constrainer.$element.getRect(),
						    halfWidth = options.constrainer.center ? positionableRect.width / 2 : 0,
						    halfHeight = options.constrainer.center ? positionableRect.height / 2 : 0;

						/* COORDINATES */

						coordinates.top = _.clamp(coordinates.top, constrainerRect.top - halfHeight - options.constrainer.tolerance.y + options.spacing, constrainerRect.bottom - positionableRect.height + halfHeight + options.constrainer.tolerance.y - options.spacing);
						coordinates.left = _.clamp(coordinates.left, constrainerRect.left - halfWidth - options.constrainer.tolerance.x + options.spacing, constrainerRect.right - positionableRect.width + halfWidth + options.constrainer.tolerance.x - options.spacing);
				}

				/* DATAS */

				var data = {
						positionable: positionable,
						coordinates: coordinates,
						direction: bestDirection
				};

				/* TRANSLATE */

				$positionable.translate(coordinates.left, coordinates.top);

				/* CSS CLASS */

				var prevDirection = positionable._positionatePrevDirection;

				positionable._positionatePrevDirection = bestDirection;

				if (prevDirection !== bestDirection) {

						$positionable.removeClass('position-' + prevDirection).addClass('position-' + bestDirection);
				}

				/* POINTER */

				var prevPointer = positionable._positionatePrevPointer;

				positionable._positionatePrevPointer = options.pointer;

				if (prevPointer === 'auto' && (options.pointer !== 'auto' || bestDirection !== prevDirection)) {

						var oppositeDirection = Directions.getOpposite(prevDirection);

						$positionable.removeClass('pointing-' + oppositeDirection);
				}

				if (options.pointer) {

						if (options.pointer === 'auto') {

								var _oppositeDirection = Directions.getOpposite(bestDirection);

								$positionable.addClass('pointing-' + _oppositeDirection);
						}

						/* MOVING */

						switch (bestDirection) {

								case 'top':
								case 'bottom':
										var deltaX = _.clamp(anchorRect.left - coordinates.left + anchorRect.width / 2, 0, positionableRect.width);
										if (options.pointer instanceof $) {
												options.pointer.translate(deltaX, 0);
										} else if (options.pointer === 'auto') {
												EmbeddedCSS.set('.' + positionable._positionateGuc + ':after', 'left:' + deltaX + 'px !important;'); //TODO: Maybe use `transform` instead, since it lead to improved performances
										}
										break;

								case 'left':
								case 'right':
										var deltaY = _.clamp(positionableRect.height, anchorRect.top - coordinates.top + anchorRect.height / 2, 0, positionableRect.height);
										if (options.pointer instanceof $) {
												options.pointer.translate(0, deltaY);
										} else if (options.pointer === 'auto') {
												EmbeddedCSS.set('.' + positionable._positionateGuc + ':after', 'top:' + deltaY + 'px !important;'); //TODO: Maybe use `transform` instead, since it lead to improved performances
										}
										break;

						}
				}

				/* CALLBACK */

				options.callbacks.change(data);

				/* RETURN */

				return this;
		};

		/* BINDING */

		$.fn.positionate.defaults = defaults;
})(Svelto.$, Svelto._, Svelto, Svelto.Directions, Svelto.EmbeddedCSS);

/* =========================================================================
 * Svelto - Widgets - Popover
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/widget/widget.js
 * @require lib/embedded_css/embedded_css.js
 * @require lib/positionate/positionate.js
 * @require lib/touching/touching.js
 * ========================================================================= */

//FIXME: Close it if after a `route` event the trigger element is no longer visible

(function ($, _, Svelto, Widgets, Factory, Pointer, EmbeddedCSS, Animations) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'popover',
				plugin: true,
				selector: '.popover',
				options: {
						contentChangeEvents: 'inputAutogrow:change tabs:change tagbox:change textareaAutogrow:change', // When one of these events are triggered update the position because the content probably changed
						positionate: {}, // Extending `$.positionate` options
						spacing: {
								affixed: 0,
								noTip: 5,
								normal: 12
						},
						classes: {
								anchorDirection: 'popover-anchor-$1',
								noTip: 'no-tip',
								affixed: 'affixed',
								moving: 'moving',
								show: 'show',
								open: 'open'
						},
						animations: {
								open: Animations.fast,
								close: Animations.fast
						},
						callbacks: {
								beforeopen: _.noop,
								open: _.noop,
								close: _.noop
						}
				}
		};

		/* POPOVER */

		var Popover = function (_Widgets$Widget35) {
				_inherits(Popover, _Widgets$Widget35);

				function Popover() {
						_classCallCheck(this, Popover);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Popover).apply(this, arguments));
				}

				_createClass(Popover, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this.$popover = this.$element;

								this.$popover.addClass(this.guc);

								this.hasTip = !this.$popover.hasClass(this.options.classes.noTip);
								this.isAffixed = this.$popover.hasClass(this.options.classes.affixed);

								this._isOpen = false;
						}
				}, {
						key: '_events',
						value: function _events() {

								if (this._isOpen) {

										this.___contentChange();
										this.___resize();
										this.___parentsScroll();
										this.___layoutTap();
								}
						}
				}, {
						key: '_destroy',
						value: function _destroy() {

								this.close();
						}

						/* CONTENT CHANGE */

				}, {
						key: '___contentChange',
						value: function ___contentChange() {

								this._on(true, this.options.contentChangeEvents, this._positionate);
						}

						/* RESIZE */

				}, {
						key: '___resize',
						value: function ___resize() {

								this._on(true, this.$window, 'resize', this._throttle(this._positionate, 100)); //FIXME: It should handle a generic parent `resize`-like event, not just on `this.$window`
						}

						/* PARENTS SCROLL */

				}, {
						key: '___parentsScroll',
						value: function ___parentsScroll() {

								var $parents = this.$popover.parents().add(this.$anchor ? this.$anchor.parents() : undefined).add(this.$window);

								this._on(true, $parents, 'scroll', this._throttle(this._positionate, 100));
						}

						/* LAYOUT TAP */

				}, {
						key: '___layoutTap',
						value: function ___layoutTap() {

								this._on(true, this.$layout, Pointer.tap, this.__layoutTap);
						}
				}, {
						key: '__layoutTap',
						value: function __layoutTap(event) {

								if (event === this._openEvent || this.$popover.touching({ point: $.eventXY(event) }).length) return;

								this.close();
						}

						/* POSITIONATE */

				}, {
						key: '_positionate',
						value: function _positionate() {

								/* VARIABLES */

								var noTip = this.$anchor && this.$anchor.hasClass(this.options.classes.noTip) || !this.hasTip || this.isAffixed,
								    spacing = this.isAffixed ? this.options.spacing.affixed : noTip ? this.options.spacing.noTip : this.options.spacing.normal;

								/* POSITIONATE */

								this.$popover.positionate(_.extend({
										$anchor: this.$anchor,
										pointer: noTip ? false : 'auto',
										spacing: spacing,
										callbacks: {
												change: this.__positionChange.bind(this)
										}
								}, this.options.positionate));
						}
				}, {
						key: '_toggleAnchorDirectionClass',
						value: function _toggleAnchorDirectionClass(direction, force) {

								if (!this.$anchor) return;

								this.$anchor.toggleClass(_.format(this.options.classes.anchorDirection, direction), force);
						}
				}, {
						key: '__positionChange',
						value: function __positionChange(data) {

								/* ANCHOR CLASS */

								if (this._prevDirection !== data.direction) {

										if (this._prevDirection) {

												this._toggleAnchorDirectionClass(this._prevDirection, false);
										}

										this._toggleAnchorDirectionClass(data.direction, true);

										this._prevDirection = data.direction;
								}
						}

						/* API */

				}, {
						key: 'isOpen',
						value: function isOpen() {

								return this._isOpen;
						}
				}, {
						key: 'toggle',
						value: function toggle(force, anchor, event) {

								if (!_.isBoolean(force)) {

										force = anchor && (!this.$anchor || this.$anchor && this.$anchor[0] !== anchor) ? true : this.$prevAnchor || this.$anchor || 'point' in this.options.positionate ? !this._isOpen : false;
								}

								this[force ? 'open' : 'close'](anchor, event);
						}
				}, {
						key: 'open',
						value: function open(anchor, event) {

								/* RESTORING ANCHOR */

								if (!anchor && this.$prevAnchor && !('point' in this.options.positionate)) {

										anchor = this.$prevAnchor[0];
								}

								/* CHECKING */

								if (this._lock || (!anchor || this._isOpen && this.$anchor && anchor === this.$anchor[0]) && !('point' in this.options.positionate)) return;

								/* VARIABLES */

								this._lock = true;
								this._isOpen = true;

								this._openEvent = event;
								this._wasMoving = false;

								/* PREVIOUS ANCHOR */

								if (this.$anchor) {

										this._toggleAnchorDirectionClass(this._prevDirection, false);
										this._prevDirection = false;

										this.$prevAnchor = this.$anchor;

										if (this._isOpen) {

												this._wasMoving = true;

												this.$popover.addClass(this.options.classes.moving);
										}
								}

								/* ANCHOR */

								this.$anchor = anchor ? $(anchor) : false;

								/* BEFORE OPENING */

								this._trigger('beforeopen');

								/* OPENING */

								this._frame(function () {

										this.$popover.addClass('show');

										this._positionate();

										this._frame(function () {

												this.$popover.addClass(this.options.classes.open);

												this._lock = false;

												this._trigger('open');
										});
								});

								/* EVENTS */

								this._reset();

								this.___layoutTap();
								this.___contentChange();
								this.___resize();
								this.___parentsScroll();
						}
				}, {
						key: 'close',
						value: function close() {

								if (this._lock || !this._isOpen) return;

								/* VARIABLES */

								this._lock = true;
								this._isOpen = false;

								/* ANCHOR */

								this._toggleAnchorDirectionClass(this._prevDirection, false);
								this._prevDirection = false;

								this.$prevAnchor = this.$anchor;
								this.$anchor = false;

								/* CLOSING */

								this._frame(function () {

										this.$popover.removeClass(this.options.classes.open);

										if (this._wasMoving) {

												this.$popover.removeClass(this.options.classes.moving);
										}

										this._delay(function () {

												this.$popover.removeClass(this.options.classes.show);

												this._lock = false;

												this._trigger('close');
										}, this.options.animations.close);
								});

								/* RESETTING */

								this._reset();
						}
				}]);

				return Popover;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(Popover, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Pointer, Svelto.EmbeddedCSS, Svelto.Animations);

/* =========================================================================
 * Svelto - Widgets - Popover - Targeters - Closer
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../popover.js
 * @require widgets/targeter/closer/closer.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'popoverCloser',
				plugin: true,
				selector: '.popover-closer',
				options: {
						widget: Widgets.Popover
				}
		};

		/* POPOVER CLOSER */

		var PopoverCloser = function (_Widgets$Closer7) {
				_inherits(PopoverCloser, _Widgets$Closer7);

				function PopoverCloser() {
						_classCallCheck(this, PopoverCloser);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(PopoverCloser).apply(this, arguments));
				}

				return PopoverCloser;
		}(Widgets.Closer);

		/* FACTORY */

		Factory.init(PopoverCloser, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Popover - Targeters - Opener
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../popover.js
 * @require widgets/targeter/opener/opener.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'popoverOpener',
				plugin: true,
				selector: '.popover-opener',
				options: {
						widget: Widgets.Popover
				}
		};

		/* POPOVER OPENER */

		var PopoverOpener = function (_Widgets$Opener6) {
				_inherits(PopoverOpener, _Widgets$Opener6);

				function PopoverOpener() {
						_classCallCheck(this, PopoverOpener);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(PopoverOpener).apply(this, arguments));
				}

				return PopoverOpener;
		}(Widgets.Opener);

		/* FACTORY */

		Factory.init(PopoverOpener, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Popover - Targeters - Toggler
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../popover.js
 * @require widgets/targeter/toggler/toggler.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'popoverToggler',
				plugin: true,
				selector: '.popover-toggler',
				options: {
						widget: Widgets.Popover
				}
		};

		/* POPOVER TOGGLER */

		var PopoverToggler = function (_Widgets$Toggler6) {
				_inherits(PopoverToggler, _Widgets$Toggler6);

				function PopoverToggler() {
						_classCallCheck(this, PopoverToggler);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(PopoverToggler).apply(this, arguments));
				}

				return PopoverToggler;
		}(Widgets.Toggler);

		/* FACTORY */

		Factory.init(PopoverToggler, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Select
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/browser/browser.js
 * @require widgets/popover/popover.js
 * ========================================================================= */

//TODO: Add support for selecting multiple options (with checkboxes maybe)
//TODO: Add an input field for searching through the options

(function ($, _, Svelto, Widgets, Factory, Browser, Pointer, Colors) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'select',
				plugin: true,
				selector: '.select',
				templates: {
						base: '<div class="popover select-popover card <%= o.size %> <%= o.color %> <%= o.css %> <%= o.guc %>">' + '<div class="card-block">' + '<% for ( var i = 0, l = o.options.length; i < l; i++ ) { %>' + '<% print ( self[ o.options[i].value ? "option" : "optgroup" ] ( { opt: o.options[i], color: o.color } ) ) %>' + '<% } %>' + '</div>' + '</div>',
						optgroup: '<div class="divider">' + '<%= o.opt.prop %>' + '</div>',
						option: '<div class="button <%= o.color %>" data-value="<%= o.opt.prop %>">' + '<%= o.opt.value %>' + '</div>'
				},
				options: {
						native: Browser.is.touchDevice, // Don't show the popover and use the native select, by default on touch devices
						popover: {
								size: '',
								color: Colors.white,
								css: Widgets.Popover.config.options.classes.affixed + ' bordered'
						},
						classes: {
								selected: 'active highlighted highlight-left',
								affixed: Widgets.Popover.config.options.classes.affixed
						},
						datas: {
								value: 'value'
						},
						selectors: {
								select: 'select',
								option: 'option',
								valueholder: '.select-value',
								valueholderFallback: 'label',
								button: '.button'
						},
						callbacks: {
								change: _.noop,
								open: _.noop,
								close: _.noop
						}
				}
		};

		/* SELECT */

		var Select = function (_Widgets$Widget36) {
				_inherits(Select, _Widgets$Widget36);

				function Select() {
						_classCallCheck(this, Select);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Select).apply(this, arguments));
				}

				_createClass(Select, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this.$wrp = this.$element;
								this.$select = this.$wrp.find(this.options.selectors.select);
								this.$options = this.$select.find(this.options.selectors.option);
								this.$valueholder = this.$wrp.find(this.options.selectors.valueholder).first();

								if (!this.$valueholder.length) {

										this.$valueholder = this.$wrp.find(this.options.selectors.valueholderFallback).first();
								}

								this.initialValueholder = this.$valueholder.text();

								this.selectOptions = [];

								this.$popover = false;
						}
				}, {
						key: '_init',
						value: function _init() {

								this._updateValueholder();

								if (!this.options.native) {

										this.$select.addClass(this.options.classes.hidden);

										this.___selectOptions();
										this.___popover();
								}
						}
				}, {
						key: '_events',
						value: function _events() {

								this.___change();
						}

						/* CHANGE */

				}, {
						key: '___change',
						value: function ___change() {

								this._on(true, this.$select, 'change', this.__change);
						}
				}, {
						key: '__change',
						value: function __change() {

								this._update();

								this._trigger('change');
						}

						/* BUTTON TAP */

				}, {
						key: '___buttonTap',
						value: function ___buttonTap() {

								if (!Browser.is.touchDevice) {

										/* BUTTON TAP */

										this._on(this.$popover, Pointer.tap, this.options.selectors.button, this.__buttonTap);
								}
						}
				}, {
						key: '__buttonTap',
						value: function __buttonTap(event) {

								event.stopImmediatePropagation();

								this.$popover.popover('close');

								this.set($(event.currentTarget).data(this.options.datas.value));
						}

						/* OPTIONS */

				}, {
						key: '___selectOptions',
						value: function ___selectOptions() {
								//FIXME: Add support for arbitrary number of optgroups nesting levels

								var previousOptgroup = void 0;

								var _iteratorNormalCompletion14 = true;
								var _didIteratorError14 = false;
								var _iteratorError14 = undefined;

								try {
										for (var _iterator14 = this.$options[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
												var option = _step14.value;


												var $option = $(option),
												    $parent = $option.parent();

												if ($parent.is('optgroup')) {

														var currentOptgroup = $parent.attr('label');

														if (currentOptgroup !== previousOptgroup) {

																previousOptgroup = currentOptgroup;

																this.selectOptions.push({
																		prop: currentOptgroup
																});
														}
												}

												var value = $option.text();

												if (value) {

														this.selectOptions.push({
																value: $option.text(),
																prop: $option.attr('value')
														});
												}
										}
								} catch (err) {
										_didIteratorError14 = true;
										_iteratorError14 = err;
								} finally {
										try {
												if (!_iteratorNormalCompletion14 && _iterator14.return) {
														_iterator14.return();
												}
										} finally {
												if (_didIteratorError14) {
														throw _iteratorError14;
												}
										}
								}
						}

						/* POPOVER */

				}, {
						key: '___popover',
						value: function ___popover() {

								var html = this._template('base', _.extend({ guc: this.guc, options: this.selectOptions }, this.options.popover));

								this.$popover = $(html).appendTo(this.$layout);
								this.$buttons = this.$popover.find(this.options.selectors.button);

								this.$popover.popover({
										positionate: {
												axis: 'y',
												strict: true
										},
										callbacks: {
												beforeopen: this.__setPopoverWidth.bind(this),
												open: this.__popoverOpen.bind(this),
												close: this.__popoverClose.bind(this)
										}
								});

								this.$wrp.attr('data-' + Widgets.Targeter.config.options.datas.target, '.' + this.guc).popoverToggler();

								this._updatePopover();
						}
				}, {
						key: '__setPopoverWidth',
						value: function __setPopoverWidth() {

								if (this.$popover.is('.' + this.options.classes.affixed)) {

										this.$popover.css('min-width', this.$wrp.outerWidth());
								}
						}
				}, {
						key: '__popoverOpen',
						value: function __popoverOpen() {

								this.___buttonTap();

								this._trigger('open');
						}
				}, {
						key: '__popoverClose',
						value: function __popoverClose() {

								this._reset();

								this.___change();

								this._trigger('close');
						}

						/* UPDATE */

				}, {
						key: '_updateValueholder',
						value: function _updateValueholder() {

								var value = this.$select.val();

								if (_.isString(value)) {
										//FIXME: Is it needed?

										if (value.length) {

												var $selectedOption = this.$options.filter('[value="' + value + '"]').first();

												this.$valueholder.text($selectedOption.text());
										} else {

												this.$valueholder.text(this.initialValueholder);
										}
								}
						}
				}, {
						key: '_updatePopover',
						value: function _updatePopover() {

								this.$buttons.removeClass(this.options.classes.selected);

								this.$buttons.filter('[data-' + this.options.datas.value + '="' + this.$select.val() + '"]').first().addClass(this.options.classes.selected);
						}
				}, {
						key: '_update',
						value: function _update() {

								this._updateValueholder();

								if (!this.options.native) {

										this._updatePopover();
								}
						}

						/* API */

				}, {
						key: 'get',
						value: function get() {

								return this.$select.val();
						}
				}, {
						key: 'set',
						value: function set(value) {

								var $button = this.$buttons.filter('[data-' + this.options.datas.value + '="' + value + '"]').first();

								if (!$button.length) return;

								this.$select.val(value).trigger('change');
						}
				}]);

				return Select;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(Select, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Browser, Svelto.Pointer, Svelto.Colors);

/* =========================================================================
 * Svelto - Widgets - Tooltip
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require widgets/popover/popover.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'tooltip',
				plugin: true,
				selector: '.tooltip'
		};

		/* TOOLTIP */

		var Tooltip = function (_Widgets$Popover) {
				_inherits(Tooltip, _Widgets$Popover);

				function Tooltip() {
						_classCallCheck(this, Tooltip);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Tooltip).apply(this, arguments));
				}

				return Tooltip;
		}(Widgets.Popover);

		/* FACTORY */

		Factory.init(Tooltip, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Tooltip - Targeters - Closer
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../tooltip.js
 * @require widgets/targeter/closer/closer.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'tooltipCloser',
				plugin: true,
				selector: '.tooltip-closer',
				options: {
						widget: Widgets.Tooltip
				}
		};

		/* TOOLTIP CLOSER */

		var TooltipCloser = function (_Widgets$Closer8) {
				_inherits(TooltipCloser, _Widgets$Closer8);

				function TooltipCloser() {
						_classCallCheck(this, TooltipCloser);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(TooltipCloser).apply(this, arguments));
				}

				return TooltipCloser;
		}(Widgets.Closer);

		/* FACTORY */

		Factory.init(TooltipCloser, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Tooltip - Targeters - Opener
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../tooltip.js
 * @require widgets/targeter/opener/opener.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'tooltipOpener',
				plugin: true,
				selector: '.tooltip-opener',
				options: {
						widget: Widgets.Tooltip,
						hover: {
								active: true
						}
				}
		};

		/* TOOLTIP OPENER */

		var TooltipOpener = function (_Widgets$Opener7) {
				_inherits(TooltipOpener, _Widgets$Opener7);

				function TooltipOpener() {
						_classCallCheck(this, TooltipOpener);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(TooltipOpener).apply(this, arguments));
				}

				return TooltipOpener;
		}(Widgets.Opener);

		/* FACTORY */

		Factory.init(TooltipOpener, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Tooltip - Targeters - Toggler
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../tooltip.js
 * @require widgets/targeter/toggler/toggler.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'tooltipToggler',
				plugin: true,
				selector: '.tooltip-toggler',
				options: {
						widget: Widgets.Tooltip,
						hover: {
								active: true
						}
				}
		};

		/* TOOLTIP TOGGLER */

		var TooltipToggler = function (_Widgets$Toggler7) {
				_inherits(TooltipToggler, _Widgets$Toggler7);

				function TooltipToggler() {
						_classCallCheck(this, TooltipToggler);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(TooltipToggler).apply(this, arguments));
				}

				return TooltipToggler;
		}(Widgets.Toggler);

		/* FACTORY */

		Factory.init(TooltipToggler, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Slider
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require lib/transform/transform.js
 * @require widgets/draggable/draggable.js
 * ========================================================================= */

//TODO: Add vertical slider

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'slider',
				plugin: true,
				selector: '.slider',
				options: {
						min: 0,
						max: 100,
						value: 0,
						step: 1, // Only multiples of `step` are valid values
						decimals: 0, // Trunc the value to this amount of decimal numbers
						live: false, // Wether it will update the input also on `Draggable.move` or just on `Draggable.end`
						datas: {
								min: 'min',
								max: 'max',
								step: 'step',
								decimals: 'decimals'
						},
						selectors: {
								input: 'input',
								bar: '.slider-bar',
								highlight: '.slider-highlight',
								handler: '.slider-handler',
								label: '.slider-handler .slider-label'
						},
						keystrokes: {
								'left, down': 'decrease',
								'right, up': 'increase'
						},
						callbacks: {
								change: _.noop
						}
				}
		};

		/* SLIDER */

		var Slider = function (_Widgets$Widget37) {
				_inherits(Slider, _Widgets$Widget37);

				function Slider() {
						_classCallCheck(this, Slider);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Slider).apply(this, arguments));
				}

				_createClass(Slider, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this.$slider = this.$element;
								this.$input = this.$slider.find(this.options.selectors.input);
								this.$bar = this.$slider.find(this.options.selectors.bar);
								this.$highlight = this.$slider.find(this.options.selectors.highlight);
								this.$handler = this.$slider.find(this.options.selectors.handler);
								this.$label = this.$slider.find(this.options.selectors.label);
						}
				}, {
						key: '_init',
						value: function _init() {

								/* VARIABLES */

								var value = this.$input.val();

								/* OPTIONS */

								this.options.min = Number(this.$slider.data(this.options.datas.min) || this.options.min);
								this.options.max = Number(this.$slider.data(this.options.datas.max) || this.options.max);
								this.options.value = this._sanitizeValue(value || this.options.value);
								this.options.step = Number(this.$slider.data(this.options.datas.step) || this.options.step);
								this.options.decimals = Number(this.$slider.data(this.options.datas.decimals) || this.options.decimals);

								/* STEPS NR */

								this.stepsNr = (this.options.max - this.options.min) / this.options.step;

								/* UPDATE */

								if (Number(value) !== this.options.value) {

										this._update();
								} else {

										this._updatePositions();
										this._updateLabel();
								}
						}
				}, {
						key: '_events',
						value: function _events() {

								this.___change();
								this.___keydown();
								this.___drag();
						}

						/* PRIVATE */

				}, {
						key: '_sanitizeValue',
						value: function _sanitizeValue(value) {

								return _.clamp(Number(Number(value).toFixed(this.options.decimals)), this.options.min, this.options.max);
						}

						/* UPDATE */

				}, {
						key: '_updateVariables',
						value: function _updateVariables() {

								this.barWidth = this.$bar.width();

								this.stepWidth = this.barWidth / this.stepsNr;
						}
				}, {
						key: '_updatePositions',
						value: function _updatePositions() {
								var value = arguments.length <= 0 || arguments[0] === undefined ? this.options.value : arguments[0];


								var percentage = (value - this.options.min) / this.options.step * 100 / this.stepsNr;

								this.$handler.css('left', percentage + '%');
								this.$highlight.css('right', 100 - percentage + '%');
						}
				}, {
						key: '_updateLabel',
						value: function _updateLabel() {
								var value = arguments.length <= 0 || arguments[0] === undefined ? this.options.value : arguments[0];


								this.$label.text(value);
						}
				}, {
						key: '_updateInput',
						value: function _updateInput() {

								this.$input.val(this.options.value).trigger('change');
						}
				}, {
						key: '_update',
						value: function _update() {

								this._updatePositions();
								this._updateLabel();
								this._updateInput();
						}

						/* CHANGE */

				}, {
						key: '___change',
						value: function ___change() {

								this._on(true, this.$input, 'change', this.__change);
						}
				}, {
						key: '__change',
						value: function __change() {

								this.set(this.$input.val());
						}

						/* KEYDOWN */

				}, {
						key: '___keydown',
						value: function ___keydown() {

								this._onHover([this.$document, 'keydown', this.__keydown]);
						}

						/* DRAG */

				}, {
						key: '___drag',
						value: function ___drag() {

								this.$handler.draggable({
										draggable: this.isEnabled.bind(this),
										axis: 'x',
										proxy: {
												$element: this.$slider,
												noMotion: this.__dragNoMotion.bind(this)
										},
										modifiers: {
												x: this.__dragModifierX.bind(this)
										},
										callbacks: {
												start: this.__dragStart.bind(this),
												move: this.__dragMove.bind(this),
												end: this.__dragEnd.bind(this)
										}
								});
						}
				}, {
						key: '__dragNoMotion',
						value: function __dragNoMotion() {

								return !this._dragDistance;
						}
				}, {
						key: '_dragValue',
						value: function _dragValue() {

								return this._sanitizeValue(this.options.value + this._dragDistance / this.stepWidth * this.options.step);
						}
				}, {
						key: '__dragModifierX',
						value: function __dragModifierX(distance) {

								this._dragDistance = this._dragProxyDistance + _.roundCloser(distance, this.stepWidth);

								if (this._dragIsProxyed && !this._dragProxyDistance) {

										this._dragProxyDistance = this._dragDistance;
								}

								return false;
						}
				}, {
						key: '__dragStart',
						value: function __dragStart(event, data) {

								this._dragIsProxyed = data.isProxyed;
								this._dragProxyDistance = 0;
								this._dragDistance = 0;

								this._updateVariables();
						}
				}, {
						key: '__dragMove',
						value: function __dragMove() {

								var value = this._dragValue();

								if (this.options.live) {

										this.set(value);
								} else {

										this._updateLabel(value);
										this._updatePositions(value);
								}
						}
				}, {
						key: '__dragEnd',
						value: function __dragEnd() {

								this.set(this._dragValue());
						}

						/* API */

				}, {
						key: 'get',
						value: function get() {

								return this.options.value;
						}
				}, {
						key: 'set',
						value: function set(value) {

								value = this._sanitizeValue(value);

								if (_.isNaN(value) || value === this.options.value) return;

								this.options.value = value;

								this._update();

								this._trigger('change');
						}
				}, {
						key: 'increase',
						value: function increase() {

								this.set(this.options.value + this.options.step);
						}
				}, {
						key: 'decrease',
						value: function decrease() {

								this.set(this.options.value - this.options.step);
						}
				}]);

				return Slider;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(Slider, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Switch
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/colors/colors.js
 * @require lib/transform/transform.js
 * @require widgets/draggable/draggable.js
 * ========================================================================= */

//TODO: Add flick support

(function ($, _, Svelto, Widgets, Factory, Colors) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'switch',
				plugin: true,
				selector: '.switch',
				options: {
						colors: {
								on: Colors.secondary,
								off: Colors.gray
						},
						datas: {
								colors: {
										on: 'color-on',
										off: 'color-off'
								}
						},
						classes: {
								checked: 'checked'
						},
						selectors: {
								input: 'input',
								bar: '.switch-bar',
								handler: '.switch-handler'
						},
						keystrokes: {
								'left': 'uncheck',
								'right': 'check',
								'spacebar': 'toggle'
						},
						callbacks: {
								change: _.noop,
								check: _.noop,
								uncheck: _.noop
						}
				}
		};

		/* SWITCH */

		var Switch = function (_Widgets$Widget38) {
				_inherits(Switch, _Widgets$Widget38);

				function Switch() {
						_classCallCheck(this, Switch);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Switch).apply(this, arguments));
				}

				_createClass(Switch, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this.$switch = this.$element;
								this.$input = this.$switch.find(this.options.selectors.input);
								this.$bar = this.$switch.find(this.options.selectors.bar);
								this.$handler = this.$switch.find(this.options.selectors.handler);

								this.isChecked = this.$input.prop('checked');

								this.switchWidth = this.$switch.width();
								this.handlerWidth = this.$handler.width();
						}
				}, {
						key: '_init',
						value: function _init() {

								/* OPTIONS */

								this.options.colors.on = this.$switch.data(this.options.datas.colors.on) || this.options.colors.on;
								this.options.colors.off = this.$switch.data(this.options.datas.colors.off) || this.options.colors.off;

								/* INITIAL SETTING */

								this._updateColors();
								this._updatePosition();
						}
				}, {
						key: '_events',
						value: function _events() {

								this.___change();
								this.___keydown();
								this.___drag();
						}
				}, {
						key: '_destroy',
						value: function _destroy() {

								this.$handler.draggable('destroy');
						}

						/* CHANGE */

				}, {
						key: '___change',
						value: function ___change() {

								this._on(true, this.$input, 'change', this.__change);
						}
				}, {
						key: '__change',
						value: function __change() {

								this.toggle(this.$input.prop('checked'));
						}

						/* KEYDOWN */

				}, {
						key: '___keydown',
						value: function ___keydown() {

								this._onHover([this.$document, 'keydown', this.__keydown]);
						}

						/* DRAG */

				}, {
						key: '___drag',
						value: function ___drag() {

								this.$handler.draggable({
										draggable: this.isEnabled.bind(this),
										axis: 'x',
										proxy: {
												$element: this.$switch,
												noMotion: false
										},
										constrainer: {
												$element: this.$switch
										},
										callbacks: {
												end: this.__dragEnd.bind(this)
										}
								});
						}
				}, {
						key: '__dragEnd',
						value: function __dragEnd(event, data) {

								if (data.motion) {

										var isChecked = data.dragXY.x + this.handlerWidth / 2 >= this.switchWidth / 2;

										this.toggle(isChecked, true);
								} else {

										this.toggle();
								}
						}

						/* UPDATE */

				}, {
						key: '_updatePosition',
						value: function _updatePosition() {

								this.$handler.translateX(this.isChecked ? this.switchWidth - this.handlerWidth : 0);
						}
				}, {
						key: '_updateColors',
						value: function _updateColors() {

								this.$bar.toggleClass(this.options.colors.on, this.isChecked);
								this.$bar.toggleClass(this.options.colors.off, !this.isChecked);

								this.$handler.toggleClass(this.options.colors.on, this.isChecked);
								this.$handler.toggleClass(this.options.colors.off, !this.isChecked);
						}
				}, {
						key: '_updateInput',
						value: function _updateInput() {

								this.$input.prop('checked', this.isChecked).trigger('change');
						}
				}, {
						key: '_update',
						value: function _update() {

								this._updatePosition();
								this._updateColors();
								this._updateInput();
						}

						/* API */

				}, {
						key: 'get',
						value: function get() {

								return this.isChecked;
						}
				}, {
						key: 'toggle',
						value: function toggle(force, _reset) {

								if (!_.isBoolean(force)) {

										force = !this.isChecked;
								}

								if (force !== this.isChecked) {

										this.isChecked = force;

										this.$switch.toggleClass(this.options.classes.checked, this.isChecked);

										this._update();

										this._trigger('change');

										this._trigger(this.isChecked ? 'check' : 'uncheck');
								} else if (_reset) {

										this._updatePosition();
								}
						}
				}, {
						key: 'check',
						value: function check() {

								this.toggle(true);
						}
				}, {
						key: 'uncheck',
						value: function uncheck() {

								this.toggle(false);
						}
				}]);

				return Switch;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(Switch, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Colors);

/* =========================================================================
 * Svelto - Lib - Validator
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/svelto/svelto.js
 * @require lib/regexes/regexes.js
 * ========================================================================= */

//TODO: Most of them will return false for empty strings, is this the wanted behaviour?

// `value` is supposed to be a string
// Strings will be trimmed inside some validators

(function ($, _, Svelto, Regexes) {

		'use strict';

		/* VALIDATOR */

		var Validator = {

				/* TYPE */

				alpha: function alpha(value) {
						return !!value.match(Regexes.alpha);
				},
				alphanumeric: function alphanumeric(value) {
						return !!value.match(Regexes.alphanumeric);
				},
				hexadecimal: function hexadecimal(value) {
						return !!value.match(Regexes.hexadecimal);
				},
				number: function number(value) {
						return !!value.match(Regexes.integer) || !!value.match(Regexes.float);
				},
				integer: function integer(value) {
						return !!value.match(Regexes.integer);
				},
				float: function float(value) {
						return !!value.match(Regexes.float);
				},


				/* NUMBER */

				min: function min(value, _min) {
						return Number(value) >= Number(_min);
				},
				max: function max(value, _max) {
						return Number(value) <= Number(_max);
				},
				range: function range(value, min, max) {
						value = Number(value);
						return value >= Number(min) && value <= Number(max);
				},


				/* LENGTH */

				minLength: function minLength(value, _minLength) {
						return value.trim().length >= Number(_minLength);
				},
				maxLength: function maxLength(value, _maxLength) {
						return value.trim().length <= Number(_maxLength);
				},
				rangeLength: function rangeLength(value, minLength, maxLength) {
						value = value.trim();
						return value.length >= Number(minLength) && value.length <= Number(maxLength);
				},
				exactLength: function exactLength(value, length) {
						return value.trim().length === Number(length);
				},


				/* THINGS */

				email: function email(value) {
						return !!value.match(Regexes.email);
				},
				creditCard: function creditCard(value) {
						return !!value.match(Regexes.creditCard);
				},
				ssn: function ssn(value) {
						return !!value.match(Regexes.ssn);
				},
				ipv4: function ipv4(value) {
						return !!value.match(Regexes.ipv4);
				},
				url: function url(value) {
						return !!value.match(Regexes.url);
				},


				/* OTHERS */

				empty: function empty(value) {
						return _.isEmpty(value.trim());
				},
				included: function included(value, values) {
						value = value.toLowerCase();
						values = values.map(function (value) {
								return value.toLowerCase();
						});
						return _.includes(values, value);
				}
		};

		/* EXPORT */

		Svelto.Validator = Validator;
})(Svelto.$, Svelto._, Svelto, Svelto.Regexes);

/* =========================================================================
 * Svelto - Widgets - Form Validate
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/widget/widget.js
 * @require lib/validator/validator.js
 * @require widgets/toast/toast.js
 * ========================================================================= */

//TODO: Add support for multiple checkboxes validation
//TODO: Add meta validators that accepts other validators as arguments, for example not[email], oppure not[matches[1,2,3]] oppure or[email,url] etc... maybe write it this way: or[matches(1-2-3)/matches(a-b-c)], or just use a smarter regex
//TODO: Maybe make it generic (so that it can be used in single elements) and just call it `validate`

(function ($, _, Svelto, Widgets, Factory, Validator) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'formValidate',
				plugin: true,
				selector: 'form.validate',
				templates: {
						message: '<p class="form-validate-message <%= o.validity %>">' + '<%= o.message %>' + '</p>',
						messages: '<ul class="form-validate-message <%= o.validity %>">' + '<% for ( var i = 0, l = o.messages.length; i < l; i++ ) { %>' + '<li><%= o.messages[i] %></li>' + '<% } %>' + '</ul>'
				},
				options: {
						validators: { // If not found here it will use `Validator`'s validators

								required: function required(value) {
										return !Validator.empty(value);
								},
								values: function values(value) {
										for (var _len6 = arguments.length, _values = Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
												_values[_key6 - 1] = arguments[_key6];
										}

										return Validator.included(value, _values);
								},
								field: function field(value, fieldName) {
										var fieldValue = _.find(this.elements, { name: fieldName }).value;
										return value === fieldValue;
								},
								checked: function checked() {
										return this.element.$element.prop('checked');
								},
								regex: function regex(value, _regex) {
										return !!value.match(new RegExp(_regex));
								}
						},
						messages: {
								form: {
										invalid: 'The form contains some errors'
								},
								validators: {
										invalid: {
												general: 'This value is not valid',
												alpha: 'Only alphabetical characters are allowed',
												alphanumeric: 'Only alphanumeric characters are allowed',
												hexadecimal: 'Only hexadecimal characters are allowed',
												number: 'Only numbers are allowed',
												integer: 'Only integers numbers are allowed',
												float: 'Only floating point numbers are allowed',
												min: 'The number must be at least $2',
												max: 'The number must be at maximum $2',
												range: 'The number must be between $2 and $3',
												minLength: 'The length must be at least $2',
												maxLength: 'The length must be at maximum $2',
												rangeLength: 'The length must be between $2 and $3',
												exactLength: 'The length must be exactly $2',
												email: 'Enter a valid email address',
												creditCard: 'Enter a valid credit card number',
												ssn: 'Enter a valid Social Security Number',
												ipv4: 'Enter a valid IPv4 address',
												url: 'Enter a valid URL',
												required: 'This field is required',
												values: 'This value is not allowed',
												field: 'The two fields don\'t match',
												checked: 'This must be checked'
										}
								}
						},
						characters: {
								separators: {
										validations: '|',
										arguments: ','
								}
						},
						regexes: {
								validation: /^([^\[]+)(?:\[(.*)\])?$/
						},
						datas: {
								id: '_fveid',
								validations: 'validations',
								messages: {
										invalid: 'invalid',
										valid: 'valid'
								}
						},
						classes: {
								invalid: 'invalid',
								valid: 'valid'
						},
						selectors: {
								element: 'input:not([type="button"]), textarea, select',
								textfield: 'input:not([type="button"]):not([type="checkbox"]):not([type="radio"]), textarea',
								wrapper: '.checkbox, .colorpicker, .datepicker, .editor, .radio, .select, .slider, .switch'
						}
				}
		};

		/* FORM VALIDATE */

		var FormValidate = function (_Widgets$Widget39) {
				_inherits(FormValidate, _Widgets$Widget39);

				function FormValidate() {
						_classCallCheck(this, FormValidate);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(FormValidate).apply(this, arguments));
				}

				_createClass(FormValidate, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this.$form = this.$element;
								this.$elements = this.$form.find(this.options.selectors.element);
								this.$textfields = this.$elements.filter(this.options.selectors.textfield);

								this.___elements();
						}
				}, {
						key: '_events',
						value: function _events() {

								this.___change();
								this.___focus();
								this.___blur();
								this.___submit();
						}

						/* ELEMENTS */

				}, {
						key: '___elements',
						value: function ___elements() {

								this.elements = {};

								var _iteratorNormalCompletion15 = true;
								var _didIteratorError15 = false;
								var _iteratorError15 = undefined;

								try {
										for (var _iterator15 = this.$elements[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
												var element = _step15.value;


												var $element = $(element),
												    $wrappers = $element.parents(this.options.selectors.wrapper),
												    $wrapper = $wrappers.length ? $wrappers.first() : $element,
												    id = $.guid++,
												    validationsStr = $element.data(this.options.datas.validations),
												    validations = false;

												if (validationsStr) {

														validations = {};

														var validationsArr = validationsStr.split(this.options.characters.separators.validations);

														var _iteratorNormalCompletion16 = true;
														var _didIteratorError16 = false;
														var _iteratorError16 = undefined;

														try {
																for (var _iterator16 = validationsArr[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
																		var validationStr = _step16.value;


																		var matches = validationStr.match(this.options.regexes.validation);

																		if (!matches) continue;

																		var validationName = matches[1],
																		    validationArgs = matches[2] ? matches[2].split(this.options.characters.separators.arguments) : [],
																		    validator = this.options.validators[validationName] || Validator[validationName];

																		if (!validator) continue;

																		validations[validationName] = {
																				args: validationArgs,
																				validator: validator
																		};
																}
														} catch (err) {
																_didIteratorError16 = true;
																_iteratorError16 = err;
														} finally {
																try {
																		if (!_iteratorNormalCompletion16 && _iterator16.return) {
																				_iterator16.return();
																		}
																} finally {
																		if (_didIteratorError16) {
																				throw _iteratorError16;
																		}
																}
														}

														if (_.isEmpty(validations)) {

																validations = false;
														}
												}

												element[this.options.datas.id] = id;

												this.elements[id] = {
														id: id,
														$element: $element,
														$wrapper: $wrapper,
														$message: false,
														name: element.name,
														value: $element.val(),
														validations: validations,
														isDirty: false,
														isValid: undefined,
														messages: {
																invalid: $wrapper.data(this.options.datas.messages.invalid),
																valid: $wrapper.data(this.options.datas.messages.valid)
														}
												};
										}
								} catch (err) {
										_didIteratorError15 = true;
										_iteratorError15 = err;
								} finally {
										try {
												if (!_iteratorNormalCompletion15 && _iterator15.return) {
														_iterator15.return();
												}
										} finally {
												if (_didIteratorError15) {
														throw _iteratorError15;
												}
										}
								}
						}

						/* UPDATE */

				}, {
						key: '_updateElement',
						value: function _updateElement(elementObj) {

								/* FORM */

								this._isValid = undefined;

								/* ELEMENT */

								elementObj.isDirty = true;
								elementObj.isValid = undefined;

								this._validateWorker(elementObj);

								/* OTHERS */

								for (var id in this.elements) {

										if (this.elements.hasOwnProperty(id)) {

												if (id === elementObj.id) continue;

												var otherElementObj = this.elements[id],
												    isDepending = otherElementObj.validations && 'field' in otherElementObj.validations && otherElementObj.validations.field.args.indexOf(elementObj.name) !== -1,
												    hasSameName = !_.isEmpty(elementObj.name) && otherElementObj.name === elementObj.name;

												if (isDepending || hasSameName) {

														otherElementObj.isValid = undefined;

														this._validateWorker(otherElementObj);
												}
										}
								}
						}
				}, {
						key: '_updateElements',
						value: function _updateElements() {

								for (var id in this.elements) {

										if (this.elements.hasOwnProperty(id)) {

												this._updateElement(this.elements[id]);
										}
								}
						}

						/* CHANGE */

				}, {
						key: '___change',
						value: function ___change() {

								this._on(true, this.$elements, 'change', this.__change);
						}
				}, {
						key: '__change',
						value: function __change(event) {

								this._updateElement(this.elements[event.currentTarget[this.options.datas.id]]);
						}

						/* FOCUS */

				}, {
						key: '___focus',
						value: function ___focus() {

								this._on(this.$textfields, 'focus', this.__focus);
						}
				}, {
						key: '__focus',
						value: function __focus(event) {

								var elementObj = this.elements[event.currentTarget[this.options.datas.id]];

								elementObj.isValid = undefined;

								this.__indeterminate(elementObj);
						}

						/* BLUR */

				}, {
						key: '___blur',
						value: function ___blur() {

								this._on(this.$textfields, 'blur', this.__blur);
						}
				}, {
						key: '__blur',
						value: function __blur(event) {

								var elementObj = this.elements[event.currentTarget[this.options.datas.id]];

								this._validateWorker(elementObj);
						}

						/* SUBMIT */

				}, {
						key: '___submit',
						value: function ___submit() {

								this._on(true, 'submit', this.__submit);
						}
				}, {
						key: '__submit',
						value: function __submit(event) {

								this._updateElements();

								if (!this.isValid()) {

										event.preventDefault();
										event.stopImmediatePropagation();

										$.toast(this.options.messages.form.invalid);
								}
						}

						/* VALIDATION */

				}, {
						key: '_validateWorker',
						value: function _validateWorker(elementObj) {

								if (_.isUndefined(elementObj.isValid)) {

										var result = this._validate(elementObj),
										    isValid = result === true;

										elementObj.isValid = isValid;

										if (isValid) {

												this.__valid(elementObj);
										} else {

												this.__invalid(elementObj, result);
										}
								}
						}
				}, {
						key: '_validate',
						value: function _validate(elementObj) {

								var errors = [],
								    validations = elementObj.validations;

								if (elementObj.isDirty) {

										elementObj.value = elementObj.$element.val();

										elementObj.isDirty = false;
								}

								if (validations) {

										for (var name in validations) {

												if (validations.hasOwnProperty(name)) {

														var validation = validations[name],
														    isValid = validation.validator.apply({ elements: this.elements, element: elementObj }, [elementObj.value].concat(validation.args));

														if (!isValid) {

																var error = _.format.apply(_, [this.options.messages.validators.invalid[name] || this.options.messages.validators.invalid.general, elementObj.value].concat(_toConsumableArray(validation.args)));

																errors.push(error);
														}
												}
										}
								}

								return _.isEmpty(errors) ? true : errors;
						}

						/* STATE */

				}, {
						key: '__indeterminate',
						value: function __indeterminate(elementObj) {

								elementObj.$wrapper.removeClass(this.options.classes.invalid + ' ' + this.options.classes.valid);

								this._updateMessage(elementObj, false);
						}
				}, {
						key: '__valid',
						value: function __valid(elementObj) {

								elementObj.$wrapper.removeClass(this.options.classes.invalid).addClass(this.options.classes.valid);

								this._updateMessage(elementObj, elementObj.messages.valid);
						}
				}, {
						key: '__invalid',
						value: function __invalid(elementObj, errors) {

								elementObj.$wrapper.removeClass(this.options.classes.valid).addClass(this.options.classes.invalid);

								this._updateMessage(elementObj, elementObj.messages.invalid || errors);
						}

						/* ERRORS */

				}, {
						key: '_updateMessage',
						value: function _updateMessage(elementObj, message) {

								if (elementObj.$message) {

										elementObj.$message.remove();
								}

								if (message) {

										var validity = elementObj.isValid ? this.options.classes.valid : this.options.classes.invalid,
										    msgHtml = _.isString(message) ? this._template('message', { message: message, validity: validity }) : message.length === 1 ? this._template('message', { message: message[0], validity: validity }) : this._template('messages', { messages: message, validity: validity });

										elementObj.$message = $(msgHtml);

										elementObj.$wrapper.after(elementObj.$message);
								} else {

										elementObj.$message = false;
								}
						}

						/* API */

				}, {
						key: 'isValid',
						value: function isValid() {

								if (_.isUndefined(this._isValid)) {

										for (var id in this.elements) {

												if (this.elements.hasOwnProperty(id)) {

														var elementObj = this.elements[id];

														if (_.isUndefined(elementObj.isValid)) {

																this._validateWorker(elementObj);
														}

														if (!elementObj.isValid) {

																this._isValid = false;
														}
												}
										}

										if (_.isUndefined(this._isValid)) {

												this._isValid = true;
										}
								}

								return this._isValid;
						}
				}]);

				return FormValidate;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(FormValidate, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Validator);

/* =========================================================================
 * Svelto - Widgets - Form Ajax
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @before ../validate/validate.js
 * @require core/svelto/svelto.js
 * @require widgets/toast/toast.js
 * @require widgets/spinner/overlay/overlay.js
 * ========================================================================= */

//TODO: Add a way to abort it, maybe hovering the spinner a clickable X will be displayed and abort the request if tapped (or something more intuitive and easier to implement...)

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'formAjax',
				plugin: true,
				selector: 'form.ajax',
				options: {
						spinnerOverlay: true, // Enable/disable the `spinnerOverlay`, if disabled one can use the triggered events in order to provide a different visual feedback to the user
						timeout: 31000, // 1 second more than the default value of PHP's `max_execution_time` setting
						messages: {
								error: 'An error occurred, please try again later',
								success: 'Done! A page refresh may be needed',
								refreshing: 'Done! Refreshing the page...',
								redirecting: 'Done! Redirecting...'
						},
						callbacks: {
								beforesend: _.noop,
								error: _.noop,
								success: _.noop,
								complete: _.noop
						}
				}
		};

		/* FORM AJAX */

		var FormAjax = function (_Widgets$Widget40) {
				_inherits(FormAjax, _Widgets$Widget40);

				function FormAjax() {
						_classCallCheck(this, FormAjax);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(FormAjax).apply(this, arguments));
				}

				_createClass(FormAjax, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this.form = this.element;
								this.$form = this.$element;
						}
				}, {
						key: '_events',
						value: function _events() {

								this.___submit();
						}

						/* PRIVATE */

				}, {
						key: '___submit',
						value: function ___submit() {

								this._on(true, 'submit', this.__submit);
						}
				}, {
						key: '__submit',
						value: function __submit(event) {
								var _this80 = this;

								event.preventDefault();
								event.stopImmediatePropagation();

								$.ajax({

										cache: false,
										contentType: false,
										data: new FormData(this.form),
										processData: false,
										timeout: this.options.timeout,
										type: this.$form.attr('method') || 'POST',
										url: this.$form.attr('action'),

										beforeSend: function beforeSend() {

												if (_this80.options.spinnerOverlay) {

														_this80.$form.spinnerOverlay('open');
												}

												_this80._trigger('beforesend');
										},

										error: function error(res) {

												var resj = _.isPlainObject(res) ? res : _.attempt(JSON.parse, res);

												$.toast(_.isError(resj) || !('message' in resj) ? _this80.options.messages.error : resj.msg);

												_this80._trigger('error');
										},

										success: function success(res) {

												var resj = _.isPlainObject(res) ? res : _.attempt(JSON.parse, res);

												if (!_.isError(resj)) {

														if (resj.refresh || resj.url === window.location.href || _.trim(resj.url, '/') === _.trim(window.location.pathname, '/')) {

																$.toast(resj.message || _this80.options.messages.refreshing);

																location.reload();
														} else if (resj.url) {

																// In order to redirect to another domain the protocol must be provided. For instance `http://www.domain.tld` will work while `www.domain.tld` won't

																$.toast(resj.message || _this80.options.messages.redirecting);

																location.assign(resj.url);
														} else {

																$.toast(resj.message || _this80.options.messages.success);
														}
												} else {

														$.toast(_this80.options.messages.success);
												}

												_this80._trigger('success');
										},

										complete: function complete() {

												if (_this80.options.spinnerOverlay) {

														_this80.$form.spinnerOverlay('close');
												}

												_this80._trigger('complete');
										}

								});
						}
				}]);

				return FormAjax;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(FormAjax, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - _ - Scroll
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/pointer/pointer.js
 * @require core/svelto/svelto.js
 * @require core/widgetize/widgetize.js
 * ========================================================================= */

//FIXME: It doesn't work if the layout is body, it also need html in some browsers (Which browsers?)
//TODO: Add a .scroll-to-target widget, with data-target and awareness of the attached stuff

(function ($, _, Svelto, Widgetize, Pointer, Animations) {

		'use strict';

		/* SCROLL TO TOP */

		Widgetize.add('.scroll-to-top', function ($scroller) {

				var $layout = $scroller.parent().closest('.layout, body'); // `body` is used as a fallback

				$scroller.on(Pointer.tap, function () {

						$layout.animate({ scrollTop: 0 }, Animations.normal);
				});
		});
})(Svelto.$, Svelto._, Svelto, Svelto.Widgetize, Svelto.Pointer, Svelto.Animations);

/*! DataTables 1.10.11
 * ©2008-2015 SpryMedia Ltd - datatables.net/license
 */

/**
 * @summary     DataTables
 * @description Paginate, search and order HTML tables
 * @version     1.10.11
 * @file        jquery.dataTables.js
 * @author      SpryMedia Ltd (www.sprymedia.co.uk)
 * @contact     www.sprymedia.co.uk/contact
 * @copyright   Copyright 2008-2015 SpryMedia Ltd.
 *
 * This source file is free software, available under the following license:
 *   MIT license - http://datatables.net/license
 *
 * This source file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
 *
 * For details please refer to: http://www.datatables.net
 */

/*jslint evil: true, undef: true, browser: true */
/*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidate,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/

(function (factory) {
		"use strict";

		factory(jQuery, window, document);
})(function ($, window, document, undefined) {
		"use strict";

		/**
   * DataTables is a plug-in for the jQuery Javascript library. It is a highly
   * flexible tool, based upon the foundations of progressive enhancement,
   * which will add advanced interaction controls to any HTML table. For a
   * full list of features please refer to
   * [DataTables.net](href="http://datatables.net).
   *
   * Note that the `DataTable` object is not a global variable but is aliased
   * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may
   * be  accessed.
   *
   *  @class
   *  @param {object} [init={}] Configuration object for DataTables. Options
   *    are defined by {@link DataTable.defaults}
   *  @requires jQuery 1.7+
   *
   *  @example
   *    // Basic initialisation
   *    $(document).ready( function {
   *      $('#example').dataTable();
   *    } );
   *
   *  @example
   *    // Initialisation with configuration options - in this case, disable
   *    // pagination and sorting.
   *    $(document).ready( function {
   *      $('#example').dataTable( {
   *        "paginate": false,
   *        "sort": false
   *      } );
   *    } );
   */

		var _DataTable;

		/*
   * It is useful to have variables which are scoped locally so only the
   * DataTables functions can access them and they don't leak into global space.
   * At the same time these functions are often useful over multiple files in the
   * core and API, so we list, or at least document, all variables which are used
   * by DataTables as private variables here. This also ensures that there is no
   * clashing of variable names and that they can easily referenced for reuse.
   */

		// Defined else where
		//  _selector_run
		//  _selector_opts
		//  _selector_first
		//  _selector_row_indexes

		var _ext; // DataTable.ext
		var _Api2; // DataTable.Api
		var _api_register; // DataTable.Api.register
		var _api_registerPlural; // DataTable.Api.registerPlural

		var _re_dic = {};
		var _re_new_lines = /[\r\n]/g;
		var _re_html = /<.*?>/g;
		var _re_date_start = /^[\w\+\-]/;
		var _re_date_end = /[\w\+\-]$/;

		// Escape regular expression special characters
		var _re_escape_regex = new RegExp('(\\' + ['/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\', '$', '^', '-'].join('|\\') + ')', 'g');

		// http://en.wikipedia.org/wiki/Foreign_exchange_market
		// - \u20BD - Russian ruble.
		// - \u20a9 - South Korean Won
		// - \u20BA - Turkish Lira
		// - \u20B9 - Indian Rupee
		// - R - Brazil (R$) and South Africa
		// - fr - Swiss Franc
		// - kr - Swedish krona, Norwegian krone and Danish krone
		// - \u2009 is thin space and \u202F is narrow no-break space, both used in many
		//   standards as thousands separators.
		var _re_formatted_numeric = /[',$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfk]/gi;

		var _empty = function _empty(d) {
				return !d || d === true || d === '-' ? true : false;
		};

		var _intVal = function _intVal(s) {
				var integer = parseInt(s, 10);
				return !isNaN(integer) && isFinite(s) ? integer : null;
		};

		// Convert from a formatted number with characters other than `.` as the
		// decimal place, to a Javascript number
		var _numToDecimal = function _numToDecimal(num, decimalPoint) {
				// Cache created regular expressions for speed as this function is called often
				if (!_re_dic[decimalPoint]) {
						_re_dic[decimalPoint] = new RegExp(_fnEscapeRegex(decimalPoint), 'g');
				}
				return typeof num === 'string' && decimalPoint !== '.' ? num.replace(/\./g, '').replace(_re_dic[decimalPoint], '.') : num;
		};

		var _isNumber = function _isNumber(d, decimalPoint, formatted) {
				var strType = typeof d === 'string';

				// If empty return immediately so there must be a number if it is a
				// formatted string (this stops the string "k", or "kr", etc being detected
				// as a formatted number for currency
				if (_empty(d)) {
						return true;
				}

				if (decimalPoint && strType) {
						d = _numToDecimal(d, decimalPoint);
				}

				if (formatted && strType) {
						d = d.replace(_re_formatted_numeric, '');
				}

				return !isNaN(parseFloat(d)) && isFinite(d);
		};

		// A string without HTML in it can be considered to be HTML still
		var _isHtml = function _isHtml(d) {
				return _empty(d) || typeof d === 'string';
		};

		var _htmlNumeric = function _htmlNumeric(d, decimalPoint, formatted) {
				if (_empty(d)) {
						return true;
				}

				var html = _isHtml(d);
				return !html ? null : _isNumber(_stripHtml(d), decimalPoint, formatted) ? true : null;
		};

		var _pluck = function _pluck(a, prop, prop2) {
				var out = [];
				var i = 0,
				    ien = a.length;

				// Could have the test in the loop for slightly smaller code, but speed
				// is essential here
				if (prop2 !== undefined) {
						for (; i < ien; i++) {
								if (a[i] && a[i][prop]) {
										out.push(a[i][prop][prop2]);
								}
						}
				} else {
						for (; i < ien; i++) {
								if (a[i]) {
										out.push(a[i][prop]);
								}
						}
				}

				return out;
		};

		// Basically the same as _pluck, but rather than looping over `a` we use `order`
		// as the indexes to pick from `a`
		var _pluck_order = function _pluck_order(a, order, prop, prop2) {
				var out = [];
				var i = 0,
				    ien = order.length;

				// Could have the test in the loop for slightly smaller code, but speed
				// is essential here
				if (prop2 !== undefined) {
						for (; i < ien; i++) {
								if (a[order[i]][prop]) {
										out.push(a[order[i]][prop][prop2]);
								}
						}
				} else {
						for (; i < ien; i++) {
								out.push(a[order[i]][prop]);
						}
				}

				return out;
		};

		var _range = function _range(len, start) {
				var out = [];
				var end;

				if (start === undefined) {
						start = 0;
						end = len;
				} else {
						end = start;
						start = len;
				}

				for (var i = start; i < end; i++) {
						out.push(i);
				}

				return out;
		};

		var _removeEmpty = function _removeEmpty(a) {
				var out = [];

				for (var i = 0, ien = a.length; i < ien; i++) {
						if (a[i]) {
								// careful - will remove all falsy values!
								out.push(a[i]);
						}
				}

				return out;
		};

		var _stripHtml = function _stripHtml(d) {
				return d.replace(_re_html, '');
		};

		/**
   * Find the unique elements in a source array.
   *
   * @param  {array} src Source array
   * @return {array} Array of unique items
   * @ignore
   */
		var _unique = function _unique(src) {
				// A faster unique method is to use object keys to identify used values,
				// but this doesn't work with arrays or objects, which we must also
				// consider. See jsperf.com/compare-array-unique-versions/4 for more
				// information.
				var out = [],
				    val,
				    i,
				    ien = src.length,
				    j,
				    k = 0;

				again: for (i = 0; i < ien; i++) {
						val = src[i];

						for (j = 0; j < k; j++) {
								if (out[j] === val) {
										continue again;
								}
						}

						out.push(val);
						k++;
				}

				return out;
		};

		/**
   * Create a mapping object that allows camel case parameters to be looked up
   * for their Hungarian counterparts. The mapping is stored in a private
   * parameter called `_hungarianMap` which can be accessed on the source object.
   *  @param {object} o
   *  @memberof DataTable#oApi
   */
		function _fnHungarianMap(o) {
				var hungarian = 'a aa ai ao as b fn i m o s ',
				    match,
				    newKey,
				    map = {};

				$.each(o, function (key, val) {
						match = key.match(/^([^A-Z]+?)([A-Z])/);

						if (match && hungarian.indexOf(match[1] + ' ') !== -1) {
								newKey = key.replace(match[0], match[2].toLowerCase());
								map[newKey] = key;

								if (match[1] === 'o') {
										_fnHungarianMap(o[key]);
								}
						}
				});

				o._hungarianMap = map;
		}

		/**
   * Convert from camel case parameters to Hungarian, based on a Hungarian map
   * created by _fnHungarianMap.
   *  @param {object} src The model object which holds all parameters that can be
   *    mapped.
   *  @param {object} user The object to convert from camel case to Hungarian.
   *  @param {boolean} force When set to `true`, properties which already have a
   *    Hungarian value in the `user` object will be overwritten. Otherwise they
   *    won't be.
   *  @memberof DataTable#oApi
   */
		function _fnCamelToHungarian(src, user, force) {
				if (!src._hungarianMap) {
						_fnHungarianMap(src);
				}

				var hungarianKey;

				$.each(user, function (key, val) {
						hungarianKey = src._hungarianMap[key];

						if (hungarianKey !== undefined && (force || user[hungarianKey] === undefined)) {
								// For objects, we need to buzz down into the object to copy parameters
								if (hungarianKey.charAt(0) === 'o') {
										// Copy the camelCase options over to the hungarian
										if (!user[hungarianKey]) {
												user[hungarianKey] = {};
										}
										$.extend(true, user[hungarianKey], user[key]);

										_fnCamelToHungarian(src[hungarianKey], user[hungarianKey], force);
								} else {
										user[hungarianKey] = user[key];
								}
						}
				});
		}

		/**
   * Language compatibility - when certain options are given, and others aren't, we
   * need to duplicate the values over, in order to provide backwards compatibility
   * with older language files.
   *  @param {object} oSettings dataTables settings object
   *  @memberof DataTable#oApi
   */
		function _fnLanguageCompat(lang) {
				var defaults = _DataTable.defaults.oLanguage;
				var zeroRecords = lang.sZeroRecords;

				/* Backwards compatibility - if there is no sEmptyTable given, then use the same as
     * sZeroRecords - assuming that is given.
     */
				if (!lang.sEmptyTable && zeroRecords && defaults.sEmptyTable === "No data available in table") {
						_fnMap(lang, lang, 'sZeroRecords', 'sEmptyTable');
				}

				/* Likewise with loading records */
				if (!lang.sLoadingRecords && zeroRecords && defaults.sLoadingRecords === "Loading...") {
						_fnMap(lang, lang, 'sZeroRecords', 'sLoadingRecords');
				}

				// Old parameter name of the thousands separator mapped onto the new
				if (lang.sInfoThousands) {
						lang.sThousands = lang.sInfoThousands;
				}

				var decimal = lang.sDecimal;
				if (decimal) {
						_addNumericSort(decimal);
				}
		}

		/**
   * Map one parameter onto another
   *  @param {object} o Object to map
   *  @param {*} knew The new parameter name
   *  @param {*} old The old parameter name
   */
		var _fnCompatMap = function _fnCompatMap(o, knew, old) {
				if (o[knew] !== undefined) {
						o[old] = o[knew];
				}
		};

		/**
   * Provide backwards compatibility for the main DT options. Note that the new
   * options are mapped onto the old parameters, so this is an external interface
   * change only.
   *  @param {object} init Object to map
   */
		function _fnCompatOpts(init) {
				_fnCompatMap(init, 'ordering', 'bSort');
				_fnCompatMap(init, 'orderMulti', 'bSortMulti');
				_fnCompatMap(init, 'orderClasses', 'bSortClasses');
				_fnCompatMap(init, 'orderCellsTop', 'bSortCellsTop');
				_fnCompatMap(init, 'order', 'aaSorting');
				_fnCompatMap(init, 'orderFixed', 'aaSortingFixed');
				_fnCompatMap(init, 'paging', 'bPaginate');
				_fnCompatMap(init, 'pagingType', 'sPaginationType');
				_fnCompatMap(init, 'pageLength', 'iDisplayLength');
				_fnCompatMap(init, 'searching', 'bFilter');

				// Boolean initialisation of x-scrolling
				if (typeof init.sScrollX === 'boolean') {
						init.sScrollX = init.sScrollX ? '100%' : '';
				}
				if (typeof init.scrollX === 'boolean') {
						init.scrollX = init.scrollX ? '100%' : '';
				}

				// Column search objects are in an array, so it needs to be converted
				// element by element
				var searchCols = init.aoSearchCols;

				if (searchCols) {
						for (var i = 0, ien = searchCols.length; i < ien; i++) {
								if (searchCols[i]) {
										_fnCamelToHungarian(_DataTable.models.oSearch, searchCols[i]);
								}
						}
				}
		}

		/**
   * Provide backwards compatibility for column options. Note that the new options
   * are mapped onto the old parameters, so this is an external interface change
   * only.
   *  @param {object} init Object to map
   */
		function _fnCompatCols(init) {
				_fnCompatMap(init, 'orderable', 'bSortable');
				_fnCompatMap(init, 'orderData', 'aDataSort');
				_fnCompatMap(init, 'orderSequence', 'asSorting');
				_fnCompatMap(init, 'orderDataType', 'sortDataType');

				// orderData can be given as an integer
				var dataSort = init.aDataSort;
				if (dataSort && !$.isArray(dataSort)) {
						init.aDataSort = [dataSort];
				}
		}

		/**
   * Browser feature detection for capabilities, quirks
   *  @param {object} settings dataTables settings object
   *  @memberof DataTable#oApi
   */
		function _fnBrowserDetect(settings) {
				// We don't need to do this every time DataTables is constructed, the values
				// calculated are specific to the browser and OS configuration which we
				// don't expect to change between initialisations
				if (!_DataTable.__browser) {
						var browser = {};
						_DataTable.__browser = browser;

						// Scrolling feature / quirks detection
						var n = $('<div/>').css({
								position: 'fixed',
								top: 0,
								left: 0,
								height: 1,
								width: 1,
								overflow: 'hidden'
						}).append($('<div/>').css({
								position: 'absolute',
								top: 1,
								left: 1,
								width: 100,
								overflow: 'scroll'
						}).append($('<div/>').css({
								width: '100%',
								height: 10
						}))).appendTo('body');

						var outer = n.children();
						var inner = outer.children();

						// Numbers below, in order, are:
						// inner.offsetWidth, inner.clientWidth, outer.offsetWidth, outer.clientWidth
						//
						// IE6 XP:                           100 100 100  83
						// IE7 Vista:                        100 100 100  83
						// IE 8+ Windows:                     83  83 100  83
						// Evergreen Windows:                 83  83 100  83
						// Evergreen Mac with scrollbars:     85  85 100  85
						// Evergreen Mac without scrollbars: 100 100 100 100

						// Get scrollbar width
						browser.barWidth = outer[0].offsetWidth - outer[0].clientWidth;

						// IE6/7 will oversize a width 100% element inside a scrolling element, to
						// include the width of the scrollbar, while other browsers ensure the inner
						// element is contained without forcing scrolling
						browser.bScrollOversize = inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100;

						// In rtl text layout, some browsers (most, but not all) will place the
						// scrollbar on the left, rather than the right.
						browser.bScrollbarLeft = Math.round(inner.offset().left) !== 1;

						// IE8- don't provide height and width for getBoundingClientRect
						browser.bBounding = n[0].getBoundingClientRect().width ? true : false;

						n.remove();
				}

				$.extend(settings.oBrowser, _DataTable.__browser);
				settings.oScroll.iBarWidth = _DataTable.__browser.barWidth;
		}

		/**
   * Array.prototype reduce[Right] method, used for browsers which don't support
   * JS 1.6. Done this way to reduce code size, since we iterate either way
   *  @param {object} settings dataTables settings object
   *  @memberof DataTable#oApi
   */
		function _fnReduce(that, fn, init, start, end, inc) {
				var i = start,
				    value,
				    isSet = false;

				if (init !== undefined) {
						value = init;
						isSet = true;
				}

				while (i !== end) {
						if (!that.hasOwnProperty(i)) {
								continue;
						}

						value = isSet ? fn(value, that[i], i, that) : that[i];

						isSet = true;
						i += inc;
				}

				return value;
		}

		/**
   * Add a column to the list used for the table with default values
   *  @param {object} oSettings dataTables settings object
   *  @param {node} nTh The th element for this column
   *  @memberof DataTable#oApi
   */
		function _fnAddColumn(oSettings, nTh) {
				// Add column to aoColumns array
				var oDefaults = _DataTable.defaults.column;
				var iCol = oSettings.aoColumns.length;
				var oCol = $.extend({}, _DataTable.models.oColumn, oDefaults, {
						"nTh": nTh ? nTh : document.createElement('th'),
						"sTitle": oDefaults.sTitle ? oDefaults.sTitle : nTh ? nTh.innerHTML : '',
						"aDataSort": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],
						"mData": oDefaults.mData ? oDefaults.mData : iCol,
						idx: iCol
				});
				oSettings.aoColumns.push(oCol);

				// Add search object for column specific search. Note that the `searchCols[ iCol ]`
				// passed into extend can be undefined. This allows the user to give a default
				// with only some of the parameters defined, and also not give a default
				var searchCols = oSettings.aoPreSearchCols;
				searchCols[iCol] = $.extend({}, _DataTable.models.oSearch, searchCols[iCol]);

				// Use the default column options function to initialise classes etc
				_fnColumnOptions(oSettings, iCol, $(nTh).data());
		}

		/**
   * Apply options for a column
   *  @param {object} oSettings dataTables settings object
   *  @param {int} iCol column index to consider
   *  @param {object} oOptions object with sType, bVisible and bSearchable etc
   *  @memberof DataTable#oApi
   */
		function _fnColumnOptions(oSettings, iCol, oOptions) {
				var oCol = oSettings.aoColumns[iCol];
				var oClasses = oSettings.oClasses;
				var th = $(oCol.nTh);

				// Try to get width information from the DOM. We can't get it from CSS
				// as we'd need to parse the CSS stylesheet. `width` option can override
				if (!oCol.sWidthOrig) {
						// Width attribute
						oCol.sWidthOrig = th.attr('width') || null;

						// Style attribute
						var t = (th.attr('style') || '').match(/width:\s*(\d+[pxem%]+)/);
						if (t) {
								oCol.sWidthOrig = t[1];
						}
				}

				/* User specified column options */
				if (oOptions !== undefined && oOptions !== null) {
						// Backwards compatibility
						_fnCompatCols(oOptions);

						// Map camel case parameters to their Hungarian counterparts
						_fnCamelToHungarian(_DataTable.defaults.column, oOptions);

						/* Backwards compatibility for mDataProp */
						if (oOptions.mDataProp !== undefined && !oOptions.mData) {
								oOptions.mData = oOptions.mDataProp;
						}

						if (oOptions.sType) {
								oCol._sManualType = oOptions.sType;
						}

						// `class` is a reserved word in Javascript, so we need to provide
						// the ability to use a valid name for the camel case input
						if (oOptions.className && !oOptions.sClass) {
								oOptions.sClass = oOptions.className;
						}

						$.extend(oCol, oOptions);
						_fnMap(oCol, oOptions, "sWidth", "sWidthOrig");

						/* iDataSort to be applied (backwards compatibility), but aDataSort will take
       * priority if defined
       */
						if (oOptions.iDataSort !== undefined) {
								oCol.aDataSort = [oOptions.iDataSort];
						}
						_fnMap(oCol, oOptions, "aDataSort");
				}

				/* Cache the data get and set functions for speed */
				var mDataSrc = oCol.mData;
				var mData = _fnGetObjectDataFn(mDataSrc);
				var mRender = oCol.mRender ? _fnGetObjectDataFn(oCol.mRender) : null;

				var attrTest = function attrTest(src) {
						return typeof src === 'string' && src.indexOf('@') !== -1;
				};
				oCol._bAttrSrc = $.isPlainObject(mDataSrc) && (attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter));
				oCol._setter = null;

				oCol.fnGetData = function (rowData, type, meta) {
						var innerData = mData(rowData, type, undefined, meta);

						return mRender && type ? mRender(innerData, type, rowData, meta) : innerData;
				};
				oCol.fnSetData = function (rowData, val, meta) {
						return _fnSetObjectDataFn(mDataSrc)(rowData, val, meta);
				};

				// Indicate if DataTables should read DOM data as an object or array
				// Used in _fnGetRowElements
				if (typeof mDataSrc !== 'number') {
						oSettings._rowReadObject = true;
				}

				/* Feature sorting overrides column specific when off */
				if (!oSettings.oFeatures.bSort) {
						oCol.bSortable = false;
						th.addClass(oClasses.sSortableNone); // Have to add class here as order event isn't called
				}

				/* Check that the class assignment is correct for sorting */
				var bAsc = $.inArray('asc', oCol.asSorting) !== -1;
				var bDesc = $.inArray('desc', oCol.asSorting) !== -1;
				if (!oCol.bSortable || !bAsc && !bDesc) {
						oCol.sSortingClass = oClasses.sSortableNone;
						oCol.sSortingClassJUI = "";
				} else if (bAsc && !bDesc) {
						oCol.sSortingClass = oClasses.sSortableAsc;
						oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;
				} else if (!bAsc && bDesc) {
						oCol.sSortingClass = oClasses.sSortableDesc;
						oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;
				} else {
						oCol.sSortingClass = oClasses.sSortable;
						oCol.sSortingClassJUI = oClasses.sSortJUI;
				}
		}

		/**
   * Adjust the table column widths for new data. Note: you would probably want to
   * do a redraw after calling this function!
   *  @param {object} settings dataTables settings object
   *  @memberof DataTable#oApi
   */
		function _fnAdjustColumnSizing(settings) {
				/* Not interested in doing column width calculation if auto-width is disabled */
				if (settings.oFeatures.bAutoWidth !== false) {
						var columns = settings.aoColumns;

						_fnCalculateColumnWidths(settings);
						for (var i = 0, iLen = columns.length; i < iLen; i++) {
								columns[i].nTh.style.width = columns[i].sWidth;
						}
				}

				var scroll = settings.oScroll;
				if (scroll.sY !== '' || scroll.sX !== '') {
						_fnScrollDraw(settings);
				}

				_fnCallbackFire(settings, null, 'column-sizing', [settings]);
		}

		/**
   * Covert the index of a visible column to the index in the data array (take account
   * of hidden columns)
   *  @param {object} oSettings dataTables settings object
   *  @param {int} iMatch Visible column index to lookup
   *  @returns {int} i the data index
   *  @memberof DataTable#oApi
   */
		function _fnVisibleToColumnIndex(oSettings, iMatch) {
				var aiVis = _fnGetColumns(oSettings, 'bVisible');

				return typeof aiVis[iMatch] === 'number' ? aiVis[iMatch] : null;
		}

		/**
   * Covert the index of an index in the data array and convert it to the visible
   *   column index (take account of hidden columns)
   *  @param {int} iMatch Column index to lookup
   *  @param {object} oSettings dataTables settings object
   *  @returns {int} i the data index
   *  @memberof DataTable#oApi
   */
		function _fnColumnIndexToVisible(oSettings, iMatch) {
				var aiVis = _fnGetColumns(oSettings, 'bVisible');
				var iPos = $.inArray(iMatch, aiVis);

				return iPos !== -1 ? iPos : null;
		}

		/**
   * Get the number of visible columns
   *  @param {object} oSettings dataTables settings object
   *  @returns {int} i the number of visible columns
   *  @memberof DataTable#oApi
   */
		function _fnVisbleColumns(oSettings) {
				return $(_pluck(oSettings.aoColumns, 'nTh')).filter(':visible').length;
		}

		/**
   * Get an array of column indexes that match a given property
   *  @param {object} oSettings dataTables settings object
   *  @param {string} sParam Parameter in aoColumns to look for - typically
   *    bVisible or bSearchable
   *  @returns {array} Array of indexes with matched properties
   *  @memberof DataTable#oApi
   */
		function _fnGetColumns(oSettings, sParam) {
				var a = [];

				$.map(oSettings.aoColumns, function (val, i) {
						if (val[sParam]) {
								a.push(i);
						}
				});

				return a;
		}

		/**
   * Calculate the 'type' of a column
   *  @param {object} settings dataTables settings object
   *  @memberof DataTable#oApi
   */
		function _fnColumnTypes(settings) {
				var columns = settings.aoColumns;
				var data = settings.aoData;
				var types = _DataTable.ext.type.detect;
				var i, ien, j, jen, k, ken;
				var col, cell, detectedType, cache;

				// For each column, spin over the
				for (i = 0, ien = columns.length; i < ien; i++) {
						col = columns[i];
						cache = [];

						if (!col.sType && col._sManualType) {
								col.sType = col._sManualType;
						} else if (!col.sType) {
								for (j = 0, jen = types.length; j < jen; j++) {
										for (k = 0, ken = data.length; k < ken; k++) {
												// Use a cache array so we only need to get the type data
												// from the formatter once (when using multiple detectors)
												if (cache[k] === undefined) {
														cache[k] = _fnGetCellData(settings, k, i, 'type');
												}

												detectedType = types[j](cache[k], settings);

												// If null, then this type can't apply to this column, so
												// rather than testing all cells, break out. There is an
												// exception for the last type which is `html`. We need to
												// scan all rows since it is possible to mix string and HTML
												// types
												if (!detectedType && j !== types.length - 1) {
														break;
												}

												// Only a single match is needed for html type since it is
												// bottom of the pile and very similar to string
												if (detectedType === 'html') {
														break;
												}
										}

										// Type is valid for all data points in the column - use this
										// type
										if (detectedType) {
												col.sType = detectedType;
												break;
										}
								}

								// Fall back - if no type was detected, always use string
								if (!col.sType) {
										col.sType = 'string';
								}
						}
				}
		}

		/**
   * Take the column definitions and static columns arrays and calculate how
   * they relate to column indexes. The callback function will then apply the
   * definition found for a column to a suitable configuration object.
   *  @param {object} oSettings dataTables settings object
   *  @param {array} aoColDefs The aoColumnDefs array that is to be applied
   *  @param {array} aoCols The aoColumns array that defines columns individually
   *  @param {function} fn Callback function - takes two parameters, the calculated
   *    column index and the definition for that column.
   *  @memberof DataTable#oApi
   */
		function _fnApplyColumnDefs(oSettings, aoColDefs, aoCols, fn) {
				var i, iLen, j, jLen, k, kLen, def;
				var columns = oSettings.aoColumns;

				// Column definitions with aTargets
				if (aoColDefs) {
						/* Loop over the definitions array - loop in reverse so first instance has priority */
						for (i = aoColDefs.length - 1; i >= 0; i--) {
								def = aoColDefs[i];

								/* Each definition can target multiple columns, as it is an array */
								var aTargets = def.targets !== undefined ? def.targets : def.aTargets;

								if (!$.isArray(aTargets)) {
										aTargets = [aTargets];
								}

								for (j = 0, jLen = aTargets.length; j < jLen; j++) {
										if (typeof aTargets[j] === 'number' && aTargets[j] >= 0) {
												/* Add columns that we don't yet know about */
												while (columns.length <= aTargets[j]) {
														_fnAddColumn(oSettings);
												}

												/* Integer, basic index */
												fn(aTargets[j], def);
										} else if (typeof aTargets[j] === 'number' && aTargets[j] < 0) {
												/* Negative integer, right to left column counting */
												fn(columns.length + aTargets[j], def);
										} else if (typeof aTargets[j] === 'string') {
												/* Class name matching on TH element */
												for (k = 0, kLen = columns.length; k < kLen; k++) {
														if (aTargets[j] == "_all" || $(columns[k].nTh).hasClass(aTargets[j])) {
																fn(k, def);
														}
												}
										}
								}
						}
				}

				// Statically defined columns array
				if (aoCols) {
						for (i = 0, iLen = aoCols.length; i < iLen; i++) {
								fn(i, aoCols[i]);
						}
				}
		}

		/**
   * Add a data array to the table, creating DOM node etc. This is the parallel to
   * _fnGatherData, but for adding rows from a Javascript source, rather than a
   * DOM source.
   *  @param {object} oSettings dataTables settings object
   *  @param {array} aData data array to be added
   *  @param {node} [nTr] TR element to add to the table - optional. If not given,
   *    DataTables will create a row automatically
   *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
   *    if nTr is.
   *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed
   *  @memberof DataTable#oApi
   */
		function _fnAddData(oSettings, aDataIn, nTr, anTds) {
				/* Create the object for storing information about this new row */
				var iRow = oSettings.aoData.length;
				var oData = $.extend(true, {}, _DataTable.models.oRow, {
						src: nTr ? 'dom' : 'data',
						idx: iRow
				});

				oData._aData = aDataIn;
				oSettings.aoData.push(oData);

				/* Create the cells */
				var nTd, sThisType;
				var columns = oSettings.aoColumns;

				// Invalidate the column types as the new data needs to be revalidated
				for (var i = 0, iLen = columns.length; i < iLen; i++) {
						columns[i].sType = null;
				}

				/* Add to the display array */
				oSettings.aiDisplayMaster.push(iRow);

				var id = oSettings.rowIdFn(aDataIn);
				if (id !== undefined) {
						oSettings.aIds[id] = oData;
				}

				/* Create the DOM information, or register it if already present */
				if (nTr || !oSettings.oFeatures.bDeferRender) {
						_fnCreateTr(oSettings, iRow, nTr, anTds);
				}

				return iRow;
		}

		/**
   * Add one or more TR elements to the table. Generally we'd expect to
   * use this for reading data from a DOM sourced table, but it could be
   * used for an TR element. Note that if a TR is given, it is used (i.e.
   * it is not cloned).
   *  @param {object} settings dataTables settings object
   *  @param {array|node|jQuery} trs The TR element(s) to add to the table
   *  @returns {array} Array of indexes for the added rows
   *  @memberof DataTable#oApi
   */
		function _fnAddTr(settings, trs) {
				var row;

				// Allow an individual node to be passed in
				if (!(trs instanceof $)) {
						trs = $(trs);
				}

				return trs.map(function (i, el) {
						row = _fnGetRowElements(settings, el);
						return _fnAddData(settings, row.data, el, row.cells);
				});
		}

		/**
   * Take a TR element and convert it to an index in aoData
   *  @param {object} oSettings dataTables settings object
   *  @param {node} n the TR element to find
   *  @returns {int} index if the node is found, null if not
   *  @memberof DataTable#oApi
   */
		function _fnNodeToDataIndex(oSettings, n) {
				return n._DT_RowIndex !== undefined ? n._DT_RowIndex : null;
		}

		/**
   * Take a TD element and convert it into a column data index (not the visible index)
   *  @param {object} oSettings dataTables settings object
   *  @param {int} iRow The row number the TD/TH can be found in
   *  @param {node} n The TD/TH element to find
   *  @returns {int} index if the node is found, -1 if not
   *  @memberof DataTable#oApi
   */
		function _fnNodeToColumnIndex(oSettings, iRow, n) {
				return $.inArray(n, oSettings.aoData[iRow].anCells);
		}

		/**
   * Get the data for a given cell from the internal cache, taking into account data mapping
   *  @param {object} settings dataTables settings object
   *  @param {int} rowIdx aoData row id
   *  @param {int} colIdx Column index
   *  @param {string} type data get type ('display', 'type' 'filter' 'sort')
   *  @returns {*} Cell data
   *  @memberof DataTable#oApi
   */
		function _fnGetCellData(settings, rowIdx, colIdx, type) {
				var draw = settings.iDraw;
				var col = settings.aoColumns[colIdx];
				var rowData = settings.aoData[rowIdx]._aData;
				var defaultContent = col.sDefaultContent;
				var cellData = col.fnGetData(rowData, type, {
						settings: settings,
						row: rowIdx,
						col: colIdx
				});

				if (cellData === undefined) {
						if (settings.iDrawError != draw && defaultContent === null) {
								_fnLog(settings, 0, "Requested unknown parameter " + (typeof col.mData == 'function' ? '{function}' : "'" + col.mData + "'") + " for row " + rowIdx + ", column " + colIdx, 4);
								settings.iDrawError = draw;
						}
						return defaultContent;
				}

				// When the data source is null and a specific data type is requested (i.e.
				// not the original data), we can use default column data
				if ((cellData === rowData || cellData === null) && defaultContent !== null && type !== undefined) {
						cellData = defaultContent;
				} else if (typeof cellData === 'function') {
						// If the data source is a function, then we run it and use the return,
						// executing in the scope of the data object (for instances)
						return cellData.call(rowData);
				}

				if (cellData === null && type == 'display') {
						return '';
				}
				return cellData;
		}

		/**
   * Set the value for a specific cell, into the internal data cache
   *  @param {object} settings dataTables settings object
   *  @param {int} rowIdx aoData row id
   *  @param {int} colIdx Column index
   *  @param {*} val Value to set
   *  @memberof DataTable#oApi
   */
		function _fnSetCellData(settings, rowIdx, colIdx, val) {
				var col = settings.aoColumns[colIdx];
				var rowData = settings.aoData[rowIdx]._aData;

				col.fnSetData(rowData, val, {
						settings: settings,
						row: rowIdx,
						col: colIdx
				});
		}

		// Private variable that is used to match action syntax in the data property object
		var __reArray = /\[.*?\]$/;
		var __reFn = /\(\)$/;

		/**
   * Split string on periods, taking into account escaped periods
   * @param  {string} str String to split
   * @return {array} Split string
   */
		function _fnSplitObjNotation(str) {
				return $.map(str.match(/(\\.|[^\.])+/g) || [''], function (s) {
						return s.replace(/\\./g, '.');
				});
		}

		/**
   * Return a function that can be used to get data from a source object, taking
   * into account the ability to use nested objects as a source
   *  @param {string|int|function} mSource The data source for the object
   *  @returns {function} Data get function
   *  @memberof DataTable#oApi
   */
		function _fnGetObjectDataFn(mSource) {
				if ($.isPlainObject(mSource)) {
						/* Build an object of get functions, and wrap them in a single call */
						var o = {};
						$.each(mSource, function (key, val) {
								if (val) {
										o[key] = _fnGetObjectDataFn(val);
								}
						});

						return function (data, type, row, meta) {
								var t = o[type] || o._;
								return t !== undefined ? t(data, type, row, meta) : data;
						};
				} else if (mSource === null) {
						/* Give an empty string for rendering / sorting etc */
						return function (data) {
								// type, row and meta also passed, but not used
								return data;
						};
				} else if (typeof mSource === 'function') {
						return function (data, type, row, meta) {
								return mSource(data, type, row, meta);
						};
				} else if (typeof mSource === 'string' && (mSource.indexOf('.') !== -1 || mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1)) {
						/* If there is a . in the source string then the data source is in a
       * nested object so we loop over the data for each level to get the next
       * level down. On each loop we test for undefined, and if found immediately
       * return. This allows entire objects to be missing and sDefaultContent to
       * be used if defined, rather than throwing an error
       */
						var fetchData = function fetchData(data, type, src) {
								var arrayNotation, funcNotation, out, innerSrc;

								if (src !== "") {
										var a = _fnSplitObjNotation(src);

										for (var i = 0, iLen = a.length; i < iLen; i++) {
												// Check if we are dealing with special notation
												arrayNotation = a[i].match(__reArray);
												funcNotation = a[i].match(__reFn);

												if (arrayNotation) {
														// Array notation
														a[i] = a[i].replace(__reArray, '');

														// Condition allows simply [] to be passed in
														if (a[i] !== "") {
																data = data[a[i]];
														}
														out = [];

														// Get the remainder of the nested object to get
														a.splice(0, i + 1);
														innerSrc = a.join('.');

														// Traverse each entry in the array getting the properties requested
														if ($.isArray(data)) {
																for (var j = 0, jLen = data.length; j < jLen; j++) {
																		out.push(fetchData(data[j], type, innerSrc));
																}
														}

														// If a string is given in between the array notation indicators, that
														// is used to join the strings together, otherwise an array is returned
														var join = arrayNotation[0].substring(1, arrayNotation[0].length - 1);
														data = join === "" ? out : out.join(join);

														// The inner call to fetchData has already traversed through the remainder
														// of the source requested, so we exit from the loop
														break;
												} else if (funcNotation) {
														// Function call
														a[i] = a[i].replace(__reFn, '');
														data = data[a[i]]();
														continue;
												}

												if (data === null || data[a[i]] === undefined) {
														return undefined;
												}
												data = data[a[i]];
										}
								}

								return data;
						};

						return function (data, type) {
								// row and meta also passed, but not used
								return fetchData(data, type, mSource);
						};
				} else {
						/* Array or flat object mapping */
						return function (data, type) {
								// row and meta also passed, but not used
								return data[mSource];
						};
				}
		}

		/**
   * Return a function that can be used to set data from a source object, taking
   * into account the ability to use nested objects as a source
   *  @param {string|int|function} mSource The data source for the object
   *  @returns {function} Data set function
   *  @memberof DataTable#oApi
   */
		function _fnSetObjectDataFn(mSource) {
				if ($.isPlainObject(mSource)) {
						/* Unlike get, only the underscore (global) option is used for for
       * setting data since we don't know the type here. This is why an object
       * option is not documented for `mData` (which is read/write), but it is
       * for `mRender` which is read only.
       */
						return _fnSetObjectDataFn(mSource._);
				} else if (mSource === null) {
						/* Nothing to do when the data source is null */
						return function () {};
				} else if (typeof mSource === 'function') {
						return function (data, val, meta) {
								mSource(data, 'set', val, meta);
						};
				} else if (typeof mSource === 'string' && (mSource.indexOf('.') !== -1 || mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1)) {
						/* Like the get, we need to get data from a nested object */
						var setData = function setData(data, val, src) {
								var a = _fnSplitObjNotation(src),
								    b;
								var aLast = a[a.length - 1];
								var arrayNotation, funcNotation, o, innerSrc;

								for (var i = 0, iLen = a.length - 1; i < iLen; i++) {
										// Check if we are dealing with an array notation request
										arrayNotation = a[i].match(__reArray);
										funcNotation = a[i].match(__reFn);

										if (arrayNotation) {
												a[i] = a[i].replace(__reArray, '');
												data[a[i]] = [];

												// Get the remainder of the nested object to set so we can recurse
												b = a.slice();
												b.splice(0, i + 1);
												innerSrc = b.join('.');

												// Traverse each entry in the array setting the properties requested
												if ($.isArray(val)) {
														for (var j = 0, jLen = val.length; j < jLen; j++) {
																o = {};
																setData(o, val[j], innerSrc);
																data[a[i]].push(o);
														}
												} else {
														// We've been asked to save data to an array, but it
														// isn't array data to be saved. Best that can be done
														// is to just save the value.
														data[a[i]] = val;
												}

												// The inner call to setData has already traversed through the remainder
												// of the source and has set the data, thus we can exit here
												return;
										} else if (funcNotation) {
												// Function call
												a[i] = a[i].replace(__reFn, '');
												data = data[a[i]](val);
										}

										// If the nested object doesn't currently exist - since we are
										// trying to set the value - create it
										if (data[a[i]] === null || data[a[i]] === undefined) {
												data[a[i]] = {};
										}
										data = data[a[i]];
								}

								// Last item in the input - i.e, the actual set
								if (aLast.match(__reFn)) {
										// Function call
										data = data[aLast.replace(__reFn, '')](val);
								} else {
										// If array notation is used, we just want to strip it and use the property name
										// and assign the value. If it isn't used, then we get the result we want anyway
										data[aLast.replace(__reArray, '')] = val;
								}
						};

						return function (data, val) {
								// meta is also passed in, but not used
								return setData(data, val, mSource);
						};
				} else {
						/* Array or flat object mapping */
						return function (data, val) {
								// meta is also passed in, but not used
								data[mSource] = val;
						};
				}
		}

		/**
   * Return an array with the full table data
   *  @param {object} oSettings dataTables settings object
   *  @returns array {array} aData Master data array
   *  @memberof DataTable#oApi
   */
		function _fnGetDataMaster(settings) {
				return _pluck(settings.aoData, '_aData');
		}

		/**
   * Nuke the table
   *  @param {object} oSettings dataTables settings object
   *  @memberof DataTable#oApi
   */
		function _fnClearTable(settings) {
				settings.aoData.length = 0;
				settings.aiDisplayMaster.length = 0;
				settings.aiDisplay.length = 0;
				settings.aIds = {};
		}

		/**
  * Take an array of integers (index array) and remove a target integer (value - not
  * the key!)
  *  @param {array} a Index array to target
  *  @param {int} iTarget value to find
  *  @memberof DataTable#oApi
  */
		function _fnDeleteIndex(a, iTarget, splice) {
				var iTargetIndex = -1;

				for (var i = 0, iLen = a.length; i < iLen; i++) {
						if (a[i] == iTarget) {
								iTargetIndex = i;
						} else if (a[i] > iTarget) {
								a[i]--;
						}
				}

				if (iTargetIndex != -1 && splice === undefined) {
						a.splice(iTargetIndex, 1);
				}
		}

		/**
   * Mark cached data as invalid such that a re-read of the data will occur when
   * the cached data is next requested. Also update from the data source object.
   *
   * @param {object} settings DataTables settings object
   * @param {int}    rowIdx   Row index to invalidate
   * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'
   *     or 'data'
   * @param {int}    [colIdx] Column index to invalidate. If undefined the whole
   *     row will be invalidated
   * @memberof DataTable#oApi
   *
   * @todo For the modularisation of v1.11 this will need to become a callback, so
   *   the sort and filter methods can subscribe to it. That will required
   *   initialisation options for sorting, which is why it is not already baked in
   */
		function _fnInvalidate(settings, rowIdx, src, colIdx) {
				var row = settings.aoData[rowIdx];
				var i, ien;
				var cellWrite = function cellWrite(cell, col) {
						// This is very frustrating, but in IE if you just write directly
						// to innerHTML, and elements that are overwritten are GC'ed,
						// even if there is a reference to them elsewhere
						while (cell.childNodes.length) {
								cell.removeChild(cell.firstChild);
						}

						cell.innerHTML = _fnGetCellData(settings, rowIdx, col, 'display');
				};

				// Are we reading last data from DOM or the data object?
				if (src === 'dom' || (!src || src === 'auto') && row.src === 'dom') {
						// Read the data from the DOM
						row._aData = _fnGetRowElements(settings, row, colIdx, colIdx === undefined ? undefined : row._aData).data;
				} else {
						// Reading from data object, update the DOM
						var cells = row.anCells;

						if (cells) {
								if (colIdx !== undefined) {
										cellWrite(cells[colIdx], colIdx);
								} else {
										for (i = 0, ien = cells.length; i < ien; i++) {
												cellWrite(cells[i], i);
										}
								}
						}
				}

				// For both row and cell invalidation, the cached data for sorting and
				// filtering is nulled out
				row._aSortData = null;
				row._aFilterData = null;

				// Invalidate the type for a specific column (if given) or all columns since
				// the data might have changed
				var cols = settings.aoColumns;
				if (colIdx !== undefined) {
						cols[colIdx].sType = null;
				} else {
						for (i = 0, ien = cols.length; i < ien; i++) {
								cols[i].sType = null;
						}

						// Update DataTables special `DT_*` attributes for the row
						_fnRowAttributes(settings, row);
				}
		}

		/**
   * Build a data source object from an HTML row, reading the contents of the
   * cells that are in the row.
   *
   * @param {object} settings DataTables settings object
   * @param {node|object} TR element from which to read data or existing row
   *   object from which to re-read the data from the cells
   * @param {int} [colIdx] Optional column index
   * @param {array|object} [d] Data source object. If `colIdx` is given then this
   *   parameter should also be given and will be used to write the data into.
   *   Only the column in question will be written
   * @returns {object} Object with two parameters: `data` the data read, in
   *   document order, and `cells` and array of nodes (they can be useful to the
   *   caller, so rather than needing a second traversal to get them, just return
   *   them from here).
   * @memberof DataTable#oApi
   */
		function _fnGetRowElements(settings, row, colIdx, d) {
				var tds = [],
				    td = row.firstChild,
				    name,
				    col,
				    o,
				    i = 0,
				    contents,
				    columns = settings.aoColumns,
				    objectRead = settings._rowReadObject;

				// Allow the data object to be passed in, or construct
				d = d !== undefined ? d : objectRead ? {} : [];

				var attr = function attr(str, td) {
						if (typeof str === 'string') {
								var idx = str.indexOf('@');

								if (idx !== -1) {
										var attr = str.substring(idx + 1);
										var setter = _fnSetObjectDataFn(str);
										setter(d, td.getAttribute(attr));
								}
						}
				};

				// Read data from a cell and store into the data object
				var cellProcess = function cellProcess(cell) {
						if (colIdx === undefined || colIdx === i) {
								col = columns[i];
								contents = $.trim(cell.innerHTML);

								if (col && col._bAttrSrc) {
										var setter = _fnSetObjectDataFn(col.mData._);
										setter(d, contents);

										attr(col.mData.sort, cell);
										attr(col.mData.type, cell);
										attr(col.mData.filter, cell);
								} else {
										// Depending on the `data` option for the columns the data can
										// be read to either an object or an array.
										if (objectRead) {
												if (!col._setter) {
														// Cache the setter function
														col._setter = _fnSetObjectDataFn(col.mData);
												}
												col._setter(d, contents);
										} else {
												d[i] = contents;
										}
								}
						}

						i++;
				};

				if (td) {
						// `tr` element was passed in
						while (td) {
								name = td.nodeName.toUpperCase();

								if (name == "TD" || name == "TH") {
										cellProcess(td);
										tds.push(td);
								}

								td = td.nextSibling;
						}
				} else {
						// Existing row object passed in
						tds = row.anCells;

						for (var j = 0, jen = tds.length; j < jen; j++) {
								cellProcess(tds[j]);
						}
				}

				// Read the ID from the DOM if present
				var rowNode = row.firstChild ? row : row.nTr;

				if (rowNode) {
						var id = rowNode.getAttribute('id');

						if (id) {
								_fnSetObjectDataFn(settings.rowId)(d, id);
						}
				}

				return {
						data: d,
						cells: tds
				};
		}
		/**
   * Create a new TR element (and it's TD children) for a row
   *  @param {object} oSettings dataTables settings object
   *  @param {int} iRow Row to consider
   *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,
   *    DataTables will create a row automatically
   *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
   *    if nTr is.
   *  @memberof DataTable#oApi
   */
		function _fnCreateTr(oSettings, iRow, nTrIn, anTds) {
				var row = oSettings.aoData[iRow],
				    rowData = row._aData,
				    cells = [],
				    nTr,
				    nTd,
				    oCol,
				    i,
				    iLen;

				if (row.nTr === null) {
						nTr = nTrIn || document.createElement('tr');

						row.nTr = nTr;
						row.anCells = cells;

						/* Use a private property on the node to allow reserve mapping from the node
       * to the aoData array for fast look up
       */
						nTr._DT_RowIndex = iRow;

						/* Special parameters can be given by the data source to be used on the row */
						_fnRowAttributes(oSettings, row);

						/* Process each column */
						for (i = 0, iLen = oSettings.aoColumns.length; i < iLen; i++) {
								oCol = oSettings.aoColumns[i];

								nTd = nTrIn ? anTds[i] : document.createElement(oCol.sCellType);
								nTd._DT_CellIndex = {
										row: iRow,
										column: i
								};

								cells.push(nTd);

								// Need to create the HTML if new, or if a rendering function is defined
								if ((!nTrIn || oCol.mRender || oCol.mData !== i) && (!$.isPlainObject(oCol.mData) || oCol.mData._ !== i + '.display')) {
										nTd.innerHTML = _fnGetCellData(oSettings, iRow, i, 'display');
								}

								/* Add user defined class */
								if (oCol.sClass) {
										nTd.className += ' ' + oCol.sClass;
								}

								// Visibility - add or remove as required
								if (oCol.bVisible && !nTrIn) {
										nTr.appendChild(nTd);
								} else if (!oCol.bVisible && nTrIn) {
										nTd.parentNode.removeChild(nTd);
								}

								if (oCol.fnCreatedCell) {
										oCol.fnCreatedCell.call(oSettings.oInstance, nTd, _fnGetCellData(oSettings, iRow, i), rowData, iRow, i);
								}
						}

						_fnCallbackFire(oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow]);
				}

				// Remove once webkit bug 131819 and Chromium bug 365619 have been resolved
				// and deployed
				row.nTr.setAttribute('role', 'row');
		}

		/**
   * Add attributes to a row based on the special `DT_*` parameters in a data
   * source object.
   *  @param {object} settings DataTables settings object
   *  @param {object} DataTables row object for the row to be modified
   *  @memberof DataTable#oApi
   */
		function _fnRowAttributes(settings, row) {
				var tr = row.nTr;
				var data = row._aData;

				if (tr) {
						var id = settings.rowIdFn(data);

						if (id) {
								tr.id = id;
						}

						if (data.DT_RowClass) {
								// Remove any classes added by DT_RowClass before
								var a = data.DT_RowClass.split(' ');
								row.__rowc = row.__rowc ? _unique(row.__rowc.concat(a)) : a;

								$(tr).removeClass(row.__rowc.join(' ')).addClass(data.DT_RowClass);
						}

						if (data.DT_RowAttr) {
								$(tr).attr(data.DT_RowAttr);
						}

						if (data.DT_RowData) {
								$(tr).data(data.DT_RowData);
						}
				}
		}

		/**
   * Create the HTML header for the table
   *  @param {object} oSettings dataTables settings object
   *  @memberof DataTable#oApi
   */
		function _fnBuildHead(oSettings) {
				var i, ien, cell, row, column;
				var thead = oSettings.nTHead;
				var tfoot = oSettings.nTFoot;
				var createHeader = $('th, td', thead).length === 0;
				var classes = oSettings.oClasses;
				var columns = oSettings.aoColumns;

				if (createHeader) {
						row = $('<tr/>').appendTo(thead);
				}

				for (i = 0, ien = columns.length; i < ien; i++) {
						column = columns[i];
						cell = $(column.nTh).addClass(column.sClass);

						if (createHeader) {
								cell.appendTo(row);
						}

						// 1.11 move into sorting
						if (oSettings.oFeatures.bSort) {
								cell.addClass(column.sSortingClass);

								if (column.bSortable !== false) {
										cell.attr('tabindex', oSettings.iTabIndex).attr('aria-controls', oSettings.sTableId);

										_fnSortAttachListener(oSettings, column.nTh, i);
								}
						}

						if (column.sTitle != cell[0].innerHTML) {
								cell.html(column.sTitle);
						}

						_fnRenderer(oSettings, 'header')(oSettings, cell, column, classes);
				}

				if (createHeader) {
						_fnDetectHeader(oSettings.aoHeader, thead);
				}

				/* ARIA role for the rows */
				$(thead).find('>tr').attr('role', 'row');

				/* Deal with the footer - add classes if required */
				$(thead).find('>tr>th, >tr>td').addClass(classes.sHeaderTH);
				$(tfoot).find('>tr>th, >tr>td').addClass(classes.sFooterTH);

				// Cache the footer cells. Note that we only take the cells from the first
				// row in the footer. If there is more than one row the user wants to
				// interact with, they need to use the table().foot() method. Note also this
				// allows cells to be used for multiple columns using colspan
				if (tfoot !== null) {
						var cells = oSettings.aoFooter[0];

						for (i = 0, ien = cells.length; i < ien; i++) {
								column = columns[i];
								column.nTf = cells[i].cell;

								if (column.sClass) {
										$(column.nTf).addClass(column.sClass);
								}
						}
				}
		}

		/**
   * Draw the header (or footer) element based on the column visibility states. The
   * methodology here is to use the layout array from _fnDetectHeader, modified for
   * the instantaneous column visibility, to construct the new layout. The grid is
   * traversed over cell at a time in a rows x columns grid fashion, although each
   * cell insert can cover multiple elements in the grid - which is tracks using the
   * aApplied array. Cell inserts in the grid will only occur where there isn't
   * already a cell in that position.
   *  @param {object} oSettings dataTables settings object
   *  @param array {objects} aoSource Layout array from _fnDetectHeader
   *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,
   *  @memberof DataTable#oApi
   */
		function _fnDrawHead(oSettings, aoSource, bIncludeHidden) {
				var i, iLen, j, jLen, k, kLen, n, nLocalTr;
				var aoLocal = [];
				var aApplied = [];
				var iColumns = oSettings.aoColumns.length;
				var iRowspan, iColspan;

				if (!aoSource) {
						return;
				}

				if (bIncludeHidden === undefined) {
						bIncludeHidden = false;
				}

				/* Make a copy of the master layout array, but without the visible columns in it */
				for (i = 0, iLen = aoSource.length; i < iLen; i++) {
						aoLocal[i] = aoSource[i].slice();
						aoLocal[i].nTr = aoSource[i].nTr;

						/* Remove any columns which are currently hidden */
						for (j = iColumns - 1; j >= 0; j--) {
								if (!oSettings.aoColumns[j].bVisible && !bIncludeHidden) {
										aoLocal[i].splice(j, 1);
								}
						}

						/* Prep the applied array - it needs an element for each row */
						aApplied.push([]);
				}

				for (i = 0, iLen = aoLocal.length; i < iLen; i++) {
						nLocalTr = aoLocal[i].nTr;

						/* All cells are going to be replaced, so empty out the row */
						if (nLocalTr) {
								while (n = nLocalTr.firstChild) {
										nLocalTr.removeChild(n);
								}
						}

						for (j = 0, jLen = aoLocal[i].length; j < jLen; j++) {
								iRowspan = 1;
								iColspan = 1;

								/* Check to see if there is already a cell (row/colspan) covering our target
         * insert point. If there is, then there is nothing to do.
         */
								if (aApplied[i][j] === undefined) {
										nLocalTr.appendChild(aoLocal[i][j].cell);
										aApplied[i][j] = 1;

										/* Expand the cell to cover as many rows as needed */
										while (aoLocal[i + iRowspan] !== undefined && aoLocal[i][j].cell == aoLocal[i + iRowspan][j].cell) {
												aApplied[i + iRowspan][j] = 1;
												iRowspan++;
										}

										/* Expand the cell to cover as many columns as needed */
										while (aoLocal[i][j + iColspan] !== undefined && aoLocal[i][j].cell == aoLocal[i][j + iColspan].cell) {
												/* Must update the applied array over the rows for the columns */
												for (k = 0; k < iRowspan; k++) {
														aApplied[i + k][j + iColspan] = 1;
												}
												iColspan++;
										}

										/* Do the actual expansion in the DOM */
										$(aoLocal[i][j].cell).attr('rowspan', iRowspan).attr('colspan', iColspan);
								}
						}
				}
		}

		/**
   * Insert the required TR nodes into the table for display
   *  @param {object} oSettings dataTables settings object
   *  @memberof DataTable#oApi
   */
		function _fnDraw(oSettings) {
				/* Provide a pre-callback function which can be used to cancel the draw is false is returned */
				var aPreDraw = _fnCallbackFire(oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings]);
				if ($.inArray(false, aPreDraw) !== -1) {
						_fnProcessingDisplay(oSettings, false);
						return;
				}

				var i, iLen, n;
				var anRows = [];
				var iRowCount = 0;
				var asStripeClasses = oSettings.asStripeClasses;
				var iStripes = asStripeClasses.length;
				var iOpenRows = oSettings.aoOpenRows.length;
				var oLang = oSettings.oLanguage;
				var iInitDisplayStart = oSettings.iInitDisplayStart;
				var bServerSide = _fnDataSource(oSettings) == 'ssp';
				var aiDisplay = oSettings.aiDisplay;

				oSettings.bDrawing = true;

				/* Check and see if we have an initial draw position from state saving */
				if (iInitDisplayStart !== undefined && iInitDisplayStart !== -1) {
						oSettings._iDisplayStart = bServerSide ? iInitDisplayStart : iInitDisplayStart >= oSettings.fnRecordsDisplay() ? 0 : iInitDisplayStart;

						oSettings.iInitDisplayStart = -1;
				}

				var iDisplayStart = oSettings._iDisplayStart;
				var iDisplayEnd = oSettings.fnDisplayEnd();

				/* Server-side processing draw intercept */
				if (oSettings.bDeferLoading) {
						oSettings.bDeferLoading = false;
						oSettings.iDraw++;
						_fnProcessingDisplay(oSettings, false);
				} else if (!bServerSide) {
						oSettings.iDraw++;
				} else if (!oSettings.bDestroying && !_fnAjaxUpdate(oSettings)) {
						return;
				}

				if (aiDisplay.length !== 0) {
						var iStart = bServerSide ? 0 : iDisplayStart;
						var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;

						for (var j = iStart; j < iEnd; j++) {
								var iDataIndex = aiDisplay[j];
								var aoData = oSettings.aoData[iDataIndex];
								if (aoData.nTr === null) {
										_fnCreateTr(oSettings, iDataIndex);
								}

								var nRow = aoData.nTr;

								/* Remove the old striping classes and then add the new one */
								if (iStripes !== 0) {
										var sStripe = asStripeClasses[iRowCount % iStripes];
										if (aoData._sRowStripe != sStripe) {
												$(nRow).removeClass(aoData._sRowStripe).addClass(sStripe);
												aoData._sRowStripe = sStripe;
										}
								}

								// Row callback functions - might want to manipulate the row
								// iRowCount and j are not currently documented. Are they at all
								// useful?
								_fnCallbackFire(oSettings, 'aoRowCallback', null, [nRow, aoData._aData, iRowCount, j]);

								anRows.push(nRow);
								iRowCount++;
						}
				} else {
						/* Table is empty - create a row with an empty message in it */
						var sZero = oLang.sZeroRecords;
						if (oSettings.iDraw == 1 && _fnDataSource(oSettings) == 'ajax') {
								sZero = oLang.sLoadingRecords;
						} else if (oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0) {
								sZero = oLang.sEmptyTable;
						}

						anRows[0] = $('<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' }).append($('<td />', {
								'valign': 'top',
								'colSpan': _fnVisbleColumns(oSettings),
								'class': oSettings.oClasses.sRowEmpty
						}).html(sZero))[0];
				}

				/* Header and footer callbacks */
				_fnCallbackFire(oSettings, 'aoHeaderCallback', 'header', [$(oSettings.nTHead).children('tr')[0], _fnGetDataMaster(oSettings), iDisplayStart, iDisplayEnd, aiDisplay]);

				_fnCallbackFire(oSettings, 'aoFooterCallback', 'footer', [$(oSettings.nTFoot).children('tr')[0], _fnGetDataMaster(oSettings), iDisplayStart, iDisplayEnd, aiDisplay]);

				var body = $(oSettings.nTBody);

				body.children().detach();
				body.append($(anRows));

				/* Call all required callback functions for the end of a draw */
				_fnCallbackFire(oSettings, 'aoDrawCallback', 'draw', [oSettings]);

				/* Draw is complete, sorting and filtering must be as well */
				oSettings.bSorted = false;
				oSettings.bFiltered = false;
				oSettings.bDrawing = false;
		}

		/**
   * Redraw the table - taking account of the various features which are enabled
   *  @param {object} oSettings dataTables settings object
   *  @param {boolean} [holdPosition] Keep the current paging position. By default
   *    the paging is reset to the first page
   *  @memberof DataTable#oApi
   */
		function _fnReDraw(settings, holdPosition) {
				var features = settings.oFeatures,
				    sort = features.bSort,
				    filter = features.bFilter;

				if (sort) {
						_fnSort(settings);
				}

				if (filter) {
						_fnFilterComplete(settings, settings.oPreviousSearch);
				} else {
						// No filtering, so we want to just use the display master
						settings.aiDisplay = settings.aiDisplayMaster.slice();
				}

				if (holdPosition !== true) {
						settings._iDisplayStart = 0;
				}

				// Let any modules know about the draw hold position state (used by
				// scrolling internally)
				settings._drawHold = holdPosition;

				_fnDraw(settings);

				settings._drawHold = false;
		}

		/**
   * Add the options to the page HTML for the table
   *  @param {object} oSettings dataTables settings object
   *  @memberof DataTable#oApi
   */
		function _fnAddOptionsHtml(oSettings) {
				var classes = oSettings.oClasses;
				var table = $(oSettings.nTable);
				var holding = $('<div/>').insertBefore(table); // Holding element for speed
				var features = oSettings.oFeatures;

				// All DataTables are wrapped in a div
				var insert = $('<div/>', {
						id: oSettings.sTableId + '_wrapper',
						'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' ' + classes.sNoFooter)
				});

				oSettings.nHolding = holding[0];
				oSettings.nTableWrapper = insert[0];
				oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;

				/* Loop over the user set positioning and place the elements as needed */
				var aDom = oSettings.sDom.split('');
				var featureNode, cOption, nNewNode, cNext, sAttr, j;
				for (var i = 0; i < aDom.length; i++) {
						featureNode = null;
						cOption = aDom[i];

						if (cOption == '<') {
								/* New container div */
								nNewNode = $('<div/>')[0];

								/* Check to see if we should append an id and/or a class name to the container */
								cNext = aDom[i + 1];
								if (cNext == "'" || cNext == '"') {
										sAttr = "";
										j = 2;
										while (aDom[i + j] != cNext) {
												sAttr += aDom[i + j];
												j++;
										}

										/* Replace jQuery UI constants @todo depreciated */
										if (sAttr == "H") {
												sAttr = classes.sJUIHeader;
										} else if (sAttr == "F") {
												sAttr = classes.sJUIFooter;
										}

										/* The attribute can be in the format of "#id.class", "#id" or "class" This logic
           * breaks the string into parts and applies them as needed
           */
										if (sAttr.indexOf('.') != -1) {
												var aSplit = sAttr.split('.');
												nNewNode.id = aSplit[0].substr(1, aSplit[0].length - 1);
												nNewNode.className = aSplit[1];
										} else if (sAttr.charAt(0) == "#") {
												nNewNode.id = sAttr.substr(1, sAttr.length - 1);
										} else {
												nNewNode.className = sAttr;
										}

										i += j; /* Move along the position array */
								}

								insert.append(nNewNode);
								insert = $(nNewNode);
						} else if (cOption == '>') {
								/* End container div */
								insert = insert.parent();
						}
						// @todo Move options into their own plugins?
						else if (cOption == 'l' && features.bPaginate && features.bLengthChange) {
										/* Length */
										featureNode = _fnFeatureHtmlLength(oSettings);
								} else if (cOption == 'f' && features.bFilter) {
										/* Filter */
										featureNode = _fnFeatureHtmlFilter(oSettings);
								} else if (cOption == 'r' && features.bProcessing) {
										/* pRocessing */
										featureNode = _fnFeatureHtmlProcessing(oSettings);
								} else if (cOption == 't') {
										/* Table */
										featureNode = _fnFeatureHtmlTable(oSettings);
								} else if (cOption == 'i' && features.bInfo) {
										/* Info */
										featureNode = _fnFeatureHtmlInfo(oSettings);
								} else if (cOption == 'p' && features.bPaginate) {
										/* Pagination */
										featureNode = _fnFeatureHtmlPaginate(oSettings);
								} else if (_DataTable.ext.feature.length !== 0) {
										/* Plug-in features */
										var aoFeatures = _DataTable.ext.feature;
										for (var k = 0, kLen = aoFeatures.length; k < kLen; k++) {
												if (cOption == aoFeatures[k].cFeature) {
														featureNode = aoFeatures[k].fnInit(oSettings);
														break;
												}
										}
								}

						/* Add to the 2D features array */
						if (featureNode) {
								var aanFeatures = oSettings.aanFeatures;

								if (!aanFeatures[cOption]) {
										aanFeatures[cOption] = [];
								}

								aanFeatures[cOption].push(featureNode);
								insert.append(featureNode);
						}
				}

				/* Built our DOM structure - replace the holding div with what we want */
				holding.replaceWith(insert);
				oSettings.nHolding = null;
		}

		/**
   * Use the DOM source to create up an array of header cells. The idea here is to
   * create a layout grid (array) of rows x columns, which contains a reference
   * to the cell that that point in the grid (regardless of col/rowspan), such that
   * any column / row could be removed and the new grid constructed
   *  @param array {object} aLayout Array to store the calculated layout in
   *  @param {node} nThead The header/footer element for the table
   *  @memberof DataTable#oApi
   */
		function _fnDetectHeader(aLayout, nThead) {
				var nTrs = $(nThead).children('tr');
				var nTr, nCell;
				var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;
				var bUnique;
				var fnShiftCol = function fnShiftCol(a, i, j) {
						var k = a[i];
						while (k[j]) {
								j++;
						}
						return j;
				};

				aLayout.splice(0, aLayout.length);

				/* We know how many rows there are in the layout - so prep it */
				for (i = 0, iLen = nTrs.length; i < iLen; i++) {
						aLayout.push([]);
				}

				/* Calculate a layout array */
				for (i = 0, iLen = nTrs.length; i < iLen; i++) {
						nTr = nTrs[i];
						iColumn = 0;

						/* For every cell in the row... */
						nCell = nTr.firstChild;
						while (nCell) {
								if (nCell.nodeName.toUpperCase() == "TD" || nCell.nodeName.toUpperCase() == "TH") {
										/* Get the col and rowspan attributes from the DOM and sanitise them */
										iColspan = nCell.getAttribute('colspan') * 1;
										iRowspan = nCell.getAttribute('rowspan') * 1;
										iColspan = !iColspan || iColspan === 0 || iColspan === 1 ? 1 : iColspan;
										iRowspan = !iRowspan || iRowspan === 0 || iRowspan === 1 ? 1 : iRowspan;

										/* There might be colspan cells already in this row, so shift our target
           * accordingly
           */
										iColShifted = fnShiftCol(aLayout, i, iColumn);

										/* Cache calculation for unique columns */
										bUnique = iColspan === 1 ? true : false;

										/* If there is col / rowspan, copy the information into the layout grid */
										for (l = 0; l < iColspan; l++) {
												for (k = 0; k < iRowspan; k++) {
														aLayout[i + k][iColShifted + l] = {
																"cell": nCell,
																"unique": bUnique
														};
														aLayout[i + k].nTr = nTr;
												}
										}
								}
								nCell = nCell.nextSibling;
						}
				}
		}

		/**
   * Get an array of unique th elements, one for each column
   *  @param {object} oSettings dataTables settings object
   *  @param {node} nHeader automatically detect the layout from this node - optional
   *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional
   *  @returns array {node} aReturn list of unique th's
   *  @memberof DataTable#oApi
   */
		function _fnGetUniqueThs(oSettings, nHeader, aLayout) {
				var aReturn = [];
				if (!aLayout) {
						aLayout = oSettings.aoHeader;
						if (nHeader) {
								aLayout = [];
								_fnDetectHeader(aLayout, nHeader);
						}
				}

				for (var i = 0, iLen = aLayout.length; i < iLen; i++) {
						for (var j = 0, jLen = aLayout[i].length; j < jLen; j++) {
								if (aLayout[i][j].unique && (!aReturn[j] || !oSettings.bSortCellsTop)) {
										aReturn[j] = aLayout[i][j].cell;
								}
						}
				}

				return aReturn;
		}

		/**
   * Create an Ajax call based on the table's settings, taking into account that
   * parameters can have multiple forms, and backwards compatibility.
   *
   * @param {object} oSettings dataTables settings object
   * @param {array} data Data to send to the server, required by
   *     DataTables - may be augmented by developer callbacks
   * @param {function} fn Callback function to run when data is obtained
   */
		function _fnBuildAjax(oSettings, data, fn) {
				// Compatibility with 1.9-, allow fnServerData and event to manipulate
				_fnCallbackFire(oSettings, 'aoServerParams', 'serverParams', [data]);

				// Convert to object based for 1.10+ if using the old array scheme which can
				// come from server-side processing or serverParams
				if (data && $.isArray(data)) {
						var tmp = {};
						var rbracket = /(.*?)\[\]$/;

						$.each(data, function (key, val) {
								var match = val.name.match(rbracket);

								if (match) {
										// Support for arrays
										var name = match[0];

										if (!tmp[name]) {
												tmp[name] = [];
										}
										tmp[name].push(val.value);
								} else {
										tmp[val.name] = val.value;
								}
						});
						data = tmp;
				}

				var ajaxData;
				var ajax = oSettings.ajax;
				var instance = oSettings.oInstance;
				var callback = function callback(json) {
						_fnCallbackFire(oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR]);
						fn(json);
				};

				if ($.isPlainObject(ajax) && ajax.data) {
						ajaxData = ajax.data;

						var newData = $.isFunction(ajaxData) ? ajaxData(data, oSettings) : // fn can manipulate data or return
						ajaxData; // an object object or array to merge

						// If the function returned something, use that alone
						data = $.isFunction(ajaxData) && newData ? newData : $.extend(true, data, newData);

						// Remove the data property as we've resolved it already and don't want
						// jQuery to do it again (it is restored at the end of the function)
						delete ajax.data;
				}

				var baseAjax = {
						"data": data,
						"success": function success(json) {
								var error = json.error || json.sError;
								if (error) {
										_fnLog(oSettings, 0, error);
								}

								oSettings.json = json;
								callback(json);
						},
						"dataType": "json",
						"cache": false,
						"type": oSettings.sServerMethod,
						"error": function error(xhr, _error, thrown) {
								var ret = _fnCallbackFire(oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR]);

								if ($.inArray(true, ret) === -1) {
										if (_error == "parsererror") {
												_fnLog(oSettings, 0, 'Invalid JSON response', 1);
										} else if (xhr.readyState === 4) {
												_fnLog(oSettings, 0, 'Ajax error', 7);
										}
								}

								_fnProcessingDisplay(oSettings, false);
						}
				};

				// Store the data submitted for the API
				oSettings.oAjaxData = data;

				// Allow plug-ins and external processes to modify the data
				_fnCallbackFire(oSettings, null, 'preXhr', [oSettings, data]);

				if (oSettings.fnServerData) {
						// DataTables 1.9- compatibility
						oSettings.fnServerData.call(instance, oSettings.sAjaxSource, $.map(data, function (val, key) {
								// Need to convert back to 1.9 trad format
								return { name: key, value: val };
						}), callback, oSettings);
				} else if (oSettings.sAjaxSource || typeof ajax === 'string') {
						// DataTables 1.9- compatibility
						oSettings.jqXHR = $.ajax($.extend(baseAjax, {
								url: ajax || oSettings.sAjaxSource
						}));
				} else if ($.isFunction(ajax)) {
						// Is a function - let the caller define what needs to be done
						oSettings.jqXHR = ajax.call(instance, data, callback, oSettings);
				} else {
						// Object to extend the base settings
						oSettings.jqXHR = $.ajax($.extend(baseAjax, ajax));

						// Restore for next time around
						ajax.data = ajaxData;
				}
		}

		/**
   * Update the table using an Ajax call
   *  @param {object} settings dataTables settings object
   *  @returns {boolean} Block the table drawing or not
   *  @memberof DataTable#oApi
   */
		function _fnAjaxUpdate(settings) {
				if (settings.bAjaxDataGet) {
						settings.iDraw++;
						_fnProcessingDisplay(settings, true);

						_fnBuildAjax(settings, _fnAjaxParameters(settings), function (json) {
								_fnAjaxUpdateDraw(settings, json);
						});

						return false;
				}
				return true;
		}

		/**
   * Build up the parameters in an object needed for a server-side processing
   * request. Note that this is basically done twice, is different ways - a modern
   * method which is used by default in DataTables 1.10 which uses objects and
   * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if
   * the sAjaxSource option is used in the initialisation, or the legacyAjax
   * option is set.
   *  @param {object} oSettings dataTables settings object
   *  @returns {bool} block the table drawing or not
   *  @memberof DataTable#oApi
   */
		function _fnAjaxParameters(settings) {
				var columns = settings.aoColumns,
				    columnCount = columns.length,
				    features = settings.oFeatures,
				    preSearch = settings.oPreviousSearch,
				    preColSearch = settings.aoPreSearchCols,
				    i,
				    data = [],
				    dataProp,
				    column,
				    columnSearch,
				    sort = _fnSortFlatten(settings),
				    displayStart = settings._iDisplayStart,
				    displayLength = features.bPaginate !== false ? settings._iDisplayLength : -1;

				var param = function param(name, value) {
						data.push({ 'name': name, 'value': value });
				};

				// DataTables 1.9- compatible method
				param('sEcho', settings.iDraw);
				param('iColumns', columnCount);
				param('sColumns', _pluck(columns, 'sName').join(','));
				param('iDisplayStart', displayStart);
				param('iDisplayLength', displayLength);

				// DataTables 1.10+ method
				var d = {
						draw: settings.iDraw,
						columns: [],
						order: [],
						start: displayStart,
						length: displayLength,
						search: {
								value: preSearch.sSearch,
								regex: preSearch.bRegex
						}
				};

				for (i = 0; i < columnCount; i++) {
						column = columns[i];
						columnSearch = preColSearch[i];
						dataProp = typeof column.mData == "function" ? 'function' : column.mData;

						d.columns.push({
								data: dataProp,
								name: column.sName,
								searchable: column.bSearchable,
								orderable: column.bSortable,
								search: {
										value: columnSearch.sSearch,
										regex: columnSearch.bRegex
								}
						});

						param("mDataProp_" + i, dataProp);

						if (features.bFilter) {
								param('sSearch_' + i, columnSearch.sSearch);
								param('bRegex_' + i, columnSearch.bRegex);
								param('bSearchable_' + i, column.bSearchable);
						}

						if (features.bSort) {
								param('bSortable_' + i, column.bSortable);
						}
				}

				if (features.bFilter) {
						param('sSearch', preSearch.sSearch);
						param('bRegex', preSearch.bRegex);
				}

				if (features.bSort) {
						$.each(sort, function (i, val) {
								d.order.push({ column: val.col, dir: val.dir });

								param('iSortCol_' + i, val.col);
								param('sSortDir_' + i, val.dir);
						});

						param('iSortingCols', sort.length);
				}

				// If the legacy.ajax parameter is null, then we automatically decide which
				// form to use, based on sAjaxSource
				var legacy = _DataTable.ext.legacy.ajax;
				if (legacy === null) {
						return settings.sAjaxSource ? data : d;
				}

				// Otherwise, if legacy has been specified then we use that to decide on the
				// form
				return legacy ? data : d;
		}

		/**
   * Data the data from the server (nuking the old) and redraw the table
   *  @param {object} oSettings dataTables settings object
   *  @param {object} json json data return from the server.
   *  @param {string} json.sEcho Tracking flag for DataTables to match requests
   *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering
   *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering
   *  @param {array} json.aaData The data to display on this page
   *  @param {string} [json.sColumns] Column ordering (sName, comma separated)
   *  @memberof DataTable#oApi
   */
		function _fnAjaxUpdateDraw(settings, json) {
				// v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.
				// Support both
				var compat = function compat(old, modern) {
						return json[old] !== undefined ? json[old] : json[modern];
				};

				var data = _fnAjaxDataSrc(settings, json);
				var draw = compat('sEcho', 'draw');
				var recordsTotal = compat('iTotalRecords', 'recordsTotal');
				var recordsFiltered = compat('iTotalDisplayRecords', 'recordsFiltered');

				if (draw) {
						// Protect against out of sequence returns
						if (draw * 1 < settings.iDraw) {
								return;
						}
						settings.iDraw = draw * 1;
				}

				_fnClearTable(settings);
				settings._iRecordsTotal = parseInt(recordsTotal, 10);
				settings._iRecordsDisplay = parseInt(recordsFiltered, 10);

				for (var i = 0, ien = data.length; i < ien; i++) {
						_fnAddData(settings, data[i]);
				}
				settings.aiDisplay = settings.aiDisplayMaster.slice();

				settings.bAjaxDataGet = false;
				_fnDraw(settings);

				if (!settings._bInitComplete) {
						_fnInitComplete(settings, json);
				}

				settings.bAjaxDataGet = true;
				_fnProcessingDisplay(settings, false);
		}

		/**
   * Get the data from the JSON data source to use for drawing a table. Using
   * `_fnGetObjectDataFn` allows the data to be sourced from a property of the
   * source object, or from a processing function.
   *  @param {object} oSettings dataTables settings object
   *  @param  {object} json Data source object / array from the server
   *  @return {array} Array of data to use
   */
		function _fnAjaxDataSrc(oSettings, json) {
				var dataSrc = $.isPlainObject(oSettings.ajax) && oSettings.ajax.dataSrc !== undefined ? oSettings.ajax.dataSrc : oSettings.sAjaxDataProp; // Compatibility with 1.9-.

				// Compatibility with 1.9-. In order to read from aaData, check if the
				// default has been changed, if not, check for aaData
				if (dataSrc === 'data') {
						return json.aaData || json[dataSrc];
				}

				return dataSrc !== "" ? _fnGetObjectDataFn(dataSrc)(json) : json;
		}

		/**
   * Generate the node required for filtering text
   *  @returns {node} Filter control element
   *  @param {object} oSettings dataTables settings object
   *  @memberof DataTable#oApi
   */
		function _fnFeatureHtmlFilter(settings) {
				var classes = settings.oClasses;
				var tableId = settings.sTableId;
				var language = settings.oLanguage;
				var previousSearch = settings.oPreviousSearch;
				var features = settings.aanFeatures;
				var input = '<input type="search" class="' + classes.sFilterInput + '"/>';

				var str = language.sSearch;
				str = str.match(/_INPUT_/) ? str.replace('_INPUT_', input) : str + input;

				var filter = $('<div/>', {
						'id': !features.f ? tableId + '_filter' : null,
						'class': classes.sFilter
				}).append($('<label/>').append(str));

				var searchFn = function searchFn() {
						/* Update all other filter input elements for the new display */
						var n = features.f;
						var val = !this.value ? "" : this.value; // mental IE8 fix :-(

						/* Now do the filter */
						if (val != previousSearch.sSearch) {
								_fnFilterComplete(settings, {
										"sSearch": val,
										"bRegex": previousSearch.bRegex,
										"bSmart": previousSearch.bSmart,
										"bCaseInsensitive": previousSearch.bCaseInsensitive
								});

								// Need to redraw, without resorting
								settings._iDisplayStart = 0;
								_fnDraw(settings);
						}
				};

				var searchDelay = settings.searchDelay !== null ? settings.searchDelay : _fnDataSource(settings) === 'ssp' ? 400 : 0;

				var jqFilter = $('input', filter).val(previousSearch.sSearch).attr('placeholder', language.sSearchPlaceholder).bind('keyup.DT search.DT input.DT paste.DT cut.DT', searchDelay ? _fnThrottle(searchFn, searchDelay) : searchFn).bind('keypress.DT', function (e) {
						/* Prevent form submission */
						if (e.keyCode == 13) {
								return false;
						}
				}).attr('aria-controls', tableId);

				// Update the input elements whenever the table is filtered
				$(settings.nTable).on('search.dt.DT', function (ev, s) {
						if (settings === s) {
								// IE9 throws an 'unknown error' if document.activeElement is used
								// inside an iframe or frame...
								try {
										if (jqFilter[0] !== document.activeElement) {
												jqFilter.val(previousSearch.sSearch);
										}
								} catch (e) {}
						}
				});

				return filter[0];
		}

		/**
   * Filter the table using both the global filter and column based filtering
   *  @param {object} oSettings dataTables settings object
   *  @param {object} oSearch search information
   *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)
   *  @memberof DataTable#oApi
   */
		function _fnFilterComplete(oSettings, oInput, iForce) {
				var oPrevSearch = oSettings.oPreviousSearch;
				var aoPrevSearch = oSettings.aoPreSearchCols;
				var fnSaveFilter = function fnSaveFilter(oFilter) {
						/* Save the filtering values */
						oPrevSearch.sSearch = oFilter.sSearch;
						oPrevSearch.bRegex = oFilter.bRegex;
						oPrevSearch.bSmart = oFilter.bSmart;
						oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;
				};
				var fnRegex = function fnRegex(o) {
						// Backwards compatibility with the bEscapeRegex option
						return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;
				};

				// Resolve any column types that are unknown due to addition or invalidation
				// @todo As per sort - can this be moved into an event handler?
				_fnColumnTypes(oSettings);

				/* In server-side processing all filtering is done by the server, so no point hanging around here */
				if (_fnDataSource(oSettings) != 'ssp') {
						/* Global filter */
						_fnFilter(oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive);
						fnSaveFilter(oInput);

						/* Now do the individual column filter */
						for (var i = 0; i < aoPrevSearch.length; i++) {
								_fnFilterColumn(oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]), aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive);
						}

						/* Custom filtering */
						_fnFilterCustom(oSettings);
				} else {
						fnSaveFilter(oInput);
				}

				/* Tell the draw function we have been filtering */
				oSettings.bFiltered = true;
				_fnCallbackFire(oSettings, null, 'search', [oSettings]);
		}

		/**
   * Apply custom filtering functions
   *  @param {object} oSettings dataTables settings object
   *  @memberof DataTable#oApi
   */
		function _fnFilterCustom(settings) {
				var filters = _DataTable.ext.search;
				var displayRows = settings.aiDisplay;
				var row, rowIdx;

				for (var i = 0, ien = filters.length; i < ien; i++) {
						var rows = [];

						// Loop over each row and see if it should be included
						for (var j = 0, jen = displayRows.length; j < jen; j++) {
								rowIdx = displayRows[j];
								row = settings.aoData[rowIdx];

								if (filters[i](settings, row._aFilterData, rowIdx, row._aData, j)) {
										rows.push(rowIdx);
								}
						}

						// So the array reference doesn't break set the results into the
						// existing array
						displayRows.length = 0;
						$.merge(displayRows, rows);
				}
		}

		/**
   * Filter the table on a per-column basis
   *  @param {object} oSettings dataTables settings object
   *  @param {string} sInput string to filter on
   *  @param {int} iColumn column to filter
   *  @param {bool} bRegex treat search string as a regular expression or not
   *  @param {bool} bSmart use smart filtering or not
   *  @param {bool} bCaseInsensitive Do case insenstive matching or not
   *  @memberof DataTable#oApi
   */
		function _fnFilterColumn(settings, searchStr, colIdx, regex, smart, caseInsensitive) {
				if (searchStr === '') {
						return;
				}

				var data;
				var display = settings.aiDisplay;
				var rpSearch = _fnFilterCreateSearch(searchStr, regex, smart, caseInsensitive);

				for (var i = display.length - 1; i >= 0; i--) {
						data = settings.aoData[display[i]]._aFilterData[colIdx];

						if (!rpSearch.test(data)) {
								display.splice(i, 1);
						}
				}
		}

		/**
   * Filter the data table based on user input and draw the table
   *  @param {object} settings dataTables settings object
   *  @param {string} input string to filter on
   *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)
   *  @param {bool} regex treat as a regular expression or not
   *  @param {bool} smart perform smart filtering or not
   *  @param {bool} caseInsensitive Do case insenstive matching or not
   *  @memberof DataTable#oApi
   */
		function _fnFilter(settings, input, force, regex, smart, caseInsensitive) {
				var rpSearch = _fnFilterCreateSearch(input, regex, smart, caseInsensitive);
				var prevSearch = settings.oPreviousSearch.sSearch;
				var displayMaster = settings.aiDisplayMaster;
				var display, invalidated, i;

				// Need to take account of custom filtering functions - always filter
				if (_DataTable.ext.search.length !== 0) {
						force = true;
				}

				// Check if any of the rows were invalidated
				invalidated = _fnFilterData(settings);

				// If the input is blank - we just want the full data set
				if (input.length <= 0) {
						settings.aiDisplay = displayMaster.slice();
				} else {
						// New search - start from the master array
						if (invalidated || force || prevSearch.length > input.length || input.indexOf(prevSearch) !== 0 || settings.bSorted // On resort, the display master needs to be
						// re-filtered since indexes will have changed
						) {
										settings.aiDisplay = displayMaster.slice();
								}

						// Search the display array
						display = settings.aiDisplay;

						for (i = display.length - 1; i >= 0; i--) {
								if (!rpSearch.test(settings.aoData[display[i]]._sFilterRow)) {
										display.splice(i, 1);
								}
						}
				}
		}

		/**
   * Build a regular expression object suitable for searching a table
   *  @param {string} sSearch string to search for
   *  @param {bool} bRegex treat as a regular expression or not
   *  @param {bool} bSmart perform smart filtering or not
   *  @param {bool} bCaseInsensitive Do case insensitive matching or not
   *  @returns {RegExp} constructed object
   *  @memberof DataTable#oApi
   */
		function _fnFilterCreateSearch(search, regex, smart, caseInsensitive) {
				search = regex ? search : _fnEscapeRegex(search);

				if (smart) {
						/* For smart filtering we want to allow the search to work regardless of
       * word order. We also want double quoted text to be preserved, so word
       * order is important - a la google. So this is what we want to
       * generate:
       *
       * ^(?=.*?\bone\b)(?=.*?\btwo three\b)(?=.*?\bfour\b).*$
       */
						var a = $.map(search.match(/"[^"]+"|[^ ]+/g) || [''], function (word) {
								if (word.charAt(0) === '"') {
										var m = word.match(/^"(.*)"$/);
										word = m ? m[1] : word;
								}

								return word.replace('"', '');
						});

						search = '^(?=.*?' + a.join(')(?=.*?') + ').*$';
				}

				return new RegExp(search, caseInsensitive ? 'i' : '');
		}

		/**
   * Escape a string such that it can be used in a regular expression
   *  @param {string} sVal string to escape
   *  @returns {string} escaped string
   *  @memberof DataTable#oApi
   */
		function _fnEscapeRegex(sVal) {
				return sVal.replace(_re_escape_regex, '\\$1');
		}

		var __filter_div = $('<div>')[0];
		var __filter_div_textContent = __filter_div.textContent !== undefined;

		// Update the filtering data for each row if needed (by invalidation or first run)
		function _fnFilterData(settings) {
				var columns = settings.aoColumns;
				var column;
				var i, j, ien, jen, filterData, cellData, row;
				var fomatters = _DataTable.ext.type.search;
				var wasInvalidated = false;

				for (i = 0, ien = settings.aoData.length; i < ien; i++) {
						row = settings.aoData[i];

						if (!row._aFilterData) {
								filterData = [];

								for (j = 0, jen = columns.length; j < jen; j++) {
										column = columns[j];

										if (column.bSearchable) {
												cellData = _fnGetCellData(settings, i, j, 'filter');

												if (fomatters[column.sType]) {
														cellData = fomatters[column.sType](cellData);
												}

												// Search in DataTables 1.10 is string based. In 1.11 this
												// should be altered to also allow strict type checking.
												if (cellData === null) {
														cellData = '';
												}

												if (typeof cellData !== 'string' && cellData.toString) {
														cellData = cellData.toString();
												}
										} else {
												cellData = '';
										}

										// If it looks like there is an HTML entity in the string,
										// attempt to decode it so sorting works as expected. Note that
										// we could use a single line of jQuery to do this, but the DOM
										// method used here is much faster http://jsperf.com/html-decode
										if (cellData.indexOf && cellData.indexOf('&') !== -1) {
												__filter_div.innerHTML = cellData;
												cellData = __filter_div_textContent ? __filter_div.textContent : __filter_div.innerText;
										}

										if (cellData.replace) {
												cellData = cellData.replace(/[\r\n]/g, '');
										}

										filterData.push(cellData);
								}

								row._aFilterData = filterData;
								row._sFilterRow = filterData.join('  ');
								wasInvalidated = true;
						}
				}

				return wasInvalidated;
		}

		/**
   * Convert from the internal Hungarian notation to camelCase for external
   * interaction
   *  @param {object} obj Object to convert
   *  @returns {object} Inverted object
   *  @memberof DataTable#oApi
   */
		function _fnSearchToCamel(obj) {
				return {
						search: obj.sSearch,
						smart: obj.bSmart,
						regex: obj.bRegex,
						caseInsensitive: obj.bCaseInsensitive
				};
		}

		/**
   * Convert from camelCase notation to the internal Hungarian. We could use the
   * Hungarian convert function here, but this is cleaner
   *  @param {object} obj Object to convert
   *  @returns {object} Inverted object
   *  @memberof DataTable#oApi
   */
		function _fnSearchToHung(obj) {
				return {
						sSearch: obj.search,
						bSmart: obj.smart,
						bRegex: obj.regex,
						bCaseInsensitive: obj.caseInsensitive
				};
		}

		/**
   * Generate the node required for the info display
   *  @param {object} oSettings dataTables settings object
   *  @returns {node} Information element
   *  @memberof DataTable#oApi
   */
		function _fnFeatureHtmlInfo(settings) {
				var tid = settings.sTableId,
				    nodes = settings.aanFeatures.i,
				    n = $('<div/>', {
						'class': settings.oClasses.sInfo,
						'id': !nodes ? tid + '_info' : null
				});

				if (!nodes) {
						// Update display on each draw
						settings.aoDrawCallback.push({
								"fn": _fnUpdateInfo,
								"sName": "information"
						});

						n.attr('role', 'status').attr('aria-live', 'polite');

						// Table is described by our info div
						$(settings.nTable).attr('aria-describedby', tid + '_info');
				}

				return n[0];
		}

		/**
   * Update the information elements in the display
   *  @param {object} settings dataTables settings object
   *  @memberof DataTable#oApi
   */
		function _fnUpdateInfo(settings) {
				/* Show information about the table */
				var nodes = settings.aanFeatures.i;
				if (nodes.length === 0) {
						return;
				}

				var lang = settings.oLanguage,
				    start = settings._iDisplayStart + 1,
				    end = settings.fnDisplayEnd(),
				    max = settings.fnRecordsTotal(),
				    total = settings.fnRecordsDisplay(),
				    out = total ? lang.sInfo : lang.sInfoEmpty;

				if (total !== max) {
						/* Record set after filtering */
						out += ' ' + lang.sInfoFiltered;
				}

				// Convert the macros
				out += lang.sInfoPostFix;
				out = _fnInfoMacros(settings, out);

				var callback = lang.fnInfoCallback;
				if (callback !== null) {
						out = callback.call(settings.oInstance, settings, start, end, max, total, out);
				}

				$(nodes).html(out);
		}

		function _fnInfoMacros(settings, str) {
				// When infinite scrolling, we are always starting at 1. _iDisplayStart is used only
				// internally
				var formatter = settings.fnFormatNumber,
				    start = settings._iDisplayStart + 1,
				    len = settings._iDisplayLength,
				    vis = settings.fnRecordsDisplay(),
				    all = len === -1;

				return str.replace(/_START_/g, formatter.call(settings, start)).replace(/_END_/g, formatter.call(settings, settings.fnDisplayEnd())).replace(/_MAX_/g, formatter.call(settings, settings.fnRecordsTotal())).replace(/_TOTAL_/g, formatter.call(settings, vis)).replace(/_PAGE_/g, formatter.call(settings, all ? 1 : Math.ceil(start / len))).replace(/_PAGES_/g, formatter.call(settings, all ? 1 : Math.ceil(vis / len)));
		}

		/**
   * Draw the table for the first time, adding all required features
   *  @param {object} settings dataTables settings object
   *  @memberof DataTable#oApi
   */
		function _fnInitialise(settings) {
				var i,
				    iLen,
				    iAjaxStart = settings.iInitDisplayStart;
				var columns = settings.aoColumns,
				    column;
				var features = settings.oFeatures;
				var deferLoading = settings.bDeferLoading; // value modified by the draw

				/* Ensure that the table data is fully initialised */
				if (!settings.bInitialised) {
						setTimeout(function () {
								_fnInitialise(settings);
						}, 200);
						return;
				}

				/* Show the display HTML options */
				_fnAddOptionsHtml(settings);

				/* Build and draw the header / footer for the table */
				_fnBuildHead(settings);
				_fnDrawHead(settings, settings.aoHeader);
				_fnDrawHead(settings, settings.aoFooter);

				/* Okay to show that something is going on now */
				_fnProcessingDisplay(settings, true);

				/* Calculate sizes for columns */
				if (features.bAutoWidth) {
						_fnCalculateColumnWidths(settings);
				}

				for (i = 0, iLen = columns.length; i < iLen; i++) {
						column = columns[i];

						if (column.sWidth) {
								column.nTh.style.width = _fnStringToCss(column.sWidth);
						}
				}

				_fnCallbackFire(settings, null, 'preInit', [settings]);

				// If there is default sorting required - let's do it. The sort function
				// will do the drawing for us. Otherwise we draw the table regardless of the
				// Ajax source - this allows the table to look initialised for Ajax sourcing
				// data (show 'loading' message possibly)
				_fnReDraw(settings);

				// Server-side processing init complete is done by _fnAjaxUpdateDraw
				var dataSrc = _fnDataSource(settings);
				if (dataSrc != 'ssp' || deferLoading) {
						// if there is an ajax source load the data
						if (dataSrc == 'ajax') {
								_fnBuildAjax(settings, [], function (json) {
										var aData = _fnAjaxDataSrc(settings, json);

										// Got the data - add it to the table
										for (i = 0; i < aData.length; i++) {
												_fnAddData(settings, aData[i]);
										}

										// Reset the init display for cookie saving. We've already done
										// a filter, and therefore cleared it before. So we need to make
										// it appear 'fresh'
										settings.iInitDisplayStart = iAjaxStart;

										_fnReDraw(settings);

										_fnProcessingDisplay(settings, false);
										_fnInitComplete(settings, json);
								}, settings);
						} else {
								_fnProcessingDisplay(settings, false);
								_fnInitComplete(settings);
						}
				}
		}

		/**
   * Draw the table for the first time, adding all required features
   *  @param {object} oSettings dataTables settings object
   *  @param {object} [json] JSON from the server that completed the table, if using Ajax source
   *    with client-side processing (optional)
   *  @memberof DataTable#oApi
   */
		function _fnInitComplete(settings, json) {
				settings._bInitComplete = true;

				// When data was added after the initialisation (data or Ajax) we need to
				// calculate the column sizing
				if (json || settings.oInit.aaData) {
						_fnAdjustColumnSizing(settings);
				}

				_fnCallbackFire(settings, null, 'plugin-init', [settings, json]);
				_fnCallbackFire(settings, 'aoInitComplete', 'init', [settings, json]);
		}

		function _fnLengthChange(settings, val) {
				var len = parseInt(val, 10);
				settings._iDisplayLength = len;

				_fnLengthOverflow(settings);

				// Fire length change event
				_fnCallbackFire(settings, null, 'length', [settings, len]);
		}

		/**
   * Generate the node required for user display length changing
   *  @param {object} settings dataTables settings object
   *  @returns {node} Display length feature node
   *  @memberof DataTable#oApi
   */
		function _fnFeatureHtmlLength(settings) {
				var classes = settings.oClasses,
				    tableId = settings.sTableId,
				    menu = settings.aLengthMenu,
				    d2 = $.isArray(menu[0]),
				    lengths = d2 ? menu[0] : menu,
				    language = d2 ? menu[1] : menu;

				var select = $('<select/>', {
						'name': tableId + '_length',
						'aria-controls': tableId,
						'class': classes.sLengthSelect
				});

				for (var i = 0, ien = lengths.length; i < ien; i++) {
						select[0][i] = new Option(language[i], lengths[i]);
				}

				var div = $('<div><label/></div>').addClass(classes.sLength);
				if (!settings.aanFeatures.l) {
						div[0].id = tableId + '_length';
				}

				div.children().append(settings.oLanguage.sLengthMenu.replace('_MENU_', select[0].outerHTML));

				// Can't use `select` variable as user might provide their own and the
				// reference is broken by the use of outerHTML
				$('select', div).val(settings._iDisplayLength).bind('change.DT', function (e) {
						_fnLengthChange(settings, $(this).val());
						_fnDraw(settings);
				});

				// Update node value whenever anything changes the table's length
				$(settings.nTable).bind('length.dt.DT', function (e, s, len) {
						if (settings === s) {
								$('select', div).val(len);
						}
				});

				return div[0];
		}

		/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   * Note that most of the paging logic is done in
   * DataTable.ext.pager
   */

		/**
   * Generate the node required for default pagination
   *  @param {object} oSettings dataTables settings object
   *  @returns {node} Pagination feature node
   *  @memberof DataTable#oApi
   */
		function _fnFeatureHtmlPaginate(settings) {
				var type = settings.sPaginationType,
				    plugin = _DataTable.ext.pager[type],
				    modern = typeof plugin === 'function',
				    redraw = function redraw(settings) {
						_fnDraw(settings);
				},
				    node = $('<div/>').addClass(settings.oClasses.sPaging + type)[0],
				    features = settings.aanFeatures;

				if (!modern) {
						plugin.fnInit(settings, node, redraw);
				}

				/* Add a draw callback for the pagination on first instance, to update the paging display */
				if (!features.p) {
						node.id = settings.sTableId + '_paginate';

						settings.aoDrawCallback.push({
								"fn": function fn(settings) {
										if (modern) {
												var start = settings._iDisplayStart,
												    len = settings._iDisplayLength,
												    visRecords = settings.fnRecordsDisplay(),
												    all = len === -1,
												    page = all ? 0 : Math.ceil(start / len),
												    pages = all ? 1 : Math.ceil(visRecords / len),
												    buttons = plugin(page, pages),
												    i,
												    ien;

												for (i = 0, ien = features.p.length; i < ien; i++) {
														_fnRenderer(settings, 'pageButton')(settings, features.p[i], i, buttons, page, pages);
												}
										} else {
												plugin.fnUpdate(settings, redraw);
										}
								},
								"sName": "pagination"
						});
				}

				return node;
		}

		/**
   * Alter the display settings to change the page
   *  @param {object} settings DataTables settings object
   *  @param {string|int} action Paging action to take: "first", "previous",
   *    "next" or "last" or page number to jump to (integer)
   *  @param [bool] redraw Automatically draw the update or not
   *  @returns {bool} true page has changed, false - no change
   *  @memberof DataTable#oApi
   */
		function _fnPageChange(settings, action, redraw) {
				var start = settings._iDisplayStart,
				    len = settings._iDisplayLength,
				    records = settings.fnRecordsDisplay();

				if (records === 0 || len === -1) {
						start = 0;
				} else if (typeof action === "number") {
						start = action * len;

						if (start > records) {
								start = 0;
						}
				} else if (action == "first") {
						start = 0;
				} else if (action == "previous") {
						start = len >= 0 ? start - len : 0;

						if (start < 0) {
								start = 0;
						}
				} else if (action == "next") {
						if (start + len < records) {
								start += len;
						}
				} else if (action == "last") {
						start = Math.floor((records - 1) / len) * len;
				} else {
						_fnLog(settings, 0, "Unknown paging action: " + action, 5);
				}

				var changed = settings._iDisplayStart !== start;
				settings._iDisplayStart = start;

				if (changed) {
						_fnCallbackFire(settings, null, 'page', [settings]);

						if (redraw) {
								_fnDraw(settings);
						}
				}

				return changed;
		}

		/**
   * Generate the node required for the processing node
   *  @param {object} settings dataTables settings object
   *  @returns {node} Processing element
   *  @memberof DataTable#oApi
   */
		function _fnFeatureHtmlProcessing(settings) {
				return $('<div/>', {
						'id': !settings.aanFeatures.r ? settings.sTableId + '_processing' : null,
						'class': settings.oClasses.sProcessing
				}).html(settings.oLanguage.sProcessing).insertBefore(settings.nTable)[0];
		}

		/**
   * Display or hide the processing indicator
   *  @param {object} settings dataTables settings object
   *  @param {bool} show Show the processing indicator (true) or not (false)
   *  @memberof DataTable#oApi
   */
		function _fnProcessingDisplay(settings, show) {
				if (settings.oFeatures.bProcessing) {
						$(settings.aanFeatures.r).css('display', show ? 'block' : 'none');
				}

				_fnCallbackFire(settings, null, 'processing', [settings, show]);
		}

		/**
   * Add any control elements for the table - specifically scrolling
   *  @param {object} settings dataTables settings object
   *  @returns {node} Node to add to the DOM
   *  @memberof DataTable#oApi
   */
		function _fnFeatureHtmlTable(settings) {
				var table = $(settings.nTable);

				// Add the ARIA grid role to the table
				table.attr('role', 'grid');

				// Scrolling from here on in
				var scroll = settings.oScroll;

				if (scroll.sX === '' && scroll.sY === '') {
						return settings.nTable;
				}

				var scrollX = scroll.sX;
				var scrollY = scroll.sY;
				var classes = settings.oClasses;
				var caption = table.children('caption');
				var captionSide = caption.length ? caption[0]._captionSide : null;
				var headerClone = $(table[0].cloneNode(false));
				var footerClone = $(table[0].cloneNode(false));
				var footer = table.children('tfoot');
				var _div = '<div/>';
				var size = function size(s) {
						return !s ? null : _fnStringToCss(s);
				};

				if (!footer.length) {
						footer = null;
				}

				/*
     * The HTML structure that we want to generate in this function is:
     *  div - scroller
     *    div - scroll head
     *      div - scroll head inner
     *        table - scroll head table
     *          thead - thead
     *    div - scroll body
     *      table - table (master table)
     *        thead - thead clone for sizing
     *        tbody - tbody
     *    div - scroll foot
     *      div - scroll foot inner
     *        table - scroll foot table
     *          tfoot - tfoot
     */
				var scroller = $(_div, { 'class': classes.sScrollWrapper }).append($(_div, { 'class': classes.sScrollHead }).css({
						overflow: 'hidden',
						position: 'relative',
						border: 0,
						width: scrollX ? size(scrollX) : '100%'
				}).append($(_div, { 'class': classes.sScrollHeadInner }).css({
						'box-sizing': 'content-box',
						width: scroll.sXInner || '100%'
				}).append(headerClone.removeAttr('id').css('margin-left', 0).append(captionSide === 'top' ? caption : null).append(table.children('thead'))))).append($(_div, { 'class': classes.sScrollBody }).css({
						position: 'relative',
						overflow: 'auto',
						width: size(scrollX)
				}).append(table));

				if (footer) {
						scroller.append($(_div, { 'class': classes.sScrollFoot }).css({
								overflow: 'hidden',
								border: 0,
								width: scrollX ? size(scrollX) : '100%'
						}).append($(_div, { 'class': classes.sScrollFootInner }).append(footerClone.removeAttr('id').css('margin-left', 0).append(captionSide === 'bottom' ? caption : null).append(table.children('tfoot')))));
				}

				var children = scroller.children();
				var scrollHead = children[0];
				var scrollBody = children[1];
				var scrollFoot = footer ? children[2] : null;

				// When the body is scrolled, then we also want to scroll the headers
				if (scrollX) {
						$(scrollBody).on('scroll.DT', function (e) {
								var scrollLeft = this.scrollLeft;

								scrollHead.scrollLeft = scrollLeft;

								if (footer) {
										scrollFoot.scrollLeft = scrollLeft;
								}
						});
				}

				$(scrollBody).css(scrollY && scroll.bCollapse ? 'max-height' : 'height', scrollY);

				settings.nScrollHead = scrollHead;
				settings.nScrollBody = scrollBody;
				settings.nScrollFoot = scrollFoot;

				// On redraw - align columns
				settings.aoDrawCallback.push({
						"fn": _fnScrollDraw,
						"sName": "scrolling"
				});

				return scroller[0];
		}

		/**
   * Update the header, footer and body tables for resizing - i.e. column
   * alignment.
   *
   * Welcome to the most horrible function DataTables. The process that this
   * function follows is basically:
   *   1. Re-create the table inside the scrolling div
   *   2. Take live measurements from the DOM
   *   3. Apply the measurements to align the columns
   *   4. Clean up
   *
   *  @param {object} settings dataTables settings object
   *  @memberof DataTable#oApi
   */
		function _fnScrollDraw(settings) {
				// Given that this is such a monster function, a lot of variables are use
				// to try and keep the minimised size as small as possible
				var scroll = settings.oScroll,
				    scrollX = scroll.sX,
				    scrollXInner = scroll.sXInner,
				    scrollY = scroll.sY,
				    barWidth = scroll.iBarWidth,
				    divHeader = $(settings.nScrollHead),
				    divHeaderStyle = divHeader[0].style,
				    divHeaderInner = divHeader.children('div'),
				    divHeaderInnerStyle = divHeaderInner[0].style,
				    divHeaderTable = divHeaderInner.children('table'),
				    divBodyEl = settings.nScrollBody,
				    divBody = $(divBodyEl),
				    divBodyStyle = divBodyEl.style,
				    divFooter = $(settings.nScrollFoot),
				    divFooterInner = divFooter.children('div'),
				    divFooterTable = divFooterInner.children('table'),
				    header = $(settings.nTHead),
				    table = $(settings.nTable),
				    tableEl = table[0],
				    tableStyle = tableEl.style,
				    footer = settings.nTFoot ? $(settings.nTFoot) : null,
				    browser = settings.oBrowser,
				    ie67 = browser.bScrollOversize,
				    dtHeaderCells = _pluck(settings.aoColumns, 'nTh'),
				    headerTrgEls,
				    footerTrgEls,
				    headerSrcEls,
				    footerSrcEls,
				    headerCopy,
				    footerCopy,
				    headerWidths = [],
				    footerWidths = [],
				    headerContent = [],
				    footerContent = [],
				    idx,
				    correction,
				    sanityWidth,
				    zeroOut = function zeroOut(nSizer) {
						var style = nSizer.style;
						style.paddingTop = "0";
						style.paddingBottom = "0";
						style.borderTopWidth = "0";
						style.borderBottomWidth = "0";
						style.height = 0;
				};

				// If the scrollbar visibility has changed from the last draw, we need to
				// adjust the column sizes as the table width will have changed to account
				// for the scrollbar
				var scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;

				if (settings.scrollBarVis !== scrollBarVis && settings.scrollBarVis !== undefined) {
						settings.scrollBarVis = scrollBarVis;
						_fnAdjustColumnSizing(settings);
						return; // adjust column sizing will call this function again
				} else {
								settings.scrollBarVis = scrollBarVis;
						}

				/*
     * 1. Re-create the table inside the scrolling div
     */

				// Remove the old minimised thead and tfoot elements in the inner table
				table.children('thead, tfoot').remove();

				if (footer) {
						footerCopy = footer.clone().prependTo(table);
						footerTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized
						footerSrcEls = footerCopy.find('tr');
				}

				// Clone the current header and footer elements and then place it into the inner table
				headerCopy = header.clone().prependTo(table);
				headerTrgEls = header.find('tr'); // original header is in its own table
				headerSrcEls = headerCopy.find('tr');
				headerCopy.find('th, td').removeAttr('tabindex');

				/*
     * 2. Take live measurements from the DOM - do not alter the DOM itself!
     */

				// Remove old sizing and apply the calculated column widths
				// Get the unique column headers in the newly created (cloned) header. We want to apply the
				// calculated sizes to this header
				if (!scrollX) {
						divBodyStyle.width = '100%';
						divHeader[0].style.width = '100%';
				}

				$.each(_fnGetUniqueThs(settings, headerCopy), function (i, el) {
						idx = _fnVisibleToColumnIndex(settings, i);
						el.style.width = settings.aoColumns[idx].sWidth;
				});

				if (footer) {
						_fnApplyToChildren(function (n) {
								n.style.width = "";
						}, footerSrcEls);
				}

				// Size the table as a whole
				sanityWidth = table.outerWidth();
				if (scrollX === "") {
						// No x scrolling
						tableStyle.width = "100%";

						// IE7 will make the width of the table when 100% include the scrollbar
						// - which is shouldn't. When there is a scrollbar we need to take this
						// into account.
						if (ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight || divBody.css('overflow-y') == "scroll")) {
								tableStyle.width = _fnStringToCss(table.outerWidth() - barWidth);
						}

						// Recalculate the sanity width
						sanityWidth = table.outerWidth();
				} else if (scrollXInner !== "") {
						// legacy x scroll inner has been given - use it
						tableStyle.width = _fnStringToCss(scrollXInner);

						// Recalculate the sanity width
						sanityWidth = table.outerWidth();
				}

				// Hidden header should have zero height, so remove padding and borders. Then
				// set the width based on the real headers

				// Apply all styles in one pass
				_fnApplyToChildren(zeroOut, headerSrcEls);

				// Read all widths in next pass
				_fnApplyToChildren(function (nSizer) {
						headerContent.push(nSizer.innerHTML);
						headerWidths.push(_fnStringToCss($(nSizer).css('width')));
				}, headerSrcEls);

				// Apply all widths in final pass
				_fnApplyToChildren(function (nToSize, i) {
						// Only apply widths to the DataTables detected header cells - this
						// prevents complex headers from having contradictory sizes applied
						if ($.inArray(nToSize, dtHeaderCells) !== -1) {
								nToSize.style.width = headerWidths[i];
						}
				}, headerTrgEls);

				$(headerSrcEls).height(0);

				/* Same again with the footer if we have one */
				if (footer) {
						_fnApplyToChildren(zeroOut, footerSrcEls);

						_fnApplyToChildren(function (nSizer) {
								footerContent.push(nSizer.innerHTML);
								footerWidths.push(_fnStringToCss($(nSizer).css('width')));
						}, footerSrcEls);

						_fnApplyToChildren(function (nToSize, i) {
								nToSize.style.width = footerWidths[i];
						}, footerTrgEls);

						$(footerSrcEls).height(0);
				}

				/*
     * 3. Apply the measurements
     */

				// "Hide" the header and footer that we used for the sizing. We need to keep
				// the content of the cell so that the width applied to the header and body
				// both match, but we want to hide it completely. We want to also fix their
				// width to what they currently are
				_fnApplyToChildren(function (nSizer, i) {
						nSizer.innerHTML = '<div class="dataTables_sizing" style="height:0;overflow:hidden;">' + headerContent[i] + '</div>';
						nSizer.style.width = headerWidths[i];
				}, headerSrcEls);

				if (footer) {
						_fnApplyToChildren(function (nSizer, i) {
								nSizer.innerHTML = '<div class="dataTables_sizing" style="height:0;overflow:hidden;">' + footerContent[i] + '</div>';
								nSizer.style.width = footerWidths[i];
						}, footerSrcEls);
				}

				// Sanity check that the table is of a sensible width. If not then we are going to get
				// misalignment - try to prevent this by not allowing the table to shrink below its min width
				if (table.outerWidth() < sanityWidth) {
						// The min width depends upon if we have a vertical scrollbar visible or not */
						correction = divBodyEl.scrollHeight > divBodyEl.offsetHeight || divBody.css('overflow-y') == "scroll" ? sanityWidth + barWidth : sanityWidth;

						// IE6/7 are a law unto themselves...
						if (ie67 && (divBodyEl.scrollHeight > divBodyEl.offsetHeight || divBody.css('overflow-y') == "scroll")) {
								tableStyle.width = _fnStringToCss(correction - barWidth);
						}

						// And give the user a warning that we've stopped the table getting too small
						if (scrollX === "" || scrollXInner !== "") {
								_fnLog(settings, 1, 'Possible column misalignment', 6);
						}
				} else {
						correction = '100%';
				}

				// Apply to the container elements
				divBodyStyle.width = _fnStringToCss(correction);
				divHeaderStyle.width = _fnStringToCss(correction);

				if (footer) {
						settings.nScrollFoot.style.width = _fnStringToCss(correction);
				}

				/*
     * 4. Clean up
     */
				if (!scrollY) {
						/* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting
       * the scrollbar height from the visible display, rather than adding it on. We need to
       * set the height in order to sort this. Don't want to do it in any other browsers.
       */
						if (ie67) {
								divBodyStyle.height = _fnStringToCss(tableEl.offsetHeight + barWidth);
						}
				}

				/* Finally set the width's of the header and footer tables */
				var iOuterWidth = table.outerWidth();
				divHeaderTable[0].style.width = _fnStringToCss(iOuterWidth);
				divHeaderInnerStyle.width = _fnStringToCss(iOuterWidth);

				// Figure out if there are scrollbar present - if so then we need a the header and footer to
				// provide a bit more space to allow "overflow" scrolling (i.e. past the scrollbar)
				var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == "scroll";
				var padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right');
				divHeaderInnerStyle[padding] = bScrolling ? barWidth + "px" : "0px";

				if (footer) {
						divFooterTable[0].style.width = _fnStringToCss(iOuterWidth);
						divFooterInner[0].style.width = _fnStringToCss(iOuterWidth);
						divFooterInner[0].style[padding] = bScrolling ? barWidth + "px" : "0px";
				}

				// Correct DOM ordering for colgroup - comes before the thead
				table.children('colgroup').insertBefore(table.children('thead'));

				/* Adjust the position of the header in case we loose the y-scrollbar */
				divBody.scroll();

				// If sorting or filtering has occurred, jump the scrolling back to the top
				// only if we aren't holding the position
				if ((settings.bSorted || settings.bFiltered) && !settings._drawHold) {
						divBodyEl.scrollTop = 0;
				}
		}

		/**
   * Apply a given function to the display child nodes of an element array (typically
   * TD children of TR rows
   *  @param {function} fn Method to apply to the objects
   *  @param array {nodes} an1 List of elements to look through for display children
   *  @param array {nodes} an2 Another list (identical structure to the first) - optional
   *  @memberof DataTable#oApi
   */
		function _fnApplyToChildren(fn, an1, an2) {
				var index = 0,
				    i = 0,
				    iLen = an1.length;
				var nNode1, nNode2;

				while (i < iLen) {
						nNode1 = an1[i].firstChild;
						nNode2 = an2 ? an2[i].firstChild : null;

						while (nNode1) {
								if (nNode1.nodeType === 1) {
										if (an2) {
												fn(nNode1, nNode2, index);
										} else {
												fn(nNode1, index);
										}

										index++;
								}

								nNode1 = nNode1.nextSibling;
								nNode2 = an2 ? nNode2.nextSibling : null;
						}

						i++;
				}
		}

		var __re_html_remove = /<.*?>/g;

		/**
   * Calculate the width of columns for the table
   *  @param {object} oSettings dataTables settings object
   *  @memberof DataTable#oApi
   */
		function _fnCalculateColumnWidths(oSettings) {
				var table = oSettings.nTable,
				    columns = oSettings.aoColumns,
				    scroll = oSettings.oScroll,
				    scrollY = scroll.sY,
				    scrollX = scroll.sX,
				    scrollXInner = scroll.sXInner,
				    columnCount = columns.length,
				    visibleColumns = _fnGetColumns(oSettings, 'bVisible'),
				    headerCells = $('th', oSettings.nTHead),
				    tableWidthAttr = table.getAttribute('width'),
				    // from DOM element
				tableContainer = table.parentNode,
				    userInputs = false,
				    i,
				    column,
				    columnIdx,
				    width,
				    outerWidth,
				    browser = oSettings.oBrowser,
				    ie67 = browser.bScrollOversize;

				var styleWidth = table.style.width;
				if (styleWidth && styleWidth.indexOf('%') !== -1) {
						tableWidthAttr = styleWidth;
				}

				/* Convert any user input sizes into pixel sizes */
				for (i = 0; i < visibleColumns.length; i++) {
						column = columns[visibleColumns[i]];

						if (column.sWidth !== null) {
								column.sWidth = _fnConvertToWidth(column.sWidthOrig, tableContainer);

								userInputs = true;
						}
				}

				/* If the number of columns in the DOM equals the number that we have to
     * process in DataTables, then we can use the offsets that are created by
     * the web- browser. No custom sizes can be set in order for this to happen,
     * nor scrolling used
     */
				if (ie67 || !userInputs && !scrollX && !scrollY && columnCount == _fnVisbleColumns(oSettings) && columnCount == headerCells.length) {
						for (i = 0; i < columnCount; i++) {
								var colIdx = _fnVisibleToColumnIndex(oSettings, i);

								if (colIdx !== null) {
										columns[colIdx].sWidth = _fnStringToCss(headerCells.eq(i).width());
								}
						}
				} else {
						// Otherwise construct a single row, worst case, table with the widest
						// node in the data, assign any user defined widths, then insert it into
						// the DOM and allow the browser to do all the hard work of calculating
						// table widths
						var tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table
						.css('visibility', 'hidden').removeAttr('id');

						// Clean up the table body
						tmpTable.find('tbody tr').remove();
						var tr = $('<tr/>').appendTo(tmpTable.find('tbody'));

						// Clone the table header and footer - we can't use the header / footer
						// from the cloned table, since if scrolling is active, the table's
						// real header and footer are contained in different table tags
						tmpTable.find('thead, tfoot').remove();
						tmpTable.append($(oSettings.nTHead).clone()).append($(oSettings.nTFoot).clone());

						// Remove any assigned widths from the footer (from scrolling)
						tmpTable.find('tfoot th, tfoot td').css('width', '');

						// Apply custom sizing to the cloned header
						headerCells = _fnGetUniqueThs(oSettings, tmpTable.find('thead')[0]);

						for (i = 0; i < visibleColumns.length; i++) {
								column = columns[visibleColumns[i]];

								headerCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ? _fnStringToCss(column.sWidthOrig) : '';

								// For scrollX we need to force the column width otherwise the
								// browser will collapse it. If this width is smaller than the
								// width the column requires, then it will have no effect
								if (column.sWidthOrig && scrollX) {
										$(headerCells[i]).append($('<div/>').css({
												width: column.sWidthOrig,
												margin: 0,
												padding: 0,
												border: 0,
												height: 1
										}));
								}
						}

						// Find the widest cell for each column and put it into the table
						if (oSettings.aoData.length) {
								for (i = 0; i < visibleColumns.length; i++) {
										columnIdx = visibleColumns[i];
										column = columns[columnIdx];

										$(_fnGetWidestNode(oSettings, columnIdx)).clone(false).append(column.sContentPadding).appendTo(tr);
								}
						}

						// Tidy the temporary table - remove name attributes so there aren't
						// duplicated in the dom (radio elements for example)
						$('[name]', tmpTable).removeAttr('name');

						// Table has been built, attach to the document so we can work with it.
						// A holding element is used, positioned at the top of the container
						// with minimal height, so it has no effect on if the container scrolls
						// or not. Otherwise it might trigger scrolling when it actually isn't
						// needed
						var holder = $('<div/>').css(scrollX || scrollY ? {
								position: 'absolute',
								top: 0,
								left: 0,
								height: 1,
								right: 0,
								overflow: 'hidden'
						} : {}).append(tmpTable).appendTo(tableContainer);

						// When scrolling (X or Y) we want to set the width of the table as
						// appropriate. However, when not scrolling leave the table width as it
						// is. This results in slightly different, but I think correct behaviour
						if (scrollX && scrollXInner) {
								tmpTable.width(scrollXInner);
						} else if (scrollX) {
								tmpTable.css('width', 'auto');
								tmpTable.removeAttr('width');

								// If there is no width attribute or style, then allow the table to
								// collapse
								if (tmpTable.width() < tableContainer.clientWidth && tableWidthAttr) {
										tmpTable.width(tableContainer.clientWidth);
								}
						} else if (scrollY) {
								tmpTable.width(tableContainer.clientWidth);
						} else if (tableWidthAttr) {
								tmpTable.width(tableWidthAttr);
						}

						// Get the width of each column in the constructed table - we need to
						// know the inner width (so it can be assigned to the other table's
						// cells) and the outer width so we can calculate the full width of the
						// table. This is safe since DataTables requires a unique cell for each
						// column, but if ever a header can span multiple columns, this will
						// need to be modified.
						var total = 0;
						for (i = 0; i < visibleColumns.length; i++) {
								var cell = $(headerCells[i]);
								var border = cell.outerWidth() - cell.width();

								// Use getBounding... where possible (not IE8-) because it can give
								// sub-pixel accuracy, which we then want to round up!
								var bounding = browser.bBounding ? Math.ceil(headerCells[i].getBoundingClientRect().width) : cell.outerWidth();

								// Total is tracked to remove any sub-pixel errors as the outerWidth
								// of the table might not equal the total given here (IE!).
								total += bounding;

								// Width for each column to use
								columns[visibleColumns[i]].sWidth = _fnStringToCss(bounding - border);
						}

						table.style.width = _fnStringToCss(total);

						// Finished with the table - ditch it
						holder.remove();
				}

				// If there is a width attr, we want to attach an event listener which
				// allows the table sizing to automatically adjust when the window is
				// resized. Use the width attr rather than CSS, since we can't know if the
				// CSS is a relative value or absolute - DOM read is always px.
				if (tableWidthAttr) {
						table.style.width = _fnStringToCss(tableWidthAttr);
				}

				if ((tableWidthAttr || scrollX) && !oSettings._reszEvt) {
						var bindResize = function bindResize() {
								$(window).bind('resize.DT-' + oSettings.sInstance, _fnThrottle(function () {
										_fnAdjustColumnSizing(oSettings);
								}));
						};

						// IE6/7 will crash if we bind a resize event handler on page load.
						// To be removed in 1.11 which drops IE6/7 support
						if (ie67) {
								setTimeout(bindResize, 1000);
						} else {
								bindResize();
						}

						oSettings._reszEvt = true;
				}
		}

		/**
   * Throttle the calls to a function. Arguments and context are maintained for
   * the throttled function
   *  @param {function} fn Function to be called
   *  @param {int} [freq=200] call frequency in mS
   *  @returns {function} wrapped function
   *  @memberof DataTable#oApi
   */
		function _fnThrottle(fn, freq) {
				var frequency = freq !== undefined ? freq : 200,
				    last,
				    timer;

				return function () {
						var that = this,
						    now = +new Date(),
						    args = arguments;

						if (last && now < last + frequency) {
								clearTimeout(timer);

								timer = setTimeout(function () {
										last = undefined;
										fn.apply(that, args);
								}, frequency);
						} else {
								last = now;
								fn.apply(that, args);
						}
				};
		}

		/**
   * Convert a CSS unit width to pixels (e.g. 2em)
   *  @param {string} width width to be converted
   *  @param {node} parent parent to get the with for (required for relative widths) - optional
   *  @returns {int} width in pixels
   *  @memberof DataTable#oApi
   */
		function _fnConvertToWidth(width, parent) {
				if (!width) {
						return 0;
				}

				var n = $('<div/>').css('width', _fnStringToCss(width)).appendTo(parent || document.body);

				var val = n[0].offsetWidth;
				n.remove();

				return val;
		}

		/**
   * Get the widest node
   *  @param {object} settings dataTables settings object
   *  @param {int} colIdx column of interest
   *  @returns {node} widest table node
   *  @memberof DataTable#oApi
   */
		function _fnGetWidestNode(settings, colIdx) {
				var idx = _fnGetMaxLenString(settings, colIdx);
				if (idx < 0) {
						return null;
				}

				var data = settings.aoData[idx];
				return !data.nTr ? // Might not have been created when deferred rendering
				$('<td/>').html(_fnGetCellData(settings, idx, colIdx, 'display'))[0] : data.anCells[colIdx];
		}

		/**
   * Get the maximum strlen for each data column
   *  @param {object} settings dataTables settings object
   *  @param {int} colIdx column of interest
   *  @returns {string} max string length for each column
   *  @memberof DataTable#oApi
   */
		function _fnGetMaxLenString(settings, colIdx) {
				var s,
				    max = -1,
				    maxIdx = -1;

				for (var i = 0, ien = settings.aoData.length; i < ien; i++) {
						s = _fnGetCellData(settings, i, colIdx, 'display') + '';
						s = s.replace(__re_html_remove, '');
						s = s.replace(/&nbsp;/g, ' ');

						if (s.length > max) {
								max = s.length;
								maxIdx = i;
						}
				}

				return maxIdx;
		}

		/**
   * Append a CSS unit (only if required) to a string
   *  @param {string} value to css-ify
   *  @returns {string} value with css unit
   *  @memberof DataTable#oApi
   */
		function _fnStringToCss(s) {
				if (s === null) {
						return '0px';
				}

				if (typeof s == 'number') {
						return s < 0 ? '0px' : s + 'px';
				}

				// Check it has a unit character already
				return s.match(/\d$/) ? s + 'px' : s;
		}

		function _fnSortFlatten(settings) {
				var i,
				    iLen,
				    k,
				    kLen,
				    aSort = [],
				    aiOrig = [],
				    aoColumns = settings.aoColumns,
				    aDataSort,
				    iCol,
				    sType,
				    srcCol,
				    fixed = settings.aaSortingFixed,
				    fixedObj = $.isPlainObject(fixed),
				    nestedSort = [],
				    add = function add(a) {
						if (a.length && !$.isArray(a[0])) {
								// 1D array
								nestedSort.push(a);
						} else {
								// 2D array
								$.merge(nestedSort, a);
						}
				};

				// Build the sort array, with pre-fix and post-fix options if they have been
				// specified
				if ($.isArray(fixed)) {
						add(fixed);
				}

				if (fixedObj && fixed.pre) {
						add(fixed.pre);
				}

				add(settings.aaSorting);

				if (fixedObj && fixed.post) {
						add(fixed.post);
				}

				for (i = 0; i < nestedSort.length; i++) {
						srcCol = nestedSort[i][0];
						aDataSort = aoColumns[srcCol].aDataSort;

						for (k = 0, kLen = aDataSort.length; k < kLen; k++) {
								iCol = aDataSort[k];
								sType = aoColumns[iCol].sType || 'string';

								if (nestedSort[i]._idx === undefined) {
										nestedSort[i]._idx = $.inArray(nestedSort[i][1], aoColumns[iCol].asSorting);
								}

								aSort.push({
										src: srcCol,
										col: iCol,
										dir: nestedSort[i][1],
										index: nestedSort[i]._idx,
										type: sType,
										formatter: _DataTable.ext.type.order[sType + "-pre"]
								});
						}
				}

				return aSort;
		}

		/**
   * Change the order of the table
   *  @param {object} oSettings dataTables settings object
   *  @memberof DataTable#oApi
   *  @todo This really needs split up!
   */
		function _fnSort(oSettings) {
				var i,
				    ien,
				    iLen,
				    j,
				    jLen,
				    k,
				    kLen,
				    sDataType,
				    nTh,
				    aiOrig = [],
				    oExtSort = _DataTable.ext.type.order,
				    aoData = oSettings.aoData,
				    aoColumns = oSettings.aoColumns,
				    aDataSort,
				    data,
				    iCol,
				    sType,
				    oSort,
				    formatters = 0,
				    sortCol,
				    displayMaster = oSettings.aiDisplayMaster,
				    aSort;

				// Resolve any column types that are unknown due to addition or invalidation
				// @todo Can this be moved into a 'data-ready' handler which is called when
				//   data is going to be used in the table?
				_fnColumnTypes(oSettings);

				aSort = _fnSortFlatten(oSettings);

				for (i = 0, ien = aSort.length; i < ien; i++) {
						sortCol = aSort[i];

						// Track if we can use the fast sort algorithm
						if (sortCol.formatter) {
								formatters++;
						}

						// Load the data needed for the sort, for each cell
						_fnSortData(oSettings, sortCol.col);
				}

				/* No sorting required if server-side or no sorting array */
				if (_fnDataSource(oSettings) != 'ssp' && aSort.length !== 0) {
						// Create a value - key array of the current row positions such that we can use their
						// current position during the sort, if values match, in order to perform stable sorting
						for (i = 0, iLen = displayMaster.length; i < iLen; i++) {
								aiOrig[displayMaster[i]] = i;
						}

						/* Do the sort - here we want multi-column sorting based on a given data source (column)
       * and sorting function (from oSort) in a certain direction. It's reasonably complex to
       * follow on it's own, but this is what we want (example two column sorting):
       *  fnLocalSorting = function(a,b){
       *    var iTest;
       *    iTest = oSort['string-asc']('data11', 'data12');
       *      if (iTest !== 0)
       *        return iTest;
       *    iTest = oSort['numeric-desc']('data21', 'data22');
       *    if (iTest !== 0)
       *      return iTest;
       *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );
       *  }
       * Basically we have a test for each sorting column, if the data in that column is equal,
       * test the next column. If all columns match, then we use a numeric sort on the row
       * positions in the original data array to provide a stable sort.
       *
       * Note - I know it seems excessive to have two sorting methods, but the first is around
       * 15% faster, so the second is only maintained for backwards compatibility with sorting
       * methods which do not have a pre-sort formatting function.
       */
						if (formatters === aSort.length) {
								// All sort types have formatting functions
								displayMaster.sort(function (a, b) {
										var x,
										    y,
										    k,
										    test,
										    sort,
										    len = aSort.length,
										    dataA = aoData[a]._aSortData,
										    dataB = aoData[b]._aSortData;

										for (k = 0; k < len; k++) {
												sort = aSort[k];

												x = dataA[sort.col];
												y = dataB[sort.col];

												test = x < y ? -1 : x > y ? 1 : 0;
												if (test !== 0) {
														return sort.dir === 'asc' ? test : -test;
												}
										}

										x = aiOrig[a];
										y = aiOrig[b];
										return x < y ? -1 : x > y ? 1 : 0;
								});
						} else {
								// Depreciated - remove in 1.11 (providing a plug-in option)
								// Not all sort types have formatting methods, so we have to call their sorting
								// methods.
								displayMaster.sort(function (a, b) {
										var x,
										    y,
										    k,
										    l,
										    test,
										    sort,
										    fn,
										    len = aSort.length,
										    dataA = aoData[a]._aSortData,
										    dataB = aoData[b]._aSortData;

										for (k = 0; k < len; k++) {
												sort = aSort[k];

												x = dataA[sort.col];
												y = dataB[sort.col];

												fn = oExtSort[sort.type + "-" + sort.dir] || oExtSort["string-" + sort.dir];
												test = fn(x, y);
												if (test !== 0) {
														return test;
												}
										}

										x = aiOrig[a];
										y = aiOrig[b];
										return x < y ? -1 : x > y ? 1 : 0;
								});
						}
				}

				/* Tell the draw function that we have sorted the data */
				oSettings.bSorted = true;
		}

		function _fnSortAria(settings) {
				var label;
				var nextSort;
				var columns = settings.aoColumns;
				var aSort = _fnSortFlatten(settings);
				var oAria = settings.oLanguage.oAria;

				// ARIA attributes - need to loop all columns, to update all (removing old
				// attributes as needed)
				for (var i = 0, iLen = columns.length; i < iLen; i++) {
						var col = columns[i];
						var asSorting = col.asSorting;
						var sTitle = col.sTitle.replace(/<.*?>/g, "");
						var th = col.nTh;

						// IE7 is throwing an error when setting these properties with jQuery's
						// attr() and removeAttr() methods...
						th.removeAttribute('aria-sort');

						/* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */
						if (col.bSortable) {
								if (aSort.length > 0 && aSort[0].col == i) {
										th.setAttribute('aria-sort', aSort[0].dir == "asc" ? "ascending" : "descending");
										nextSort = asSorting[aSort[0].index + 1] || asSorting[0];
								} else {
										nextSort = asSorting[0];
								}

								label = sTitle + (nextSort === "asc" ? oAria.sSortAscending : oAria.sSortDescending);
						} else {
								label = sTitle;
						}

						th.setAttribute('aria-label', label);
				}
		}

		/**
   * Function to run on user sort request
   *  @param {object} settings dataTables settings object
   *  @param {node} attachTo node to attach the handler to
   *  @param {int} colIdx column sorting index
   *  @param {boolean} [append=false] Append the requested sort to the existing
   *    sort if true (i.e. multi-column sort)
   *  @param {function} [callback] callback function
   *  @memberof DataTable#oApi
   */
		function _fnSortListener(settings, colIdx, append, callback) {
				var col = settings.aoColumns[colIdx];
				var sorting = settings.aaSorting;
				var asSorting = col.asSorting;
				var nextSortIdx;
				var next = function next(a, overflow) {
						var idx = a._idx;
						if (idx === undefined) {
								idx = $.inArray(a[1], asSorting);
						}

						return idx + 1 < asSorting.length ? idx + 1 : overflow ? null : 0;
				};

				// Convert to 2D array if needed
				if (typeof sorting[0] === 'number') {
						sorting = settings.aaSorting = [sorting];
				}

				// If appending the sort then we are multi-column sorting
				if (append && settings.oFeatures.bSortMulti) {
						// Are we already doing some kind of sort on this column?
						var sortIdx = $.inArray(colIdx, _pluck(sorting, '0'));

						if (sortIdx !== -1) {
								// Yes, modify the sort
								nextSortIdx = next(sorting[sortIdx], true);

								if (nextSortIdx === null && sorting.length === 1) {
										nextSortIdx = 0; // can't remove sorting completely
								}

								if (nextSortIdx === null) {
										sorting.splice(sortIdx, 1);
								} else {
										sorting[sortIdx][1] = asSorting[nextSortIdx];
										sorting[sortIdx]._idx = nextSortIdx;
								}
						} else {
								// No sort on this column yet
								sorting.push([colIdx, asSorting[0], 0]);
								sorting[sorting.length - 1]._idx = 0;
						}
				} else if (sorting.length && sorting[0][0] == colIdx) {
						// Single column - already sorting on this column, modify the sort
						nextSortIdx = next(sorting[0]);

						sorting.length = 1;
						sorting[0][1] = asSorting[nextSortIdx];
						sorting[0]._idx = nextSortIdx;
				} else {
						// Single column - sort only on this column
						sorting.length = 0;
						sorting.push([colIdx, asSorting[0]]);
						sorting[0]._idx = 0;
				}

				// Run the sort by calling a full redraw
				_fnReDraw(settings);

				// callback used for async user interaction
				if (typeof callback == 'function') {
						callback(settings);
				}
		}

		/**
   * Attach a sort handler (click) to a node
   *  @param {object} settings dataTables settings object
   *  @param {node} attachTo node to attach the handler to
   *  @param {int} colIdx column sorting index
   *  @param {function} [callback] callback function
   *  @memberof DataTable#oApi
   */
		function _fnSortAttachListener(settings, attachTo, colIdx, callback) {
				var col = settings.aoColumns[colIdx];

				_fnBindAction(attachTo, {}, function (e) {
						/* If the column is not sortable - don't to anything */
						if (col.bSortable === false) {
								return;
						}

						// If processing is enabled use a timeout to allow the processing
						// display to be shown - otherwise to it synchronously
						if (settings.oFeatures.bProcessing) {
								_fnProcessingDisplay(settings, true);

								setTimeout(function () {
										_fnSortListener(settings, colIdx, e.shiftKey, callback);

										// In server-side processing, the draw callback will remove the
										// processing display
										if (_fnDataSource(settings) !== 'ssp') {
												_fnProcessingDisplay(settings, false);
										}
								}, 0);
						} else {
								_fnSortListener(settings, colIdx, e.shiftKey, callback);
						}
				});
		}

		/**
   * Set the sorting classes on table's body, Note: it is safe to call this function
   * when bSort and bSortClasses are false
   *  @param {object} oSettings dataTables settings object
   *  @memberof DataTable#oApi
   */
		function _fnSortingClasses(settings) {
				var oldSort = settings.aLastSort;
				var sortClass = settings.oClasses.sSortColumn;
				var sort = _fnSortFlatten(settings);
				var features = settings.oFeatures;
				var i, ien, colIdx;

				if (features.bSort && features.bSortClasses) {
						// Remove old sorting classes
						for (i = 0, ien = oldSort.length; i < ien; i++) {
								colIdx = oldSort[i].src;

								// Remove column sorting
								$(_pluck(settings.aoData, 'anCells', colIdx)).removeClass(sortClass + (i < 2 ? i + 1 : 3));
						}

						// Add new column sorting
						for (i = 0, ien = sort.length; i < ien; i++) {
								colIdx = sort[i].src;

								$(_pluck(settings.aoData, 'anCells', colIdx)).addClass(sortClass + (i < 2 ? i + 1 : 3));
						}
				}

				settings.aLastSort = sort;
		}

		// Get the data to sort a column, be it from cache, fresh (populating the
		// cache), or from a sort formatter
		function _fnSortData(settings, idx) {
				// Custom sorting function - provided by the sort data type
				var column = settings.aoColumns[idx];
				var customSort = _DataTable.ext.order[column.sSortDataType];
				var customData;

				if (customSort) {
						customData = customSort.call(settings.oInstance, settings, idx, _fnColumnIndexToVisible(settings, idx));
				}

				// Use / populate cache
				var row, cellData;
				var formatter = _DataTable.ext.type.order[column.sType + "-pre"];

				for (var i = 0, ien = settings.aoData.length; i < ien; i++) {
						row = settings.aoData[i];

						if (!row._aSortData) {
								row._aSortData = [];
						}

						if (!row._aSortData[idx] || customSort) {
								cellData = customSort ? customData[i] : // If there was a custom sort function, use data from there
								_fnGetCellData(settings, i, idx, 'sort');

								row._aSortData[idx] = formatter ? formatter(cellData) : cellData;
						}
				}
		}

		/**
   * Save the state of a table
   *  @param {object} oSettings dataTables settings object
   *  @memberof DataTable#oApi
   */
		function _fnSaveState(settings) {
				if (!settings.oFeatures.bStateSave || settings.bDestroying) {
						return;
				}

				/* Store the interesting variables */
				var state = {
						time: +new Date(),
						start: settings._iDisplayStart,
						length: settings._iDisplayLength,
						order: $.extend(true, [], settings.aaSorting),
						search: _fnSearchToCamel(settings.oPreviousSearch),
						columns: $.map(settings.aoColumns, function (col, i) {
								return {
										visible: col.bVisible,
										search: _fnSearchToCamel(settings.aoPreSearchCols[i])
								};
						})
				};

				_fnCallbackFire(settings, "aoStateSaveParams", 'stateSaveParams', [settings, state]);

				settings.oSavedState = state;
				settings.fnStateSaveCallback.call(settings.oInstance, settings, state);
		}

		/**
   * Attempt to load a saved table state
   *  @param {object} oSettings dataTables settings object
   *  @param {object} oInit DataTables init object so we can override settings
   *  @memberof DataTable#oApi
   */
		function _fnLoadState(settings, oInit) {
				var i, ien;
				var columns = settings.aoColumns;

				if (!settings.oFeatures.bStateSave) {
						return;
				}

				var state = settings.fnStateLoadCallback.call(settings.oInstance, settings);
				if (!state || !state.time) {
						return;
				}

				/* Allow custom and plug-in manipulation functions to alter the saved data set and
     * cancelling of loading by returning false
     */
				var abStateLoad = _fnCallbackFire(settings, 'aoStateLoadParams', 'stateLoadParams', [settings, state]);
				if ($.inArray(false, abStateLoad) !== -1) {
						return;
				}

				/* Reject old data */
				var duration = settings.iStateDuration;
				if (duration > 0 && state.time < +new Date() - duration * 1000) {
						return;
				}

				// Number of columns have changed - all bets are off, no restore of settings
				if (columns.length !== state.columns.length) {
						return;
				}

				// Store the saved state so it might be accessed at any time
				settings.oLoadedState = $.extend(true, {}, state);

				// Restore key features - todo - for 1.11 this needs to be done by
				// subscribed events
				if (state.start !== undefined) {
						settings._iDisplayStart = state.start;
						settings.iInitDisplayStart = state.start;
				}
				if (state.length !== undefined) {
						settings._iDisplayLength = state.length;
				}

				// Order
				if (state.order !== undefined) {
						settings.aaSorting = [];
						$.each(state.order, function (i, col) {
								settings.aaSorting.push(col[0] >= columns.length ? [0, col[1]] : col);
						});
				}

				// Search
				if (state.search !== undefined) {
						$.extend(settings.oPreviousSearch, _fnSearchToHung(state.search));
				}

				// Columns
				for (i = 0, ien = state.columns.length; i < ien; i++) {
						var col = state.columns[i];

						// Visibility
						if (col.visible !== undefined) {
								columns[i].bVisible = col.visible;
						}

						// Search
						if (col.search !== undefined) {
								$.extend(settings.aoPreSearchCols[i], _fnSearchToHung(col.search));
						}
				}

				_fnCallbackFire(settings, 'aoStateLoaded', 'stateLoaded', [settings, state]);
		}

		/**
   * Return the settings object for a particular table
   *  @param {node} table table we are using as a dataTable
   *  @returns {object} Settings object - or null if not found
   *  @memberof DataTable#oApi
   */
		function _fnSettingsFromNode(table) {
				var settings = _DataTable.settings;
				var idx = $.inArray(table, _pluck(settings, 'nTable'));

				return idx !== -1 ? settings[idx] : null;
		}

		/**
   * Log an error message
   *  @param {object} settings dataTables settings object
   *  @param {int} level log error messages, or display them to the user
   *  @param {string} msg error message
   *  @param {int} tn Technical note id to get more information about the error.
   *  @memberof DataTable#oApi
   */
		function _fnLog(settings, level, msg, tn) {
				msg = 'DataTables warning: ' + (settings ? 'table id=' + settings.sTableId + ' - ' : '') + msg;

				if (tn) {
						msg += '. For more information about this error, please see ' + 'http://datatables.net/tn/' + tn;
				}

				if (!level) {
						// Backwards compatibility pre 1.10
						var ext = _DataTable.ext;
						var type = ext.sErrMode || ext.errMode;

						if (settings) {
								_fnCallbackFire(settings, null, 'error', [settings, tn, msg]);
						}

						if (type == 'alert') {
								alert(msg);
						} else if (type == 'throw') {
								throw new Error(msg);
						} else if (typeof type == 'function') {
								type(settings, tn, msg);
						}
				} else if (window.console && console.log) {
						console.log(msg);
				}
		}

		/**
   * See if a property is defined on one object, if so assign it to the other object
   *  @param {object} ret target object
   *  @param {object} src source object
   *  @param {string} name property
   *  @param {string} [mappedName] name to map too - optional, name used if not given
   *  @memberof DataTable#oApi
   */
		function _fnMap(ret, src, name, mappedName) {
				if ($.isArray(name)) {
						$.each(name, function (i, val) {
								if ($.isArray(val)) {
										_fnMap(ret, src, val[0], val[1]);
								} else {
										_fnMap(ret, src, val);
								}
						});

						return;
				}

				if (mappedName === undefined) {
						mappedName = name;
				}

				if (src[name] !== undefined) {
						ret[mappedName] = src[name];
				}
		}

		/**
   * Extend objects - very similar to jQuery.extend, but deep copy objects, and
   * shallow copy arrays. The reason we need to do this, is that we don't want to
   * deep copy array init values (such as aaSorting) since the dev wouldn't be
   * able to override them, but we do want to deep copy arrays.
   *  @param {object} out Object to extend
   *  @param {object} extender Object from which the properties will be applied to
   *      out
   *  @param {boolean} breakRefs If true, then arrays will be sliced to take an
   *      independent copy with the exception of the `data` or `aaData` parameters
   *      if they are present. This is so you can pass in a collection to
   *      DataTables and have that used as your data source without breaking the
   *      references
   *  @returns {object} out Reference, just for convenience - out === the return.
   *  @memberof DataTable#oApi
   *  @todo This doesn't take account of arrays inside the deep copied objects.
   */
		function _fnExtend(out, extender, breakRefs) {
				var val;

				for (var prop in extender) {
						if (extender.hasOwnProperty(prop)) {
								val = extender[prop];

								if ($.isPlainObject(val)) {
										if (!$.isPlainObject(out[prop])) {
												out[prop] = {};
										}
										$.extend(true, out[prop], val);
								} else if (breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val)) {
										out[prop] = val.slice();
								} else {
										out[prop] = val;
								}
						}
				}

				return out;
		}

		/**
   * Bind an event handers to allow a click or return key to activate the callback.
   * This is good for accessibility since a return on the keyboard will have the
   * same effect as a click, if the element has focus.
   *  @param {element} n Element to bind the action to
   *  @param {object} oData Data object to pass to the triggered function
   *  @param {function} fn Callback function for when the event is triggered
   *  @memberof DataTable#oApi
   */
		function _fnBindAction(n, oData, fn) {
				$(n).bind('click.DT', oData, function (e) {
						n.blur(); // Remove focus outline for mouse users
						fn(e);
				}).bind('keypress.DT', oData, function (e) {
						if (e.which === 13) {
								e.preventDefault();
								fn(e);
						}
				}).bind('selectstart.DT', function () {
						/* Take the brutal approach to cancelling text selection */
						return false;
				});
		}

		/**
   * Register a callback function. Easily allows a callback function to be added to
   * an array store of callback functions that can then all be called together.
   *  @param {object} oSettings dataTables settings object
   *  @param {string} sStore Name of the array storage for the callbacks in oSettings
   *  @param {function} fn Function to be called back
   *  @param {string} sName Identifying name for the callback (i.e. a label)
   *  @memberof DataTable#oApi
   */
		function _fnCallbackReg(oSettings, sStore, fn, sName) {
				if (fn) {
						oSettings[sStore].push({
								"fn": fn,
								"sName": sName
						});
				}
		}

		/**
   * Fire callback functions and trigger events. Note that the loop over the
   * callback array store is done backwards! Further note that you do not want to
   * fire off triggers in time sensitive applications (for example cell creation)
   * as its slow.
   *  @param {object} settings dataTables settings object
   *  @param {string} callbackArr Name of the array storage for the callbacks in
   *      oSettings
   *  @param {string} eventName Name of the jQuery custom event to trigger. If
   *      null no trigger is fired
   *  @param {array} args Array of arguments to pass to the callback function /
   *      trigger
   *  @memberof DataTable#oApi
   */
		function _fnCallbackFire(settings, callbackArr, eventName, args) {
				var ret = [];

				if (callbackArr) {
						ret = $.map(settings[callbackArr].slice().reverse(), function (val, i) {
								return val.fn.apply(settings.oInstance, args);
						});
				}

				if (eventName !== null) {
						var e = $.Event(eventName + '.dt');

						$(settings.nTable).trigger(e, args);

						ret.push(e.result);
				}

				return ret;
		}

		function _fnLengthOverflow(settings) {
				var start = settings._iDisplayStart,
				    end = settings.fnDisplayEnd(),
				    len = settings._iDisplayLength;

				/* If we have space to show extra rows (backing up from the end point - then do so */
				if (start >= end) {
						start = end - len;
				}

				// Keep the start record on the current page
				start -= start % len;

				if (len === -1 || start < 0) {
						start = 0;
				}

				settings._iDisplayStart = start;
		}

		function _fnRenderer(settings, type) {
				var renderer = settings.renderer;
				var host = _DataTable.ext.renderer[type];

				if ($.isPlainObject(renderer) && renderer[type]) {
						// Specific renderer for this type. If available use it, otherwise use
						// the default.
						return host[renderer[type]] || host._;
				} else if (typeof renderer === 'string') {
						// Common renderer - if there is one available for this type use it,
						// otherwise use the default
						return host[renderer] || host._;
				}

				// Use the default
				return host._;
		}

		/**
   * Detect the data source being used for the table. Used to simplify the code
   * a little (ajax) and to make it compress a little smaller.
   *
   *  @param {object} settings dataTables settings object
   *  @returns {string} Data source
   *  @memberof DataTable#oApi
   */
		function _fnDataSource(settings) {
				if (settings.oFeatures.bServerSide) {
						return 'ssp';
				} else if (settings.ajax || settings.sAjaxSource) {
						return 'ajax';
				}
				return 'dom';
		}

		_DataTable = function DataTable(options) {
				/**
     * Perform a jQuery selector action on the table's TR elements (from the tbody) and
     * return the resulting jQuery object.
     *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
     *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
     *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter
     *    criterion ("applied") or all TR elements (i.e. no filter).
     *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.
     *    Can be either 'current', whereby the current sorting of the table is used, or
     *    'original' whereby the original order the data was read into the table is used.
     *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
     *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
     *    'current' and filter is 'applied', regardless of what they might be given as.
     *  @returns {object} jQuery object, filtered by the given selector.
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Highlight every second row
     *      oTable.$('tr:odd').css('backgroundColor', 'blue');
     *    } );
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Filter to rows with 'Webkit' in them, add a background colour and then
     *      // remove the filter, thus highlighting the 'Webkit' rows only.
     *      oTable.fnFilter('Webkit');
     *      oTable.$('tr', {"search": "applied"}).css('backgroundColor', 'blue');
     *      oTable.fnFilter('');
     *    } );
     */
				this.$ = function (sSelector, oOpts) {
						return this.api(true).$(sSelector, oOpts);
				};

				/**
     * Almost identical to $ in operation, but in this case returns the data for the matched
     * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes
     * rather than any descendants, so the data can be obtained for the row/cell. If matching
     * rows are found, the data returned is the original data array/object that was used to
     * create the row (or a generated array if from a DOM source).
     *
     * This method is often useful in-combination with $ where both functions are given the
     * same parameters and the array indexes will match identically.
     *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
     *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
     *  @param {string} [oOpts.filter=none] Select elements that meet the current filter
     *    criterion ("applied") or all elements (i.e. no filter).
     *  @param {string} [oOpts.order=current] Order of the data in the processed array.
     *    Can be either 'current', whereby the current sorting of the table is used, or
     *    'original' whereby the original order the data was read into the table is used.
     *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
     *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
     *    'current' and filter is 'applied', regardless of what they might be given as.
     *  @returns {array} Data for the matched elements. If any elements, as a result of the
     *    selector, were not TR, TD or TH elements in the DataTable, they will have a null
     *    entry in the array.
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Get the data from the first row in the table
     *      var data = oTable._('tr:first');
     *
     *      // Do something useful with the data
     *      alert( "First cell is: "+data[0] );
     *    } );
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Filter to 'Webkit' and get all data for
     *      oTable.fnFilter('Webkit');
     *      var data = oTable._('tr', {"search": "applied"});
     *
     *      // Do something with the data
     *      alert( data.length+" rows matched the search" );
     *    } );
     */
				this._ = function (sSelector, oOpts) {
						return this.api(true).rows(sSelector, oOpts).data();
				};

				/**
     * Create a DataTables Api instance, with the currently selected tables for
     * the Api's context.
     * @param {boolean} [traditional=false] Set the API instance's context to be
     *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was
     *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),
     *   or if all tables captured in the jQuery object should be used.
     * @return {DataTables.Api}
     */
				this.api = function (traditional) {
						return traditional ? new _Api2(_fnSettingsFromNode(this[_ext.iApiIndex])) : new _Api2(this);
				};

				/**
     * Add a single new row or multiple rows of data to the table. Please note
     * that this is suitable for client-side processing only - if you are using
     * server-side processing (i.e. "bServerSide": true), then to add data, you
     * must add it to the data source, i.e. the server-side, through an Ajax call.
     *  @param {array|object} data The data to be added to the table. This can be:
     *    <ul>
     *      <li>1D array of data - add a single row with the data provided</li>
     *      <li>2D array of arrays - add multiple rows in a single call</li>
     *      <li>object - data object when using <i>mData</i></li>
     *      <li>array of objects - multiple data objects when using <i>mData</i></li>
     *    </ul>
     *  @param {bool} [redraw=true] redraw the table or not
     *  @returns {array} An array of integers, representing the list of indexes in
     *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to
     *    the table.
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    // Global var for counter
     *    var giCount = 2;
     *
     *    $(document).ready(function() {
     *      $('#example').dataTable();
     *    } );
     *
     *    function fnClickAddRow() {
     *      $('#example').dataTable().fnAddData( [
     *        giCount+".1",
     *        giCount+".2",
     *        giCount+".3",
     *        giCount+".4" ]
     *      );
     *
     *      giCount++;
     *    }
     */
				this.fnAddData = function (data, redraw) {
						var api = this.api(true);

						/* Check if we want to add multiple rows or not */
						var rows = $.isArray(data) && ($.isArray(data[0]) || $.isPlainObject(data[0])) ? api.rows.add(data) : api.row.add(data);

						if (redraw === undefined || redraw) {
								api.draw();
						}

						return rows.flatten().toArray();
				};

				/**
     * This function will make DataTables recalculate the column sizes, based on the data
     * contained in the table and the sizes applied to the columns (in the DOM, CSS or
     * through the sWidth parameter). This can be useful when the width of the table's
     * parent element changes (for example a window resize).
     *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable( {
     *        "sScrollY": "200px",
     *        "bPaginate": false
     *      } );
     *
     *      $(window).bind('resize', function () {
     *        oTable.fnAdjustColumnSizing();
     *      } );
     *    } );
     */
				this.fnAdjustColumnSizing = function (bRedraw) {
						var api = this.api(true).columns.adjust();
						var settings = api.settings()[0];
						var scroll = settings.oScroll;

						if (bRedraw === undefined || bRedraw) {
								api.draw(false);
						} else if (scroll.sX !== "" || scroll.sY !== "") {
								/* If not redrawing, but scrolling, we want to apply the new column sizes anyway */
								_fnScrollDraw(settings);
						}
				};

				/**
     * Quickly and simply clear a table
     *  @param {bool} [bRedraw=true] redraw the table or not
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)
     *      oTable.fnClearTable();
     *    } );
     */
				this.fnClearTable = function (bRedraw) {
						var api = this.api(true).clear();

						if (bRedraw === undefined || bRedraw) {
								api.draw();
						}
				};

				/**
     * The exact opposite of 'opening' a row, this function will close any rows which
     * are currently 'open'.
     *  @param {node} nTr the table row to 'close'
     *  @returns {int} 0 on success, or 1 if failed (can't find the row)
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable;
     *
     *      // 'open' an information row when a row is clicked on
     *      $('#example tbody tr').click( function () {
     *        if ( oTable.fnIsOpen(this) ) {
     *          oTable.fnClose( this );
     *        } else {
     *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
     *        }
     *      } );
     *
     *      oTable = $('#example').dataTable();
     *    } );
     */
				this.fnClose = function (nTr) {
						this.api(true).row(nTr).child.hide();
				};

				/**
     * Remove a row for the table
     *  @param {mixed} target The index of the row from aoData to be deleted, or
     *    the TR element you want to delete
     *  @param {function|null} [callBack] Callback function
     *  @param {bool} [redraw=true] Redraw the table or not
     *  @returns {array} The row that was deleted
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Immediately remove the first row
     *      oTable.fnDeleteRow( 0 );
     *    } );
     */
				this.fnDeleteRow = function (target, callback, redraw) {
						var api = this.api(true);
						var rows = api.rows(target);
						var settings = rows.settings()[0];
						var data = settings.aoData[rows[0][0]];

						rows.remove();

						if (callback) {
								callback.call(this, settings, data);
						}

						if (redraw === undefined || redraw) {
								api.draw();
						}

						return data;
				};

				/**
     * Restore the table to it's original state in the DOM by removing all of DataTables
     * enhancements, alterations to the DOM structure of the table and event listeners.
     *  @param {boolean} [remove=false] Completely remove the table from the DOM
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      // This example is fairly pointless in reality, but shows how fnDestroy can be used
     *      var oTable = $('#example').dataTable();
     *      oTable.fnDestroy();
     *    } );
     */
				this.fnDestroy = function (remove) {
						this.api(true).destroy(remove);
				};

				/**
     * Redraw the table
     *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)
     *      oTable.fnDraw();
     *    } );
     */
				this.fnDraw = function (complete) {
						// Note that this isn't an exact match to the old call to _fnDraw - it takes
						// into account the new data, but can hold position.
						this.api(true).draw(complete);
				};

				/**
     * Filter the input based on data
     *  @param {string} sInput String to filter the table on
     *  @param {int|null} [iColumn] Column to limit filtering to
     *  @param {bool} [bRegex=false] Treat as regular expression or not
     *  @param {bool} [bSmart=true] Perform smart filtering or not
     *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)
     *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Sometime later - filter...
     *      oTable.fnFilter( 'test string' );
     *    } );
     */
				this.fnFilter = function (sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive) {
						var api = this.api(true);

						if (iColumn === null || iColumn === undefined) {
								api.search(sInput, bRegex, bSmart, bCaseInsensitive);
						} else {
								api.column(iColumn).search(sInput, bRegex, bSmart, bCaseInsensitive);
						}

						api.draw();
				};

				/**
     * Get the data for the whole table, an individual row or an individual cell based on the
     * provided parameters.
     *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as
     *    a TR node then the data source for the whole row will be returned. If given as a
     *    TD/TH cell node then iCol will be automatically calculated and the data for the
     *    cell returned. If given as an integer, then this is treated as the aoData internal
     *    data index for the row (see fnGetPosition) and the data for that row used.
     *  @param {int} [col] Optional column index that you want the data of.
     *  @returns {array|object|string} If mRow is undefined, then the data for all rows is
     *    returned. If mRow is defined, just data for that row, and is iCol is
     *    defined, only data for the designated cell is returned.
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    // Row data
     *    $(document).ready(function() {
     *      oTable = $('#example').dataTable();
     *
     *      oTable.$('tr').click( function () {
     *        var data = oTable.fnGetData( this );
     *        // ... do something with the array / object of data for the row
     *      } );
     *    } );
     *
     *  @example
     *    // Individual cell data
     *    $(document).ready(function() {
     *      oTable = $('#example').dataTable();
     *
     *      oTable.$('td').click( function () {
     *        var sData = oTable.fnGetData( this );
     *        alert( 'The cell clicked on had the value of '+sData );
     *      } );
     *    } );
     */
				this.fnGetData = function (src, col) {
						var api = this.api(true);

						if (src !== undefined) {
								var type = src.nodeName ? src.nodeName.toLowerCase() : '';

								return col !== undefined || type == 'td' || type == 'th' ? api.cell(src, col).data() : api.row(src).data() || null;
						}

						return api.data().toArray();
				};

				/**
     * Get an array of the TR nodes that are used in the table's body. Note that you will
     * typically want to use the '$' API method in preference to this as it is more
     * flexible.
     *  @param {int} [iRow] Optional row index for the TR element you want
     *  @returns {array|node} If iRow is undefined, returns an array of all TR elements
     *    in the table's body, or iRow is defined, just the TR element requested.
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Get the nodes from the table
     *      var nNodes = oTable.fnGetNodes( );
     *    } );
     */
				this.fnGetNodes = function (iRow) {
						var api = this.api(true);

						return iRow !== undefined ? api.row(iRow).node() : api.rows().nodes().flatten().toArray();
				};

				/**
     * Get the array indexes of a particular cell from it's DOM element
     * and column index including hidden columns
     *  @param {node} node this can either be a TR, TD or TH in the table's body
     *  @returns {int} If nNode is given as a TR, then a single index is returned, or
     *    if given as a cell, an array of [row index, column index (visible),
     *    column index (all)] is given.
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      $('#example tbody td').click( function () {
     *        // Get the position of the current data from the node
     *        var aPos = oTable.fnGetPosition( this );
     *
     *        // Get the data array for this row
     *        var aData = oTable.fnGetData( aPos[0] );
     *
     *        // Update the data array and return the value
     *        aData[ aPos[1] ] = 'clicked';
     *        this.innerHTML = 'clicked';
     *      } );
     *
     *      // Init DataTables
     *      oTable = $('#example').dataTable();
     *    } );
     */
				this.fnGetPosition = function (node) {
						var api = this.api(true);
						var nodeName = node.nodeName.toUpperCase();

						if (nodeName == 'TR') {
								return api.row(node).index();
						} else if (nodeName == 'TD' || nodeName == 'TH') {
								var cell = api.cell(node).index();

								return [cell.row, cell.columnVisible, cell.column];
						}
						return null;
				};

				/**
     * Check to see if a row is 'open' or not.
     *  @param {node} nTr the table row to check
     *  @returns {boolean} true if the row is currently open, false otherwise
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable;
     *
     *      // 'open' an information row when a row is clicked on
     *      $('#example tbody tr').click( function () {
     *        if ( oTable.fnIsOpen(this) ) {
     *          oTable.fnClose( this );
     *        } else {
     *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
     *        }
     *      } );
     *
     *      oTable = $('#example').dataTable();
     *    } );
     */
				this.fnIsOpen = function (nTr) {
						return this.api(true).row(nTr).child.isShown();
				};

				/**
     * This function will place a new row directly after a row which is currently
     * on display on the page, with the HTML contents that is passed into the
     * function. This can be used, for example, to ask for confirmation that a
     * particular record should be deleted.
     *  @param {node} nTr The table row to 'open'
     *  @param {string|node|jQuery} mHtml The HTML to put into the row
     *  @param {string} sClass Class to give the new TD cell
     *  @returns {node} The row opened. Note that if the table row passed in as the
     *    first parameter, is not found in the table, this method will silently
     *    return.
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable;
     *
     *      // 'open' an information row when a row is clicked on
     *      $('#example tbody tr').click( function () {
     *        if ( oTable.fnIsOpen(this) ) {
     *          oTable.fnClose( this );
     *        } else {
     *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
     *        }
     *      } );
     *
     *      oTable = $('#example').dataTable();
     *    } );
     */
				this.fnOpen = function (nTr, mHtml, sClass) {
						return this.api(true).row(nTr).child(mHtml, sClass).show().child()[0];
				};

				/**
     * Change the pagination - provides the internal logic for pagination in a simple API
     * function. With this function you can have a DataTables table go to the next,
     * previous, first or last pages.
     *  @param {string|int} mAction Paging action to take: "first", "previous", "next" or "last"
     *    or page number to jump to (integer), note that page 0 is the first page.
     *  @param {bool} [bRedraw=true] Redraw the table or not
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *      oTable.fnPageChange( 'next' );
     *    } );
     */
				this.fnPageChange = function (mAction, bRedraw) {
						var api = this.api(true).page(mAction);

						if (bRedraw === undefined || bRedraw) {
								api.draw(false);
						}
				};

				/**
     * Show a particular column
     *  @param {int} iCol The column whose display should be changed
     *  @param {bool} bShow Show (true) or hide (false) the column
     *  @param {bool} [bRedraw=true] Redraw the table or not
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Hide the second column after initialisation
     *      oTable.fnSetColumnVis( 1, false );
     *    } );
     */
				this.fnSetColumnVis = function (iCol, bShow, bRedraw) {
						var api = this.api(true).column(iCol).visible(bShow);

						if (bRedraw === undefined || bRedraw) {
								api.columns.adjust().draw();
						}
				};

				/**
     * Get the settings for a particular table for external manipulation
     *  @returns {object} DataTables settings object. See
     *    {@link DataTable.models.oSettings}
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *      var oSettings = oTable.fnSettings();
     *
     *      // Show an example parameter from the settings
     *      alert( oSettings._iDisplayStart );
     *    } );
     */
				this.fnSettings = function () {
						return _fnSettingsFromNode(this[_ext.iApiIndex]);
				};

				/**
     * Sort the table by a particular column
     *  @param {int} iCol the data index to sort on. Note that this will not match the
     *    'display index' if you have hidden data entries
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Sort immediately with columns 0 and 1
     *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );
     *    } );
     */
				this.fnSort = function (aaSort) {
						this.api(true).order(aaSort).draw();
				};

				/**
     * Attach a sort listener to an element for a given column
     *  @param {node} nNode the element to attach the sort listener to
     *  @param {int} iColumn the column that a click on this node will sort on
     *  @param {function} [fnCallback] callback function when sort is run
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Sort on column 1, when 'sorter' is clicked on
     *      oTable.fnSortListener( document.getElementById('sorter'), 1 );
     *    } );
     */
				this.fnSortListener = function (nNode, iColumn, fnCallback) {
						this.api(true).order.listener(nNode, iColumn, fnCallback);
				};

				/**
     * Update a table cell or row - this method will accept either a single value to
     * update the cell with, an array of values with one element for each column or
     * an object in the same format as the original data source. The function is
     * self-referencing in order to make the multi column updates easier.
     *  @param {object|array|string} mData Data to update the cell/row with
     *  @param {node|int} mRow TR element you want to update or the aoData index
     *  @param {int} [iColumn] The column to update, give as null or undefined to
     *    update a whole row.
     *  @param {bool} [bRedraw=true] Redraw the table or not
     *  @param {bool} [bAction=true] Perform pre-draw actions or not
     *  @returns {int} 0 on success, 1 on error
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell
     *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row
     *    } );
     */
				this.fnUpdate = function (mData, mRow, iColumn, bRedraw, bAction) {
						var api = this.api(true);

						if (iColumn === undefined || iColumn === null) {
								api.row(mRow).data(mData);
						} else {
								api.cell(mRow, iColumn).data(mData);
						}

						if (bAction === undefined || bAction) {
								api.columns.adjust();
						}

						if (bRedraw === undefined || bRedraw) {
								api.draw();
						}
						return 0;
				};

				/**
     * Provide a common method for plug-ins to check the version of DataTables being used, in order
     * to ensure compatibility.
     *  @param {string} sVersion Version string to check for, in the format "X.Y.Z". Note that the
     *    formats "X" and "X.Y" are also acceptable.
     *  @returns {boolean} true if this version of DataTables is greater or equal to the required
     *    version, or false if this version of DataTales is not suitable
     *  @method
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *      alert( oTable.fnVersionCheck( '1.9.0' ) );
     *    } );
     */
				this.fnVersionCheck = _ext.fnVersionCheck;

				var _that = this;
				var emptyInit = options === undefined;
				var len = this.length;

				if (emptyInit) {
						options = {};
				}

				this.oApi = this.internal = _ext.internal;

				// Extend with old style plug-in API methods
				for (var fn in _DataTable.ext.internal) {
						if (fn) {
								this[fn] = _fnExternApiFunc(fn);
						}
				}

				this.each(function () {
						// For each initialisation we want to give it a clean initialisation
						// object that can be bashed around
						var o = {};
						var oInit = len > 1 ? // optimisation for single table case
						_fnExtend(o, options, true) : options;

						/*global oInit,_that,emptyInit*/
						var i = 0,
						    iLen,
						    j,
						    jLen,
						    k,
						    kLen;
						var sId = this.getAttribute('id');
						var bInitHandedOff = false;
						var defaults = _DataTable.defaults;
						var $this = $(this);

						/* Sanity check */
						if (this.nodeName.toLowerCase() != 'table') {
								_fnLog(null, 0, 'Non-table node initialisation (' + this.nodeName + ')', 2);
								return;
						}

						/* Backwards compatibility for the defaults */
						_fnCompatOpts(defaults);
						_fnCompatCols(defaults.column);

						/* Convert the camel-case defaults to Hungarian */
						_fnCamelToHungarian(defaults, defaults, true);
						_fnCamelToHungarian(defaults.column, defaults.column, true);

						/* Setting up the initialisation object */
						_fnCamelToHungarian(defaults, $.extend(oInit, $this.data()));

						/* Check to see if we are re-initialising a table */
						var allSettings = _DataTable.settings;
						for (i = 0, iLen = allSettings.length; i < iLen; i++) {
								var s = allSettings[i];

								/* Base check on table node */
								if (s.nTable == this || s.nTHead.parentNode == this || s.nTFoot && s.nTFoot.parentNode == this) {
										var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;
										var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;

										if (emptyInit || bRetrieve) {
												return s.oInstance;
										} else if (bDestroy) {
												s.oInstance.fnDestroy();
												break;
										} else {
												_fnLog(s, 0, 'Cannot reinitialise DataTable', 3);
												return;
										}
								}

								/* If the element we are initialising has the same ID as a table which was previously
         * initialised, but the table nodes don't match (from before) then we destroy the old
         * instance by simply deleting it. This is under the assumption that the table has been
         * destroyed by other methods. Anyone using non-id selectors will need to do this manually
         */
								if (s.sTableId == this.id) {
										allSettings.splice(i, 1);
										break;
								}
						}

						/* Ensure the table has an ID - required for accessibility */
						if (sId === null || sId === "") {
								sId = "DataTables_Table_" + _DataTable.ext._unique++;
								this.id = sId;
						}

						/* Create the settings object for this table and set some of the default parameters */
						var oSettings = $.extend(true, {}, _DataTable.models.oSettings, {
								"sDestroyWidth": $this[0].style.width,
								"sInstance": sId,
								"sTableId": sId
						});
						oSettings.nTable = this;
						oSettings.oApi = _that.internal;
						oSettings.oInit = oInit;

						allSettings.push(oSettings);

						// Need to add the instance after the instance after the settings object has been added
						// to the settings array, so we can self reference the table instance if more than one
						oSettings.oInstance = _that.length === 1 ? _that : $this.dataTable();

						// Backwards compatibility, before we apply all the defaults
						_fnCompatOpts(oInit);

						if (oInit.oLanguage) {
								_fnLanguageCompat(oInit.oLanguage);
						}

						// If the length menu is given, but the init display length is not, use the length menu
						if (oInit.aLengthMenu && !oInit.iDisplayLength) {
								oInit.iDisplayLength = $.isArray(oInit.aLengthMenu[0]) ? oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];
						}

						// Apply the defaults and init options to make a single init object will all
						// options defined from defaults and instance options.
						oInit = _fnExtend($.extend(true, {}, defaults), oInit);

						// Map the initialisation options onto the settings object
						_fnMap(oSettings.oFeatures, oInit, ["bPaginate", "bLengthChange", "bFilter", "bSort", "bSortMulti", "bInfo", "bProcessing", "bAutoWidth", "bSortClasses", "bServerSide", "bDeferRender"]);
						_fnMap(oSettings, oInit, ["asStripeClasses", "ajax", "fnServerData", "fnFormatNumber", "sServerMethod", "aaSorting", "aaSortingFixed", "aLengthMenu", "sPaginationType", "sAjaxSource", "sAjaxDataProp", "iStateDuration", "sDom", "bSortCellsTop", "iTabIndex", "fnStateLoadCallback", "fnStateSaveCallback", "renderer", "searchDelay", "rowId", ["iCookieDuration", "iStateDuration"], // backwards compat
						["oSearch", "oPreviousSearch"], ["aoSearchCols", "aoPreSearchCols"], ["iDisplayLength", "_iDisplayLength"], ["bJQueryUI", "bJUI"]]);
						_fnMap(oSettings.oScroll, oInit, [["sScrollX", "sX"], ["sScrollXInner", "sXInner"], ["sScrollY", "sY"], ["bScrollCollapse", "bCollapse"]]);
						_fnMap(oSettings.oLanguage, oInit, "fnInfoCallback");

						/* Callback functions which are array driven */
						_fnCallbackReg(oSettings, 'aoDrawCallback', oInit.fnDrawCallback, 'user');
						_fnCallbackReg(oSettings, 'aoServerParams', oInit.fnServerParams, 'user');
						_fnCallbackReg(oSettings, 'aoStateSaveParams', oInit.fnStateSaveParams, 'user');
						_fnCallbackReg(oSettings, 'aoStateLoadParams', oInit.fnStateLoadParams, 'user');
						_fnCallbackReg(oSettings, 'aoStateLoaded', oInit.fnStateLoaded, 'user');
						_fnCallbackReg(oSettings, 'aoRowCallback', oInit.fnRowCallback, 'user');
						_fnCallbackReg(oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow, 'user');
						_fnCallbackReg(oSettings, 'aoHeaderCallback', oInit.fnHeaderCallback, 'user');
						_fnCallbackReg(oSettings, 'aoFooterCallback', oInit.fnFooterCallback, 'user');
						_fnCallbackReg(oSettings, 'aoInitComplete', oInit.fnInitComplete, 'user');
						_fnCallbackReg(oSettings, 'aoPreDrawCallback', oInit.fnPreDrawCallback, 'user');

						oSettings.rowIdFn = _fnGetObjectDataFn(oInit.rowId);

						/* Browser support detection */
						_fnBrowserDetect(oSettings);

						var oClasses = oSettings.oClasses;

						// @todo Remove in 1.11
						if (oInit.bJQueryUI) {
								/* Use the JUI classes object for display. You could clone the oStdClasses object if
         * you want to have multiple tables with multiple independent classes
         */
								$.extend(oClasses, _DataTable.ext.oJUIClasses, oInit.oClasses);

								if (oInit.sDom === defaults.sDom && defaults.sDom === "lfrtip") {
										/* Set the DOM to use a layout suitable for jQuery UI's theming */
										oSettings.sDom = '<"H"lfr>t<"F"ip>';
								}

								if (!oSettings.renderer) {
										oSettings.renderer = 'jqueryui';
								} else if ($.isPlainObject(oSettings.renderer) && !oSettings.renderer.header) {
										oSettings.renderer.header = 'jqueryui';
								}
						} else {
								$.extend(oClasses, _DataTable.ext.classes, oInit.oClasses);
						}
						$this.addClass(oClasses.sTable);

						if (oSettings.iInitDisplayStart === undefined) {
								/* Display start point, taking into account the save saving */
								oSettings.iInitDisplayStart = oInit.iDisplayStart;
								oSettings._iDisplayStart = oInit.iDisplayStart;
						}

						if (oInit.iDeferLoading !== null) {
								oSettings.bDeferLoading = true;
								var tmp = $.isArray(oInit.iDeferLoading);
								oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;
								oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;
						}

						/* Language definitions */
						var oLanguage = oSettings.oLanguage;
						$.extend(true, oLanguage, oInit.oLanguage);

						if (oLanguage.sUrl !== "") {
								/* Get the language definitions from a file - because this Ajax call makes the language
         * get async to the remainder of this function we use bInitHandedOff to indicate that
         * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor
         */
								$.ajax({
										dataType: 'json',
										url: oLanguage.sUrl,
										success: function success(json) {
												_fnLanguageCompat(json);
												_fnCamelToHungarian(defaults.oLanguage, json);
												$.extend(true, oLanguage, json);
												_fnInitialise(oSettings);
										},
										error: function error() {
												// Error occurred loading language file, continue on as best we can
												_fnInitialise(oSettings);
										}
								});
								bInitHandedOff = true;
						}

						/*
       * Stripes
       */
						if (oInit.asStripeClasses === null) {
								oSettings.asStripeClasses = [oClasses.sStripeOdd, oClasses.sStripeEven];
						}

						/* Remove row stripe classes if they are already on the table row */
						var stripeClasses = oSettings.asStripeClasses;
						var rowOne = $this.children('tbody').find('tr').eq(0);
						if ($.inArray(true, $.map(stripeClasses, function (el, i) {
								return rowOne.hasClass(el);
						})) !== -1) {
								$('tbody tr', this).removeClass(stripeClasses.join(' '));
								oSettings.asDestroyStripes = stripeClasses.slice();
						}

						/*
       * Columns
       * See if we should load columns automatically or use defined ones
       */
						var anThs = [];
						var aoColumnsInit;
						var nThead = this.getElementsByTagName('thead');
						if (nThead.length !== 0) {
								_fnDetectHeader(oSettings.aoHeader, nThead[0]);
								anThs = _fnGetUniqueThs(oSettings);
						}

						/* If not given a column array, generate one with nulls */
						if (oInit.aoColumns === null) {
								aoColumnsInit = [];
								for (i = 0, iLen = anThs.length; i < iLen; i++) {
										aoColumnsInit.push(null);
								}
						} else {
								aoColumnsInit = oInit.aoColumns;
						}

						/* Add the columns */
						for (i = 0, iLen = aoColumnsInit.length; i < iLen; i++) {
								_fnAddColumn(oSettings, anThs ? anThs[i] : null);
						}

						/* Apply the column definitions */
						_fnApplyColumnDefs(oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {
								_fnColumnOptions(oSettings, iCol, oDef);
						});

						/* HTML5 attribute detection - build an mData object automatically if the
       * attributes are found
       */
						if (rowOne.length) {
								var a = function a(cell, name) {
										return cell.getAttribute('data-' + name) !== null ? name : null;
								};

								$(rowOne[0]).children('th, td').each(function (i, cell) {
										var col = oSettings.aoColumns[i];

										if (col.mData === i) {
												var sort = a(cell, 'sort') || a(cell, 'order');
												var filter = a(cell, 'filter') || a(cell, 'search');

												if (sort !== null || filter !== null) {
														col.mData = {
																_: i + '.display',
																sort: sort !== null ? i + '.@data-' + sort : undefined,
																type: sort !== null ? i + '.@data-' + sort : undefined,
																filter: filter !== null ? i + '.@data-' + filter : undefined
														};

														_fnColumnOptions(oSettings, i);
												}
										}
								});
						}

						var features = oSettings.oFeatures;

						/* Must be done after everything which can be overridden by the state saving! */
						if (oInit.bStateSave) {
								features.bStateSave = true;
								_fnLoadState(oSettings, oInit);
								_fnCallbackReg(oSettings, 'aoDrawCallback', _fnSaveState, 'state_save');
						}

						/*
       * Sorting
       * @todo For modularisation (1.11) this needs to do into a sort start up handler
       */

						// If aaSorting is not defined, then we use the first indicator in asSorting
						// in case that has been altered, so the default sort reflects that option
						if (oInit.aaSorting === undefined) {
								var sorting = oSettings.aaSorting;
								for (i = 0, iLen = sorting.length; i < iLen; i++) {
										sorting[i][1] = oSettings.aoColumns[i].asSorting[0];
								}
						}

						/* Do a first pass on the sorting classes (allows any size changes to be taken into
       * account, and also will apply sorting disabled classes if disabled
       */
						_fnSortingClasses(oSettings);

						if (features.bSort) {
								_fnCallbackReg(oSettings, 'aoDrawCallback', function () {
										if (oSettings.bSorted) {
												var aSort = _fnSortFlatten(oSettings);
												var sortedColumns = {};

												$.each(aSort, function (i, val) {
														sortedColumns[val.src] = val.dir;
												});

												_fnCallbackFire(oSettings, null, 'order', [oSettings, aSort, sortedColumns]);
												_fnSortAria(oSettings);
										}
								});
						}

						_fnCallbackReg(oSettings, 'aoDrawCallback', function () {
								if (oSettings.bSorted || _fnDataSource(oSettings) === 'ssp' || features.bDeferRender) {
										_fnSortingClasses(oSettings);
								}
						}, 'sc');

						/*
       * Final init
       * Cache the header, body and footer as required, creating them if needed
       */

						// Work around for Webkit bug 83867 - store the caption-side before removing from doc
						var captions = $this.children('caption').each(function () {
								this._captionSide = $this.css('caption-side');
						});

						var thead = $this.children('thead');
						if (thead.length === 0) {
								thead = $('<thead/>').appendTo(this);
						}
						oSettings.nTHead = thead[0];

						var tbody = $this.children('tbody');
						if (tbody.length === 0) {
								tbody = $('<tbody/>').appendTo(this);
						}
						oSettings.nTBody = tbody[0];

						var tfoot = $this.children('tfoot');
						if (tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "")) {
								// If we are a scrolling table, and no footer has been given, then we need to create
								// a tfoot element for the caption element to be appended to
								tfoot = $('<tfoot/>').appendTo(this);
						}

						if (tfoot.length === 0 || tfoot.children().length === 0) {
								$this.addClass(oClasses.sNoFooter);
						} else if (tfoot.length > 0) {
								oSettings.nTFoot = tfoot[0];
								_fnDetectHeader(oSettings.aoFooter, oSettings.nTFoot);
						}

						/* Check if there is data passing into the constructor */
						if (oInit.aaData) {
								for (i = 0; i < oInit.aaData.length; i++) {
										_fnAddData(oSettings, oInit.aaData[i]);
								}
						} else if (oSettings.bDeferLoading || _fnDataSource(oSettings) == 'dom') {
								/* Grab the data from the page - only do this when deferred loading or no Ajax
         * source since there is no point in reading the DOM data if we are then going
         * to replace it with Ajax data
         */
								_fnAddTr(oSettings, $(oSettings.nTBody).children('tr'));
						}

						/* Copy the data index array */
						oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();

						/* Initialisation complete - table can be drawn */
						oSettings.bInitialised = true;

						/* Check if we need to initialise the table (it might not have been handed off to the
       * language processor)
       */
						if (bInitHandedOff === false) {
								_fnInitialise(oSettings);
						}
				});
				_that = null;
				return this;
		};

		/**
   * Computed structure of the DataTables API, defined by the options passed to
   * `DataTable.Api.register()` when building the API.
   *
   * The structure is built in order to speed creation and extension of the Api
   * objects since the extensions are effectively pre-parsed.
   *
   * The array is an array of objects with the following structure, where this
   * base array represents the Api prototype base:
   *
   *     [
   *       {
   *         name:      'data'                -- string   - Property name
   *         val:       function () {},       -- function - Api method (or undefined if just an object
   *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
   *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
   *       },
   *       {
   *         name:     'row'
   *         val:       {},
   *         methodExt: [ ... ],
   *         propExt:   [
   *           {
   *             name:      'data'
   *             val:       function () {},
   *             methodExt: [ ... ],
   *             propExt:   [ ... ]
   *           },
   *           ...
   *         ]
   *       }
   *     ]
   *
   * @type {Array}
   * @ignore
   */
		var __apiStruct = [];

		/**
   * `Array.prototype` reference.
   *
   * @type object
   * @ignore
   */
		var __arrayProto = Array.prototype;

		/**
   * Abstraction for `context` parameter of the `Api` constructor to allow it to
   * take several different forms for ease of use.
   *
   * Each of the input parameter types will be converted to a DataTables settings
   * object where possible.
   *
   * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one
   *   of:
   *
   *   * `string` - jQuery selector. Any DataTables' matching the given selector
   *     with be found and used.
   *   * `node` - `TABLE` node which has already been formed into a DataTable.
   *   * `jQuery` - A jQuery object of `TABLE` nodes.
   *   * `object` - DataTables settings object
   *   * `DataTables.Api` - API instance
   * @return {array|null} Matching DataTables settings objects. `null` or
   *   `undefined` is returned if no matching DataTable is found.
   * @ignore
   */
		var _toSettings = function _toSettings(mixed) {
				var idx, jq;
				var settings = _DataTable.settings;
				var tables = $.map(settings, function (el, i) {
						return el.nTable;
				});

				if (!mixed) {
						return [];
				} else if (mixed.nTable && mixed.oApi) {
						// DataTables settings object
						return [mixed];
				} else if (mixed.nodeName && mixed.nodeName.toLowerCase() === 'table') {
						// Table node
						idx = $.inArray(mixed, tables);
						return idx !== -1 ? [settings[idx]] : null;
				} else if (mixed && typeof mixed.settings === 'function') {
						return mixed.settings().toArray();
				} else if (typeof mixed === 'string') {
						// jQuery selector
						jq = $(mixed);
				} else if (mixed instanceof $) {
						// jQuery object (also DataTables instance)
						jq = mixed;
				}

				if (jq) {
						return jq.map(function (i) {
								idx = $.inArray(this, tables);
								return idx !== -1 ? settings[idx] : null;
						}).toArray();
				}
		};

		/**
   * DataTables API class - used to control and interface with  one or more
   * DataTables enhanced tables.
   *
   * The API class is heavily based on jQuery, presenting a chainable interface
   * that you can use to interact with tables. Each instance of the API class has
   * a "context" - i.e. the tables that it will operate on. This could be a single
   * table, all tables on a page or a sub-set thereof.
   *
   * Additionally the API is designed to allow you to easily work with the data in
   * the tables, retrieving and manipulating it as required. This is done by
   * presenting the API class as an array like interface. The contents of the
   * array depend upon the actions requested by each method (for example
   * `rows().nodes()` will return an array of nodes, while `rows().data()` will
   * return an array of objects or arrays depending upon your table's
   * configuration). The API object has a number of array like methods (`push`,
   * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,
   * `unique` etc) to assist your working with the data held in a table.
   *
   * Most methods (those which return an Api instance) are chainable, which means
   * the return from a method call also has all of the methods available that the
   * top level object had. For example, these two calls are equivalent:
   *
   *     // Not chained
   *     api.row.add( {...} );
   *     api.draw();
   *
   *     // Chained
   *     api.row.add( {...} ).draw();
   *
   * @class DataTable.Api
   * @param {array|object|string|jQuery} context DataTable identifier. This is
   *   used to define which DataTables enhanced tables this API will operate on.
   *   Can be one of:
   *
   *   * `string` - jQuery selector. Any DataTables' matching the given selector
   *     with be found and used.
   *   * `node` - `TABLE` node which has already been formed into a DataTable.
   *   * `jQuery` - A jQuery object of `TABLE` nodes.
   *   * `object` - DataTables settings object
   * @param {array} [data] Data to initialise the Api instance with.
   *
   * @example
   *   // Direct initialisation during DataTables construction
   *   var api = $('#example').DataTable();
   *
   * @example
   *   // Initialisation using a DataTables jQuery object
   *   var api = $('#example').dataTable().api();
   *
   * @example
   *   // Initialisation as a constructor
   *   var api = new $.fn.DataTable.Api( 'table.dataTable' );
   */
		_Api2 = function _Api(context, data) {
				if (!(this instanceof _Api2)) {
						return new _Api2(context, data);
				}

				var settings = [];
				var ctxSettings = function ctxSettings(o) {
						var a = _toSettings(o);
						if (a) {
								settings = settings.concat(a);
						}
				};

				if ($.isArray(context)) {
						for (var i = 0, ien = context.length; i < ien; i++) {
								ctxSettings(context[i]);
						}
				} else {
						ctxSettings(context);
				}

				// Remove duplicates
				this.context = _unique(settings);

				// Initial data
				if (data) {
						$.merge(this, data);
				}

				// selector
				this.selector = {
						rows: null,
						cols: null,
						opts: null
				};

				_Api2.extend(this, this, __apiStruct);
		};

		_DataTable.Api = _Api2;

		// Don't destroy the existing prototype, just extend it. Required for jQuery 2's
		// isPlainObject.
		$.extend(_Api2.prototype, {
				any: function any() {
						return this.count() !== 0;
				},

				concat: __arrayProto.concat,

				context: [], // array of table settings objects

				count: function count() {
						return this.flatten().length;
				},

				each: function each(fn) {
						for (var i = 0, ien = this.length; i < ien; i++) {
								fn.call(this, this[i], i, this);
						}

						return this;
				},

				eq: function eq(idx) {
						var ctx = this.context;

						return ctx.length > idx ? new _Api2(ctx[idx], this[idx]) : null;
				},

				filter: function filter(fn) {
						var a = [];

						if (__arrayProto.filter) {
								a = __arrayProto.filter.call(this, fn, this);
						} else {
								// Compatibility for browsers without EMCA-252-5 (JS 1.6)
								for (var i = 0, ien = this.length; i < ien; i++) {
										if (fn.call(this, this[i], i, this)) {
												a.push(this[i]);
										}
								}
						}

						return new _Api2(this.context, a);
				},

				flatten: function flatten() {
						var a = [];
						return new _Api2(this.context, a.concat.apply(a, this.toArray()));
				},

				join: __arrayProto.join,

				indexOf: __arrayProto.indexOf || function (obj, start) {
						for (var i = start || 0, ien = this.length; i < ien; i++) {
								if (this[i] === obj) {
										return i;
								}
						}
						return -1;
				},

				iterator: function iterator(flatten, type, fn, alwaysNew) {
						var a = [],
						    ret,
						    i,
						    ien,
						    j,
						    jen,
						    context = this.context,
						    rows,
						    items,
						    item,
						    selector = this.selector;

						// Argument shifting
						if (typeof flatten === 'string') {
								alwaysNew = fn;
								fn = type;
								type = flatten;
								flatten = false;
						}

						for (i = 0, ien = context.length; i < ien; i++) {
								var apiInst = new _Api2(context[i]);

								if (type === 'table') {
										ret = fn.call(apiInst, context[i], i);

										if (ret !== undefined) {
												a.push(ret);
										}
								} else if (type === 'columns' || type === 'rows') {
										// this has same length as context - one entry for each table
										ret = fn.call(apiInst, context[i], this[i], i);

										if (ret !== undefined) {
												a.push(ret);
										}
								} else if (type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell') {
										// columns and rows share the same structure.
										// 'this' is an array of column indexes for each context
										items = this[i];

										if (type === 'column-rows') {
												rows = _selector_row_indexes(context[i], selector.opts);
										}

										for (j = 0, jen = items.length; j < jen; j++) {
												item = items[j];

												if (type === 'cell') {
														ret = fn.call(apiInst, context[i], item.row, item.column, i, j);
												} else {
														ret = fn.call(apiInst, context[i], item, i, j, rows);
												}

												if (ret !== undefined) {
														a.push(ret);
												}
										}
								}
						}

						if (a.length || alwaysNew) {
								var api = new _Api2(context, flatten ? a.concat.apply([], a) : a);
								var apiSelector = api.selector;
								apiSelector.rows = selector.rows;
								apiSelector.cols = selector.cols;
								apiSelector.opts = selector.opts;
								return api;
						}
						return this;
				},

				lastIndexOf: __arrayProto.lastIndexOf || function (obj, start) {
						// Bit cheeky...
						return this.indexOf.apply(this.toArray.reverse(), arguments);
				},

				length: 0,

				map: function map(fn) {
						var a = [];

						if (__arrayProto.map) {
								a = __arrayProto.map.call(this, fn, this);
						} else {
								// Compatibility for browsers without EMCA-252-5 (JS 1.6)
								for (var i = 0, ien = this.length; i < ien; i++) {
										a.push(fn.call(this, this[i], i));
								}
						}

						return new _Api2(this.context, a);
				},

				pluck: function pluck(prop) {
						return this.map(function (el) {
								return el[prop];
						});
				},

				pop: __arrayProto.pop,

				push: __arrayProto.push,

				// Does not return an API instance
				reduce: __arrayProto.reduce || function (fn, init) {
						return _fnReduce(this, fn, init, 0, this.length, 1);
				},

				reduceRight: __arrayProto.reduceRight || function (fn, init) {
						return _fnReduce(this, fn, init, this.length - 1, -1, -1);
				},

				reverse: __arrayProto.reverse,

				// Object with rows, columns and opts
				selector: null,

				shift: __arrayProto.shift,

				sort: __arrayProto.sort, // ? name - order?

				splice: __arrayProto.splice,

				toArray: function toArray() {
						return __arrayProto.slice.call(this);
				},

				to$: function to$() {
						return $(this);
				},

				toJQuery: function toJQuery() {
						return $(this);
				},

				unique: function unique() {
						return new _Api2(this.context, _unique(this));
				},

				unshift: __arrayProto.unshift
		});

		_Api2.extend = function (scope, obj, ext) {
				// Only extend API instances and static properties of the API
				if (!ext.length || !obj || !(obj instanceof _Api2) && !obj.__dt_wrapper) {
						return;
				}

				var i,
				    ien,
				    j,
				    jen,
				    struct,
				    inner,
				    methodScoping = function methodScoping(scope, fn, struc) {
						return function () {
								var ret = fn.apply(scope, arguments);

								// Method extension
								_Api2.extend(ret, ret, struc.methodExt);
								return ret;
						};
				};

				for (i = 0, ien = ext.length; i < ien; i++) {
						struct = ext[i];

						// Value
						obj[struct.name] = typeof struct.val === 'function' ? methodScoping(scope, struct.val, struct) : $.isPlainObject(struct.val) ? {} : struct.val;

						obj[struct.name].__dt_wrapper = true;

						// Property extension
						_Api2.extend(scope, obj[struct.name], struct.propExt);
				}
		};

		// @todo - Is there need for an augment function?
		// _Api.augment = function ( inst, name )
		// {
		// 	// Find src object in the structure from the name
		// 	var parts = name.split('.');

		// 	_Api.extend( inst, obj );
		// };

		//     [
		//       {
		//         name:      'data'                -- string   - Property name
		//         val:       function () {},       -- function - Api method (or undefined if just an object
		//         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
		//         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
		//       },
		//       {
		//         name:     'row'
		//         val:       {},
		//         methodExt: [ ... ],
		//         propExt:   [
		//           {
		//             name:      'data'
		//             val:       function () {},
		//             methodExt: [ ... ],
		//             propExt:   [ ... ]
		//           },
		//           ...
		//         ]
		//       }
		//     ]

		_Api2.register = _api_register = function _api_register(name, val) {
				if ($.isArray(name)) {
						for (var j = 0, jen = name.length; j < jen; j++) {
								_Api2.register(name[j], val);
						}
						return;
				}

				var i,
				    ien,
				    heir = name.split('.'),
				    struct = __apiStruct,
				    key,
				    method;

				var find = function find(src, name) {
						for (var i = 0, ien = src.length; i < ien; i++) {
								if (src[i].name === name) {
										return src[i];
								}
						}
						return null;
				};

				for (i = 0, ien = heir.length; i < ien; i++) {
						method = heir[i].indexOf('()') !== -1;
						key = method ? heir[i].replace('()', '') : heir[i];

						var src = find(struct, key);
						if (!src) {
								src = {
										name: key,
										val: {},
										methodExt: [],
										propExt: []
								};
								struct.push(src);
						}

						if (i === ien - 1) {
								src.val = val;
						} else {
								struct = method ? src.methodExt : src.propExt;
						}
				}
		};

		_Api2.registerPlural = _api_registerPlural = function _api_registerPlural(pluralName, singularName, val) {
				_Api2.register(pluralName, val);

				_Api2.register(singularName, function () {
						var ret = val.apply(this, arguments);

						if (ret === this) {
								// Returned item is the API instance that was passed in, return it
								return this;
						} else if (ret instanceof _Api2) {
								// New API instance returned, want the value from the first item
								// in the returned array for the singular result.
								return ret.length ? $.isArray(ret[0]) ? new _Api2(ret.context, ret[0]) : // Array results are 'enhanced'
								ret[0] : undefined;
						}

						// Non-API return - just fire it back
						return ret;
				});
		};

		/**
   * Selector for HTML tables. Apply the given selector to the give array of
   * DataTables settings objects.
   *
   * @param {string|integer} [selector] jQuery selector string or integer
   * @param  {array} Array of DataTables settings objects to be filtered
   * @return {array}
   * @ignore
   */
		var __table_selector = function __table_selector(selector, a) {
				// Integer is used to pick out a table by index
				if (typeof selector === 'number') {
						return [a[selector]];
				}

				// Perform a jQuery selector on the table nodes
				var nodes = $.map(a, function (el, i) {
						return el.nTable;
				});

				return $(nodes).filter(selector).map(function (i) {
						// Need to translate back from the table node to the settings
						var idx = $.inArray(this, nodes);
						return a[idx];
				}).toArray();
		};

		/**
   * Context selector for the API's context (i.e. the tables the API instance
   * refers to.
   *
   * @name    DataTable.Api#tables
   * @param {string|integer} [selector] Selector to pick which tables the iterator
   *   should operate on. If not given, all tables in the current context are
   *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to
   *   select multiple tables or as an integer to select a single table.
   * @returns {DataTable.Api} Returns a new API instance if a selector is given.
   */
		_api_register('tables()', function (selector) {
				// A new instance is created if there was a selector specified
				return selector ? new _Api2(__table_selector(selector, this.context)) : this;
		});

		_api_register('table()', function (selector) {
				var tables = this.tables(selector);
				var ctx = tables.context;

				// Truncate to the first matched table
				return ctx.length ? new _Api2(ctx[0]) : tables;
		});

		_api_registerPlural('tables().nodes()', 'table().node()', function () {
				return this.iterator('table', function (ctx) {
						return ctx.nTable;
				}, 1);
		});

		_api_registerPlural('tables().body()', 'table().body()', function () {
				return this.iterator('table', function (ctx) {
						return ctx.nTBody;
				}, 1);
		});

		_api_registerPlural('tables().header()', 'table().header()', function () {
				return this.iterator('table', function (ctx) {
						return ctx.nTHead;
				}, 1);
		});

		_api_registerPlural('tables().footer()', 'table().footer()', function () {
				return this.iterator('table', function (ctx) {
						return ctx.nTFoot;
				}, 1);
		});

		_api_registerPlural('tables().containers()', 'table().container()', function () {
				return this.iterator('table', function (ctx) {
						return ctx.nTableWrapper;
				}, 1);
		});

		/**
   * Redraw the tables in the current context.
   */
		_api_register('draw()', function (paging) {
				return this.iterator('table', function (settings) {
						if (paging === 'page') {
								_fnDraw(settings);
						} else {
								if (typeof paging === 'string') {
										paging = paging === 'full-hold' ? false : true;
								}

								_fnReDraw(settings, paging === false);
						}
				});
		});

		/**
   * Get the current page index.
   *
   * @return {integer} Current page index (zero based)
   */ /**
      * Set the current page.
      *
      * Note that if you attempt to show a page which does not exist, DataTables will
      * not throw an error, but rather reset the paging.
      *
      * @param {integer|string} action The paging action to take. This can be one of:
      *  * `integer` - The page index to jump to
      *  * `string` - An action to take:
      *    * `first` - Jump to first page.
      *    * `next` - Jump to the next page
      *    * `previous` - Jump to previous page
      *    * `last` - Jump to the last page.
      * @returns {DataTables.Api} this
      */
		_api_register('page()', function (action) {
				if (action === undefined) {
						return this.page.info().page; // not an expensive call
				}

				// else, have an action to take on all tables
				return this.iterator('table', function (settings) {
						_fnPageChange(settings, action);
				});
		});

		/**
   * Paging information for the first table in the current context.
   *
   * If you require paging information for another table, use the `table()` method
   * with a suitable selector.
   *
   * @return {object} Object with the following properties set:
   *  * `page` - Current page index (zero based - i.e. the first page is `0`)
   *  * `pages` - Total number of pages
   *  * `start` - Display index for the first record shown on the current page
   *  * `end` - Display index for the last record shown on the current page
   *  * `length` - Display length (number of records). Note that generally `start
   *    + length = end`, but this is not always true, for example if there are
   *    only 2 records to show on the final page, with a length of 10.
   *  * `recordsTotal` - Full data set length
   *  * `recordsDisplay` - Data set length once the current filtering criterion
   *    are applied.
   */
		_api_register('page.info()', function (action) {
				if (this.context.length === 0) {
						return undefined;
				}

				var settings = this.context[0],
				    start = settings._iDisplayStart,
				    len = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1,
				    visRecords = settings.fnRecordsDisplay(),
				    all = len === -1;

				return {
						"page": all ? 0 : Math.floor(start / len),
						"pages": all ? 1 : Math.ceil(visRecords / len),
						"start": start,
						"end": settings.fnDisplayEnd(),
						"length": len,
						"recordsTotal": settings.fnRecordsTotal(),
						"recordsDisplay": visRecords,
						"serverSide": _fnDataSource(settings) === 'ssp'
				};
		});

		/**
   * Get the current page length.
   *
   * @return {integer} Current page length. Note `-1` indicates that all records
   *   are to be shown.
   */ /**
      * Set the current page length.
      *
      * @param {integer} Page length to set. Use `-1` to show all records.
      * @returns {DataTables.Api} this
      */
		_api_register('page.len()', function (len) {
				// Note that we can't call this function 'length()' because `length`
				// is a Javascript property of functions which defines how many arguments
				// the function expects.
				if (len === undefined) {
						return this.context.length !== 0 ? this.context[0]._iDisplayLength : undefined;
				}

				// else, set the page length
				return this.iterator('table', function (settings) {
						_fnLengthChange(settings, len);
				});
		});

		var __reload = function __reload(settings, holdPosition, callback) {
				// Use the draw event to trigger a callback
				if (callback) {
						var api = new _Api2(settings);

						api.one('draw', function () {
								callback(api.ajax.json());
						});
				}

				if (_fnDataSource(settings) == 'ssp') {
						_fnReDraw(settings, holdPosition);
				} else {
						_fnProcessingDisplay(settings, true);

						// Cancel an existing request
						var xhr = settings.jqXHR;
						if (xhr && xhr.readyState !== 4) {
								xhr.abort();
						}

						// Trigger xhr
						_fnBuildAjax(settings, [], function (json) {
								_fnClearTable(settings);

								var data = _fnAjaxDataSrc(settings, json);
								for (var i = 0, ien = data.length; i < ien; i++) {
										_fnAddData(settings, data[i]);
								}

								_fnReDraw(settings, holdPosition);
								_fnProcessingDisplay(settings, false);
						});
				}
		};

		/**
   * Get the JSON response from the last Ajax request that DataTables made to the
   * server. Note that this returns the JSON from the first table in the current
   * context.
   *
   * @return {object} JSON received from the server.
   */
		_api_register('ajax.json()', function () {
				var ctx = this.context;

				if (ctx.length > 0) {
						return ctx[0].json;
				}

				// else return undefined;
		});

		/**
   * Get the data submitted in the last Ajax request
   */
		_api_register('ajax.params()', function () {
				var ctx = this.context;

				if (ctx.length > 0) {
						return ctx[0].oAjaxData;
				}

				// else return undefined;
		});

		/**
   * Reload tables from the Ajax data source. Note that this function will
   * automatically re-draw the table when the remote data has been loaded.
   *
   * @param {boolean} [reset=true] Reset (default) or hold the current paging
   *   position. A full re-sort and re-filter is performed when this method is
   *   called, which is why the pagination reset is the default action.
   * @returns {DataTables.Api} this
   */
		_api_register('ajax.reload()', function (callback, resetPaging) {
				return this.iterator('table', function (settings) {
						__reload(settings, resetPaging === false, callback);
				});
		});

		/**
   * Get the current Ajax URL. Note that this returns the URL from the first
   * table in the current context.
   *
   * @return {string} Current Ajax source URL
   */ /**
      * Set the Ajax URL. Note that this will set the URL for all tables in the
      * current context.
      *
      * @param {string} url URL to set.
      * @returns {DataTables.Api} this
      */
		_api_register('ajax.url()', function (url) {
				var ctx = this.context;

				if (url === undefined) {
						// get
						if (ctx.length === 0) {
								return undefined;
						}
						ctx = ctx[0];

						return ctx.ajax ? $.isPlainObject(ctx.ajax) ? ctx.ajax.url : ctx.ajax : ctx.sAjaxSource;
				}

				// set
				return this.iterator('table', function (settings) {
						if ($.isPlainObject(settings.ajax)) {
								settings.ajax.url = url;
						} else {
								settings.ajax = url;
						}
						// No need to consider sAjaxSource here since DataTables gives priority
						// to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any
						// value of `sAjaxSource` redundant.
				});
		});

		/**
   * Load data from the newly set Ajax URL. Note that this method is only
   * available when `ajax.url()` is used to set a URL. Additionally, this method
   * has the same effect as calling `ajax.reload()` but is provided for
   * convenience when setting a new URL. Like `ajax.reload()` it will
   * automatically redraw the table once the remote data has been loaded.
   *
   * @returns {DataTables.Api} this
   */
		_api_register('ajax.url().load()', function (callback, resetPaging) {
				// Same as a reload, but makes sense to present it for easy access after a
				// url change
				return this.iterator('table', function (ctx) {
						__reload(ctx, resetPaging === false, callback);
				});
		});

		var _selector_run = function _selector_run(type, selector, selectFn, settings, opts) {
				var out = [],
				    res,
				    a,
				    i,
				    ien,
				    j,
				    jen,
				    selectorType = typeof selector === 'undefined' ? 'undefined' : _typeof(selector);

				// Can't just check for isArray here, as an API or jQuery instance might be
				// given with their array like look
				if (!selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined) {
						selector = [selector];
				}

				for (i = 0, ien = selector.length; i < ien; i++) {
						a = selector[i] && selector[i].split ? selector[i].split(',') : [selector[i]];

						for (j = 0, jen = a.length; j < jen; j++) {
								res = selectFn(typeof a[j] === 'string' ? $.trim(a[j]) : a[j]);

								if (res && res.length) {
										out = out.concat(res);
								}
						}
				}

				// selector extensions
				var ext = _ext.selector[type];
				if (ext.length) {
						for (i = 0, ien = ext.length; i < ien; i++) {
								out = ext[i](settings, opts, out);
						}
				}

				return _unique(out);
		};

		var _selector_opts = function _selector_opts(opts) {
				if (!opts) {
						opts = {};
				}

				// Backwards compatibility for 1.9- which used the terminology filter rather
				// than search
				if (opts.filter && opts.search === undefined) {
						opts.search = opts.filter;
				}

				return $.extend({
						search: 'none',
						order: 'current',
						page: 'all'
				}, opts);
		};

		var _selector_first = function _selector_first(inst) {
				// Reduce the API instance to the first item found
				for (var i = 0, ien = inst.length; i < ien; i++) {
						if (inst[i].length > 0) {
								// Assign the first element to the first item in the instance
								// and truncate the instance and context
								inst[0] = inst[i];
								inst[0].length = 1;
								inst.length = 1;
								inst.context = [inst.context[i]];

								return inst;
						}
				}

				// Not found - return an empty instance
				inst.length = 0;
				return inst;
		};

		var _selector_row_indexes = function _selector_row_indexes(settings, opts) {
				var i,
				    ien,
				    tmp,
				    a = [],
				    displayFiltered = settings.aiDisplay,
				    displayMaster = settings.aiDisplayMaster;

				var search = opts.search,
				    // none, applied, removed
				order = opts.order,
				    // applied, current, index (original - compatibility with 1.9)
				page = opts.page; // all, current

				if (_fnDataSource(settings) == 'ssp') {
						// In server-side processing mode, most options are irrelevant since
						// rows not shown don't exist and the index order is the applied order
						// Removed is a special case - for consistency just return an empty
						// array
						return search === 'removed' ? [] : _range(0, displayMaster.length);
				} else if (page == 'current') {
						// Current page implies that order=current and fitler=applied, since it is
						// fairly senseless otherwise, regardless of what order and search actually
						// are
						for (i = settings._iDisplayStart, ien = settings.fnDisplayEnd(); i < ien; i++) {
								a.push(displayFiltered[i]);
						}
				} else if (order == 'current' || order == 'applied') {
						a = search == 'none' ? displayMaster.slice() : // no search
						search == 'applied' ? displayFiltered.slice() : // applied search
						$.map(displayMaster, function (el, i) {
								// removed search
								return $.inArray(el, displayFiltered) === -1 ? el : null;
						});
				} else if (order == 'index' || order == 'original') {
						for (i = 0, ien = settings.aoData.length; i < ien; i++) {
								if (search == 'none') {
										a.push(i);
								} else {
										// applied | removed
										tmp = $.inArray(i, displayFiltered);

										if (tmp === -1 && search == 'removed' || tmp >= 0 && search == 'applied') {
												a.push(i);
										}
								}
						}
				}

				return a;
		};

		/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   * Rows
   *
   * {}          - no selector - use all available rows
   * {integer}   - row aoData index
   * {node}      - TR node
   * {string}    - jQuery selector to apply to the TR elements
   * {array}     - jQuery array of nodes, or simply an array of TR nodes
   *
   */

		var __row_selector = function __row_selector(settings, selector, opts) {
				var run = function run(sel) {
						var selInt = _intVal(sel);
						var i, ien;

						// Short cut - selector is a number and no options provided (default is
						// all records, so no need to check if the index is in there, since it
						// must be - dev error if the index doesn't exist).
						if (selInt !== null && !opts) {
								return [selInt];
						}

						var rows = _selector_row_indexes(settings, opts);

						if (selInt !== null && $.inArray(selInt, rows) !== -1) {
								// Selector - integer
								return [selInt];
						} else if (!sel) {
								// Selector - none
								return rows;
						}

						// Selector - function
						if (typeof sel === 'function') {
								return $.map(rows, function (idx) {
										var row = settings.aoData[idx];
										return sel(idx, row._aData, row.nTr) ? idx : null;
								});
						}

						// Get nodes in the order from the `rows` array with null values removed
						var nodes = _removeEmpty(_pluck_order(settings.aoData, rows, 'nTr'));

						// Selector - node
						if (sel.nodeName) {
								if (sel._DT_RowIndex !== undefined) {
										return [sel._DT_RowIndex]; // Property added by DT for fast lookup
								} else if (sel._DT_CellIndex) {
												return [sel._DT_CellIndex.row];
										} else {
												var host = $(sel).closest('*[data-dt-row]');
												return host.length ? [host.data('dt-row')] : [];
										}
						}

						// ID selector. Want to always be able to select rows by id, regardless
						// of if the tr element has been created or not, so can't rely upon
						// jQuery here - hence a custom implementation. This does not match
						// Sizzle's fast selector or HTML4 - in HTML5 the ID can be anything,
						// but to select it using a CSS selector engine (like Sizzle or
						// querySelect) it would need to need to be escaped for some characters.
						// DataTables simplifies this for row selectors since you can select
						// only a row. A # indicates an id any anything that follows is the id -
						// unescaped.
						if (typeof sel === 'string' && sel.charAt(0) === '#') {
								// get row index from id
								var rowObj = settings.aIds[sel.replace(/^#/, '')];
								if (rowObj !== undefined) {
										return [rowObj.idx];
								}

								// need to fall through to jQuery in case there is DOM id that
								// matches
						}

						// Selector - jQuery selector string, array of nodes or jQuery object/
						// As jQuery's .filter() allows jQuery objects to be passed in filter,
						// it also allows arrays, so this will cope with all three options
						return $(nodes).filter(sel).map(function () {
								return this._DT_RowIndex;
						}).toArray();
				};

				return _selector_run('row', selector, run, settings, opts);
		};

		_api_register('rows()', function (selector, opts) {
				// argument shifting
				if (selector === undefined) {
						selector = '';
				} else if ($.isPlainObject(selector)) {
						opts = selector;
						selector = '';
				}

				opts = _selector_opts(opts);

				var inst = this.iterator('table', function (settings) {
						return __row_selector(settings, selector, opts);
				}, 1);

				// Want argument shifting here and in __row_selector?
				inst.selector.rows = selector;
				inst.selector.opts = opts;

				return inst;
		});

		_api_register('rows().nodes()', function () {
				return this.iterator('row', function (settings, row) {
						return settings.aoData[row].nTr || undefined;
				}, 1);
		});

		_api_register('rows().data()', function () {
				return this.iterator(true, 'rows', function (settings, rows) {
						return _pluck_order(settings.aoData, rows, '_aData');
				}, 1);
		});

		_api_registerPlural('rows().cache()', 'row().cache()', function (type) {
				return this.iterator('row', function (settings, row) {
						var r = settings.aoData[row];
						return type === 'search' ? r._aFilterData : r._aSortData;
				}, 1);
		});

		_api_registerPlural('rows().invalidate()', 'row().invalidate()', function (src) {
				return this.iterator('row', function (settings, row) {
						_fnInvalidate(settings, row, src);
				});
		});

		_api_registerPlural('rows().indexes()', 'row().index()', function () {
				return this.iterator('row', function (settings, row) {
						return row;
				}, 1);
		});

		_api_registerPlural('rows().ids()', 'row().id()', function (hash) {
				var a = [];
				var context = this.context;

				// `iterator` will drop undefined values, but in this case we want them
				for (var i = 0, ien = context.length; i < ien; i++) {
						for (var j = 0, jen = this[i].length; j < jen; j++) {
								var id = context[i].rowIdFn(context[i].aoData[this[i][j]]._aData);
								a.push((hash === true ? '#' : '') + id);
						}
				}

				return new _Api2(context, a);
		});

		_api_registerPlural('rows().remove()', 'row().remove()', function () {
				var that = this;

				this.iterator('row', function (settings, row, thatIdx) {
						var data = settings.aoData;
						var rowData = data[row];
						var i, ien, j, jen;
						var loopRow, loopCells;

						data.splice(row, 1);

						// Update the cached indexes
						for (i = 0, ien = data.length; i < ien; i++) {
								loopRow = data[i];
								loopCells = loopRow.anCells;

								// Rows
								if (loopRow.nTr !== null) {
										loopRow.nTr._DT_RowIndex = i;
								}

								// Cells
								if (loopCells !== null) {
										for (j = 0, jen = loopCells.length; j < jen; j++) {
												loopCells[j]._DT_CellIndex.row = i;
										}
								}
						}

						// Delete from the display arrays
						_fnDeleteIndex(settings.aiDisplayMaster, row);
						_fnDeleteIndex(settings.aiDisplay, row);
						_fnDeleteIndex(that[thatIdx], row, false); // maintain local indexes

						// Check for an 'overflow' they case for displaying the table
						_fnLengthOverflow(settings);

						// Remove the row's ID reference if there is one
						var id = settings.rowIdFn(rowData._aData);
						if (id !== undefined) {
								delete settings.aIds[id];
						}
				});

				this.iterator('table', function (settings) {
						for (var i = 0, ien = settings.aoData.length; i < ien; i++) {
								settings.aoData[i].idx = i;
						}
				});

				return this;
		});

		_api_register('rows.add()', function (rows) {
				var newRows = this.iterator('table', function (settings) {
						var row, i, ien;
						var out = [];

						for (i = 0, ien = rows.length; i < ien; i++) {
								row = rows[i];

								if (row.nodeName && row.nodeName.toUpperCase() === 'TR') {
										out.push(_fnAddTr(settings, row)[0]);
								} else {
										out.push(_fnAddData(settings, row));
								}
						}

						return out;
				}, 1);

				// Return an Api.rows() extended instance, so rows().nodes() etc can be used
				var modRows = this.rows(-1);
				modRows.pop();
				$.merge(modRows, newRows);

				return modRows;
		});

		/**
   *
   */
		_api_register('row()', function (selector, opts) {
				return _selector_first(this.rows(selector, opts));
		});

		_api_register('row().data()', function (data) {
				var ctx = this.context;

				if (data === undefined) {
						// Get
						return ctx.length && this.length ? ctx[0].aoData[this[0]]._aData : undefined;
				}

				// Set
				ctx[0].aoData[this[0]]._aData = data;

				// Automatically invalidate
				_fnInvalidate(ctx[0], this[0], 'data');

				return this;
		});

		_api_register('row().node()', function () {
				var ctx = this.context;

				return ctx.length && this.length ? ctx[0].aoData[this[0]].nTr || null : null;
		});

		_api_register('row.add()', function (row) {
				// Allow a jQuery object to be passed in - only a single row is added from
				// it though - the first element in the set
				if (row instanceof $ && row.length) {
						row = row[0];
				}

				var rows = this.iterator('table', function (settings) {
						if (row.nodeName && row.nodeName.toUpperCase() === 'TR') {
								return _fnAddTr(settings, row)[0];
						}
						return _fnAddData(settings, row);
				});

				// Return an Api.rows() extended instance, with the newly added row selected
				return this.row(rows[0]);
		});

		var __details_add = function __details_add(ctx, row, data, klass) {
				// Convert to array of TR elements
				var rows = [];
				var addRow = function addRow(r, k) {
						// Recursion to allow for arrays of jQuery objects
						if ($.isArray(r) || r instanceof $) {
								for (var i = 0, ien = r.length; i < ien; i++) {
										addRow(r[i], k);
								}
								return;
						}

						// If we get a TR element, then just add it directly - up to the dev
						// to add the correct number of columns etc
						if (r.nodeName && r.nodeName.toLowerCase() === 'tr') {
								rows.push(r);
						} else {
								// Otherwise create a row with a wrapper
								var created = $('<tr><td/></tr>').addClass(k);
								$('td', created).addClass(k).html(r)[0].colSpan = _fnVisbleColumns(ctx);

								rows.push(created[0]);
						}
				};

				addRow(data, klass);

				if (row._details) {
						row._details.remove();
				}

				row._details = $(rows);

				// If the children were already shown, that state should be retained
				if (row._detailsShow) {
						row._details.insertAfter(row.nTr);
				}
		};

		var __details_remove = function __details_remove(api, idx) {
				var ctx = api.context;

				if (ctx.length) {
						var row = ctx[0].aoData[idx !== undefined ? idx : api[0]];

						if (row && row._details) {
								row._details.remove();

								row._detailsShow = undefined;
								row._details = undefined;
						}
				}
		};

		var __details_display = function __details_display(api, show) {
				var ctx = api.context;

				if (ctx.length && api.length) {
						var row = ctx[0].aoData[api[0]];

						if (row._details) {
								row._detailsShow = show;

								if (show) {
										row._details.insertAfter(row.nTr);
								} else {
										row._details.detach();
								}

								__details_events(ctx[0]);
						}
				}
		};

		var __details_events = function __details_events(settings) {
				var api = new _Api2(settings);
				var namespace = '.dt.DT_details';
				var drawEvent = 'draw' + namespace;
				var colvisEvent = 'column-visibility' + namespace;
				var destroyEvent = 'destroy' + namespace;
				var data = settings.aoData;

				api.off(drawEvent + ' ' + colvisEvent + ' ' + destroyEvent);

				if (_pluck(data, '_details').length > 0) {
						// On each draw, insert the required elements into the document
						api.on(drawEvent, function (e, ctx) {
								if (settings !== ctx) {
										return;
								}

								api.rows({ page: 'current' }).eq(0).each(function (idx) {
										// Internal data grab
										var row = data[idx];

										if (row._detailsShow) {
												row._details.insertAfter(row.nTr);
										}
								});
						});

						// Column visibility change - update the colspan
						api.on(colvisEvent, function (e, ctx, idx, vis) {
								if (settings !== ctx) {
										return;
								}

								// Update the colspan for the details rows (note, only if it already has
								// a colspan)
								var row,
								    visible = _fnVisbleColumns(ctx);

								for (var i = 0, ien = data.length; i < ien; i++) {
										row = data[i];

										if (row._details) {
												row._details.children('td[colspan]').attr('colspan', visible);
										}
								}
						});

						// Table destroyed - nuke any child rows
						api.on(destroyEvent, function (e, ctx) {
								if (settings !== ctx) {
										return;
								}

								for (var i = 0, ien = data.length; i < ien; i++) {
										if (data[i]._details) {
												__details_remove(api, i);
										}
								}
						});
				}
		};

		// Strings for the method names to help minification
		var _emp = '';
		var _child_obj = _emp + 'row().child';
		var _child_mth = _child_obj + '()';

		// data can be:
		//  tr
		//  string
		//  jQuery or array of any of the above
		_api_register(_child_mth, function (data, klass) {
				var ctx = this.context;

				if (data === undefined) {
						// get
						return ctx.length && this.length ? ctx[0].aoData[this[0]]._details : undefined;
				} else if (data === true) {
						// show
						this.child.show();
				} else if (data === false) {
						// remove
						__details_remove(this);
				} else if (ctx.length && this.length) {
						// set
						__details_add(ctx[0], ctx[0].aoData[this[0]], data, klass);
				}

				return this;
		});

		_api_register([_child_obj + '.show()', _child_mth + '.show()' // only when `child()` was called with parameters (without
		], function (show) {
				// it returns an object and this method is not executed)
				__details_display(this, true);
				return this;
		});

		_api_register([_child_obj + '.hide()', _child_mth + '.hide()' // only when `child()` was called with parameters (without
		], function () {
				// it returns an object and this method is not executed)
				__details_display(this, false);
				return this;
		});

		_api_register([_child_obj + '.remove()', _child_mth + '.remove()' // only when `child()` was called with parameters (without
		], function () {
				// it returns an object and this method is not executed)
				__details_remove(this);
				return this;
		});

		_api_register(_child_obj + '.isShown()', function () {
				var ctx = this.context;

				if (ctx.length && this.length) {
						// _detailsShown as false or undefined will fall through to return false
						return ctx[0].aoData[this[0]]._detailsShow || false;
				}
				return false;
		});

		/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   * Columns
   *
   * {integer}           - column index (>=0 count from left, <0 count from right)
   * "{integer}:visIdx"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)
   * "{integer}:visible" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)
   * "{string}:name"     - column name
   * "{string}"          - jQuery selector on column header nodes
   *
   */

		// can be an array of these items, comma separated list, or an array of comma
		// separated lists

		var __re_column_selector = /^(.+):(name|visIdx|visible)$/;

		// r1 and r2 are redundant - but it means that the parameters match for the
		// iterator callback in columns().data()
		var __columnData = function __columnData(settings, column, r1, r2, rows) {
				var a = [];
				for (var row = 0, ien = rows.length; row < ien; row++) {
						a.push(_fnGetCellData(settings, rows[row], column));
				}
				return a;
		};

		var __column_selector = function __column_selector(settings, selector, opts) {
				var columns = settings.aoColumns,
				    names = _pluck(columns, 'sName'),
				    nodes = _pluck(columns, 'nTh');

				var run = function run(s) {
						var selInt = _intVal(s);

						// Selector - all
						if (s === '') {
								return _range(columns.length);
						}

						// Selector - index
						if (selInt !== null) {
								return [selInt >= 0 ? selInt : // Count from left
								columns.length + selInt // Count from right (+ because its a negative value)
								];
						}

						// Selector = function
						if (typeof s === 'function') {
								var rows = _selector_row_indexes(settings, opts);

								return $.map(columns, function (col, idx) {
										return s(idx, __columnData(settings, idx, 0, 0, rows), nodes[idx]) ? idx : null;
								});
						}

						// jQuery or string selector
						var match = typeof s === 'string' ? s.match(__re_column_selector) : '';

						if (match) {
								switch (match[2]) {
										case 'visIdx':
										case 'visible':
												var idx = parseInt(match[1], 10);
												// Visible index given, convert to column index
												if (idx < 0) {
														// Counting from the right
														var visColumns = $.map(columns, function (col, i) {
																return col.bVisible ? i : null;
														});
														return [visColumns[visColumns.length + idx]];
												}
												// Counting from the left
												return [_fnVisibleToColumnIndex(settings, idx)];

										case 'name':
												// match by name. `names` is column index complete and in order
												return $.map(names, function (name, i) {
														return name === match[1] ? i : null;
												});

										default:
												return [];
								}
						}

						// Cell in the table body
						if (s.nodeName && s._DT_CellIndex) {
								return [s._DT_CellIndex.column];
						}

						// jQuery selector on the TH elements for the columns
						var jqResult = $(nodes).filter(s).map(function () {
								return $.inArray(this, nodes); // `nodes` is column index complete and in order
						}).toArray();

						if (jqResult.length || !s.nodeName) {
								return jqResult;
						}

						// Otherwise a node which might have a `dt-column` data attribute, or be
						// a child or such an element
						var host = $(s).closest('*[data-dt-column]');
						return host.length ? [host.data('dt-column')] : [];
				};

				return _selector_run('column', selector, run, settings, opts);
		};

		var __setColumnVis = function __setColumnVis(settings, column, vis, recalc) {
				var cols = settings.aoColumns,
				    col = cols[column],
				    data = settings.aoData,
				    row,
				    cells,
				    i,
				    ien,
				    tr;

				// Get
				if (vis === undefined) {
						return col.bVisible;
				}

				// Set
				// No change
				if (col.bVisible === vis) {
						return;
				}

				if (vis) {
						// Insert column
						// Need to decide if we should use appendChild or insertBefore
						var insertBefore = $.inArray(true, _pluck(cols, 'bVisible'), column + 1);

						for (i = 0, ien = data.length; i < ien; i++) {
								tr = data[i].nTr;
								cells = data[i].anCells;

								if (tr) {
										// insertBefore can act like appendChild if 2nd arg is null
										tr.insertBefore(cells[column], cells[insertBefore] || null);
								}
						}
				} else {
						// Remove column
						$(_pluck(settings.aoData, 'anCells', column)).detach();
				}

				// Common actions
				col.bVisible = vis;
				_fnDrawHead(settings, settings.aoHeader);
				_fnDrawHead(settings, settings.aoFooter);

				if (recalc === undefined || recalc) {
						// Automatically adjust column sizing
						_fnAdjustColumnSizing(settings);
				}

				_fnCallbackFire(settings, null, 'column-visibility', [settings, column, vis, recalc]);

				_fnSaveState(settings);
		};

		_api_register('columns()', function (selector, opts) {
				// argument shifting
				if (selector === undefined) {
						selector = '';
				} else if ($.isPlainObject(selector)) {
						opts = selector;
						selector = '';
				}

				opts = _selector_opts(opts);

				var inst = this.iterator('table', function (settings) {
						return __column_selector(settings, selector, opts);
				}, 1);

				// Want argument shifting here and in _row_selector?
				inst.selector.cols = selector;
				inst.selector.opts = opts;

				return inst;
		});

		_api_registerPlural('columns().header()', 'column().header()', function (selector, opts) {
				return this.iterator('column', function (settings, column) {
						return settings.aoColumns[column].nTh;
				}, 1);
		});

		_api_registerPlural('columns().footer()', 'column().footer()', function (selector, opts) {
				return this.iterator('column', function (settings, column) {
						return settings.aoColumns[column].nTf;
				}, 1);
		});

		_api_registerPlural('columns().data()', 'column().data()', function () {
				return this.iterator('column-rows', __columnData, 1);
		});

		_api_registerPlural('columns().dataSrc()', 'column().dataSrc()', function () {
				return this.iterator('column', function (settings, column) {
						return settings.aoColumns[column].mData;
				}, 1);
		});

		_api_registerPlural('columns().cache()', 'column().cache()', function (type) {
				return this.iterator('column-rows', function (settings, column, i, j, rows) {
						return _pluck_order(settings.aoData, rows, type === 'search' ? '_aFilterData' : '_aSortData', column);
				}, 1);
		});

		_api_registerPlural('columns().nodes()', 'column().nodes()', function () {
				return this.iterator('column-rows', function (settings, column, i, j, rows) {
						return _pluck_order(settings.aoData, rows, 'anCells', column);
				}, 1);
		});

		_api_registerPlural('columns().visible()', 'column().visible()', function (vis, calc) {
				return this.iterator('column', function (settings, column) {
						if (vis === undefined) {
								return settings.aoColumns[column].bVisible;
						} // else
						__setColumnVis(settings, column, vis, calc);
				});
		});

		_api_registerPlural('columns().indexes()', 'column().index()', function (type) {
				return this.iterator('column', function (settings, column) {
						return type === 'visible' ? _fnColumnIndexToVisible(settings, column) : column;
				}, 1);
		});

		_api_register('columns.adjust()', function () {
				return this.iterator('table', function (settings) {
						_fnAdjustColumnSizing(settings);
				}, 1);
		});

		_api_register('column.index()', function (type, idx) {
				if (this.context.length !== 0) {
						var ctx = this.context[0];

						if (type === 'fromVisible' || type === 'toData') {
								return _fnVisibleToColumnIndex(ctx, idx);
						} else if (type === 'fromData' || type === 'toVisible') {
								return _fnColumnIndexToVisible(ctx, idx);
						}
				}
		});

		_api_register('column()', function (selector, opts) {
				return _selector_first(this.columns(selector, opts));
		});

		var __cell_selector = function __cell_selector(settings, selector, opts) {
				var data = settings.aoData;
				var rows = _selector_row_indexes(settings, opts);
				var cells = _removeEmpty(_pluck_order(data, rows, 'anCells'));
				var allCells = $([].concat.apply([], cells));
				var row;
				var columns = settings.aoColumns.length;
				var a, i, ien, j, o, host;

				var run = function run(s) {
						var fnSelector = typeof s === 'function';

						if (s === null || s === undefined || fnSelector) {
								// All cells and function selectors
								a = [];

								for (i = 0, ien = rows.length; i < ien; i++) {
										row = rows[i];

										for (j = 0; j < columns; j++) {
												o = {
														row: row,
														column: j
												};

												if (fnSelector) {
														// Selector - function
														host = data[row];

														if (s(o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null)) {
																a.push(o);
														}
												} else {
														// Selector - all
														a.push(o);
												}
										}
								}

								return a;
						}

						// Selector - index
						if ($.isPlainObject(s)) {
								return [s];
						}

						// Selector - jQuery filtered cells
						var jqResult = allCells.filter(s).map(function (i, el) {
								return { // use a new object, in case someone changes the values
										row: el._DT_CellIndex.row,
										column: el._DT_CellIndex.column
								};
						}).toArray();

						if (jqResult.length || !s.nodeName) {
								return jqResult;
						}

						// Otherwise the selector is a node, and there is one last option - the
						// element might be a child of an element which has dt-row and dt-column
						// data attributes
						host = $(s).closest('*[data-dt-row]');
						return host.length ? [{
								row: host.data('dt-row'),
								column: host.data('dt-column')
						}] : [];
				};

				return _selector_run('cell', selector, run, settings, opts);
		};

		_api_register('cells()', function (rowSelector, columnSelector, opts) {
				// Argument shifting
				if ($.isPlainObject(rowSelector)) {
						// Indexes
						if (rowSelector.row === undefined) {
								// Selector options in first parameter
								opts = rowSelector;
								rowSelector = null;
						} else {
								// Cell index objects in first parameter
								opts = columnSelector;
								columnSelector = null;
						}
				}
				if ($.isPlainObject(columnSelector)) {
						opts = columnSelector;
						columnSelector = null;
				}

				// Cell selector
				if (columnSelector === null || columnSelector === undefined) {
						return this.iterator('table', function (settings) {
								return __cell_selector(settings, rowSelector, _selector_opts(opts));
						});
				}

				// Row + column selector
				var columns = this.columns(columnSelector, opts);
				var rows = this.rows(rowSelector, opts);
				var a, i, ien, j, jen;

				var cells = this.iterator('table', function (settings, idx) {
						a = [];

						for (i = 0, ien = rows[idx].length; i < ien; i++) {
								for (j = 0, jen = columns[idx].length; j < jen; j++) {
										a.push({
												row: rows[idx][i],
												column: columns[idx][j]
										});
								}
						}

						return a;
				}, 1);

				$.extend(cells.selector, {
						cols: columnSelector,
						rows: rowSelector,
						opts: opts
				});

				return cells;
		});

		_api_registerPlural('cells().nodes()', 'cell().node()', function () {
				return this.iterator('cell', function (settings, row, column) {
						var data = settings.aoData[row];

						return data && data.anCells ? data.anCells[column] : undefined;
				}, 1);
		});

		_api_register('cells().data()', function () {
				return this.iterator('cell', function (settings, row, column) {
						return _fnGetCellData(settings, row, column);
				}, 1);
		});

		_api_registerPlural('cells().cache()', 'cell().cache()', function (type) {
				type = type === 'search' ? '_aFilterData' : '_aSortData';

				return this.iterator('cell', function (settings, row, column) {
						return settings.aoData[row][type][column];
				}, 1);
		});

		_api_registerPlural('cells().render()', 'cell().render()', function (type) {
				return this.iterator('cell', function (settings, row, column) {
						return _fnGetCellData(settings, row, column, type);
				}, 1);
		});

		_api_registerPlural('cells().indexes()', 'cell().index()', function () {
				return this.iterator('cell', function (settings, row, column) {
						return {
								row: row,
								column: column,
								columnVisible: _fnColumnIndexToVisible(settings, column)
						};
				}, 1);
		});

		_api_registerPlural('cells().invalidate()', 'cell().invalidate()', function (src) {
				return this.iterator('cell', function (settings, row, column) {
						_fnInvalidate(settings, row, src, column);
				});
		});

		_api_register('cell()', function (rowSelector, columnSelector, opts) {
				return _selector_first(this.cells(rowSelector, columnSelector, opts));
		});

		_api_register('cell().data()', function (data) {
				var ctx = this.context;
				var cell = this[0];

				if (data === undefined) {
						// Get
						return ctx.length && cell.length ? _fnGetCellData(ctx[0], cell[0].row, cell[0].column) : undefined;
				}

				// Set
				_fnSetCellData(ctx[0], cell[0].row, cell[0].column, data);
				_fnInvalidate(ctx[0], cell[0].row, 'data', cell[0].column);

				return this;
		});

		/**
   * Get current ordering (sorting) that has been applied to the table.
   *
   * @returns {array} 2D array containing the sorting information for the first
   *   table in the current context. Each element in the parent array represents
   *   a column being sorted upon (i.e. multi-sorting with two columns would have
   *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is
   *   the column index that the sorting condition applies to, the second is the
   *   direction of the sort (`desc` or `asc`) and, optionally, the third is the
   *   index of the sorting order from the `column.sorting` initialisation array.
   */ /**
      * Set the ordering for the table.
      *
      * @param {integer} order Column index to sort upon.
      * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)
      * @returns {DataTables.Api} this
      */ /**
         * Set the ordering for the table.
         *
         * @param {array} order 1D array of sorting information to be applied.
         * @param {array} [...] Optional additional sorting conditions
         * @returns {DataTables.Api} this
         */ /**
            * Set the ordering for the table.
            *
            * @param {array} order 2D array of sorting information to be applied.
            * @returns {DataTables.Api} this
            */
		_api_register('order()', function (order, dir) {
				var ctx = this.context;

				if (order === undefined) {
						// get
						return ctx.length !== 0 ? ctx[0].aaSorting : undefined;
				}

				// set
				if (typeof order === 'number') {
						// Simple column / direction passed in
						order = [[order, dir]];
				} else if (!$.isArray(order[0])) {
						// Arguments passed in (list of 1D arrays)
						order = Array.prototype.slice.call(arguments);
				}
				// otherwise a 2D array was passed in

				return this.iterator('table', function (settings) {
						settings.aaSorting = order.slice();
				});
		});

		/**
   * Attach a sort listener to an element for a given column
   *
   * @param {node|jQuery|string} node Identifier for the element(s) to attach the
   *   listener to. This can take the form of a single DOM node, a jQuery
   *   collection of nodes or a jQuery selector which will identify the node(s).
   * @param {integer} column the column that a click on this node will sort on
   * @param {function} [callback] callback function when sort is run
   * @returns {DataTables.Api} this
   */
		_api_register('order.listener()', function (node, column, callback) {
				return this.iterator('table', function (settings) {
						_fnSortAttachListener(settings, node, column, callback);
				});
		});

		_api_register('order.fixed()', function (set) {
				if (!set) {
						var ctx = this.context;
						var fixed = ctx.length ? ctx[0].aaSortingFixed : undefined;

						return $.isArray(fixed) ? { pre: fixed } : fixed;
				}

				return this.iterator('table', function (settings) {
						settings.aaSortingFixed = $.extend(true, {}, set);
				});
		});

		// Order by the selected column(s)
		_api_register(['columns().order()', 'column().order()'], function (dir) {
				var that = this;

				return this.iterator('table', function (settings, i) {
						var sort = [];

						$.each(that[i], function (j, col) {
								sort.push([col, dir]);
						});

						settings.aaSorting = sort;
				});
		});

		_api_register('search()', function (input, regex, smart, caseInsen) {
				var ctx = this.context;

				if (input === undefined) {
						// get
						return ctx.length !== 0 ? ctx[0].oPreviousSearch.sSearch : undefined;
				}

				// set
				return this.iterator('table', function (settings) {
						if (!settings.oFeatures.bFilter) {
								return;
						}

						_fnFilterComplete(settings, $.extend({}, settings.oPreviousSearch, {
								"sSearch": input + "",
								"bRegex": regex === null ? false : regex,
								"bSmart": smart === null ? true : smart,
								"bCaseInsensitive": caseInsen === null ? true : caseInsen
						}), 1);
				});
		});

		_api_registerPlural('columns().search()', 'column().search()', function (input, regex, smart, caseInsen) {
				return this.iterator('column', function (settings, column) {
						var preSearch = settings.aoPreSearchCols;

						if (input === undefined) {
								// get
								return preSearch[column].sSearch;
						}

						// set
						if (!settings.oFeatures.bFilter) {
								return;
						}

						$.extend(preSearch[column], {
								"sSearch": input + "",
								"bRegex": regex === null ? false : regex,
								"bSmart": smart === null ? true : smart,
								"bCaseInsensitive": caseInsen === null ? true : caseInsen
						});

						_fnFilterComplete(settings, settings.oPreviousSearch, 1);
				});
		});

		/*
   * State API methods
   */

		_api_register('state()', function () {
				return this.context.length ? this.context[0].oSavedState : null;
		});

		_api_register('state.clear()', function () {
				return this.iterator('table', function (settings) {
						// Save an empty object
						settings.fnStateSaveCallback.call(settings.oInstance, settings, {});
				});
		});

		_api_register('state.loaded()', function () {
				return this.context.length ? this.context[0].oLoadedState : null;
		});

		_api_register('state.save()', function () {
				return this.iterator('table', function (settings) {
						_fnSaveState(settings);
				});
		});

		/**
   * Provide a common method for plug-ins to check the version of DataTables being
   * used, in order to ensure compatibility.
   *
   *  @param {string} version Version string to check for, in the format "X.Y.Z".
   *    Note that the formats "X" and "X.Y" are also acceptable.
   *  @returns {boolean} true if this version of DataTables is greater or equal to
   *    the required version, or false if this version of DataTales is not
   *    suitable
   *  @static
   *  @dtopt API-Static
   *
   *  @example
   *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );
   */
		_DataTable.versionCheck = _DataTable.fnVersionCheck = function (version) {
				var aThis = _DataTable.version.split('.');
				var aThat = version.split('.');
				var iThis, iThat;

				for (var i = 0, iLen = aThat.length; i < iLen; i++) {
						iThis = parseInt(aThis[i], 10) || 0;
						iThat = parseInt(aThat[i], 10) || 0;

						// Parts are the same, keep comparing
						if (iThis === iThat) {
								continue;
						}

						// Parts are different, return immediately
						return iThis > iThat;
				}

				return true;
		};

		/**
   * Check if a `<table>` node is a DataTable table already or not.
   *
   *  @param {node|jquery|string} table Table node, jQuery object or jQuery
   *      selector for the table to test. Note that if more than more than one
   *      table is passed on, only the first will be checked
   *  @returns {boolean} true the table given is a DataTable, or false otherwise
   *  @static
   *  @dtopt API-Static
   *
   *  @example
   *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {
   *      $('#example').dataTable();
   *    }
   */
		_DataTable.isDataTable = _DataTable.fnIsDataTable = function (table) {
				var t = $(table).get(0);
				var is = false;

				$.each(_DataTable.settings, function (i, o) {
						var head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;
						var foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;

						if (o.nTable === t || head === t || foot === t) {
								is = true;
						}
				});

				return is;
		};

		/**
   * Get all DataTable tables that have been initialised - optionally you can
   * select to get only currently visible tables.
   *
   *  @param {boolean} [visible=false] Flag to indicate if you want all (default)
   *    or visible tables only.
   *  @returns {array} Array of `table` nodes (not DataTable instances) which are
   *    DataTables
   *  @static
   *  @dtopt API-Static
   *
   *  @example
   *    $.each( $.fn.dataTable.tables(true), function () {
   *      $(table).DataTable().columns.adjust();
   *    } );
   */
		_DataTable.tables = _DataTable.fnTables = function (visible) {
				var api = false;

				if ($.isPlainObject(visible)) {
						api = visible.api;
						visible = visible.visible;
				}

				var a = $.map(_DataTable.settings, function (o) {
						if (!visible || visible && $(o.nTable).is(':visible')) {
								return o.nTable;
						}
				});

				return api ? new _Api2(a) : a;
		};

		/**
   * DataTables utility methods
   *
   * This namespace provides helper methods that DataTables uses internally to
   * create a DataTable, but which are not exclusively used only for DataTables.
   * These methods can be used by extension authors to save the duplication of
   * code.
   *
   *  @namespace
   */
		_DataTable.util = {
				/**
     * Throttle the calls to a function. Arguments and context are maintained
     * for the throttled function.
     *
     * @param {function} fn Function to be called
     * @param {integer} freq Call frequency in mS
     * @return {function} Wrapped function
     */
				throttle: _fnThrottle,

				/**
     * Escape a string such that it can be used in a regular expression
     *
     *  @param {string} sVal string to escape
     *  @returns {string} escaped string
     */
				escapeRegex: _fnEscapeRegex
		};

		/**
   * Convert from camel case parameters to Hungarian notation. This is made public
   * for the extensions to provide the same ability as DataTables core to accept
   * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase
   * parameters.
   *
   *  @param {object} src The model object which holds all parameters that can be
   *    mapped.
   *  @param {object} user The object to convert from camel case to Hungarian.
   *  @param {boolean} force When set to `true`, properties which already have a
   *    Hungarian value in the `user` object will be overwritten. Otherwise they
   *    won't be.
   */
		_DataTable.camelToHungarian = _fnCamelToHungarian;

		/**
   *
   */
		_api_register('$()', function (selector, opts) {
				var rows = this.rows(opts).nodes(),
				    // Get all rows
				jqRows = $(rows);

				return $([].concat(jqRows.filter(selector).toArray(), jqRows.find(selector).toArray()));
		});

		// jQuery functions to operate on the tables
		$.each(['on', 'one', 'off'], function (i, key) {
				_api_register(key + '()', function () /* event, handler */{
						var args = Array.prototype.slice.call(arguments);

						// Add the `dt` namespace automatically if it isn't already present
						if (!args[0].match(/\.dt\b/)) {
								args[0] += '.dt';
						}

						var inst = $(this.tables().nodes());
						inst[key].apply(inst, args);
						return this;
				});
		});

		_api_register('clear()', function () {
				return this.iterator('table', function (settings) {
						_fnClearTable(settings);
				});
		});

		_api_register('settings()', function () {
				return new _Api2(this.context, this.context);
		});

		_api_register('init()', function () {
				var ctx = this.context;
				return ctx.length ? ctx[0].oInit : null;
		});

		_api_register('data()', function () {
				return this.iterator('table', function (settings) {
						return _pluck(settings.aoData, '_aData');
				}).flatten();
		});

		_api_register('destroy()', function (remove) {
				remove = remove || false;

				return this.iterator('table', function (settings) {
						var orig = settings.nTableWrapper.parentNode;
						var classes = settings.oClasses;
						var table = settings.nTable;
						var tbody = settings.nTBody;
						var thead = settings.nTHead;
						var tfoot = settings.nTFoot;
						var jqTable = $(table);
						var jqTbody = $(tbody);
						var jqWrapper = $(settings.nTableWrapper);
						var rows = $.map(settings.aoData, function (r) {
								return r.nTr;
						});
						var i, ien;

						// Flag to note that the table is currently being destroyed - no action
						// should be taken
						settings.bDestroying = true;

						// Fire off the destroy callbacks for plug-ins etc
						_fnCallbackFire(settings, "aoDestroyCallback", "destroy", [settings]);

						// If not being removed from the document, make all columns visible
						if (!remove) {
								new _Api2(settings).columns().visible(true);
						}

						// Blitz all `DT` namespaced events (these are internal events, the
						// lowercase, `dt` events are user subscribed and they are responsible
						// for removing them
						jqWrapper.unbind('.DT').find(':not(tbody *)').unbind('.DT');
						$(window).unbind('.DT-' + settings.sInstance);

						// When scrolling we had to break the table up - restore it
						if (table != thead.parentNode) {
								jqTable.children('thead').detach();
								jqTable.append(thead);
						}

						if (tfoot && table != tfoot.parentNode) {
								jqTable.children('tfoot').detach();
								jqTable.append(tfoot);
						}

						settings.aaSorting = [];
						settings.aaSortingFixed = [];
						_fnSortingClasses(settings);

						$(rows).removeClass(settings.asStripeClasses.join(' '));

						$('th, td', thead).removeClass(classes.sSortable + ' ' + classes.sSortableAsc + ' ' + classes.sSortableDesc + ' ' + classes.sSortableNone);

						if (settings.bJUI) {
								$('th span.' + classes.sSortIcon + ', td span.' + classes.sSortIcon, thead).detach();
								$('th, td', thead).each(function () {
										var wrapper = $('div.' + classes.sSortJUIWrapper, this);
										$(this).append(wrapper.contents());
										wrapper.detach();
								});
						}

						// Add the TR elements back into the table in their original order
						jqTbody.children().detach();
						jqTbody.append(rows);

						// Remove the DataTables generated nodes, events and classes
						var removedMethod = remove ? 'remove' : 'detach';
						jqTable[removedMethod]();
						jqWrapper[removedMethod]();

						// If we need to reattach the table to the document
						if (!remove && orig) {
								// insertBefore acts like appendChild if !arg[1]
								orig.insertBefore(table, settings.nTableReinsertBefore);

								// Restore the width of the original table - was read from the style property,
								// so we can restore directly to that
								jqTable.css('width', settings.sDestroyWidth).removeClass(classes.sTable);

								// If the were originally stripe classes - then we add them back here.
								// Note this is not fool proof (for example if not all rows had stripe
								// classes - but it's a good effort without getting carried away
								ien = settings.asDestroyStripes.length;

								if (ien) {
										jqTbody.children().each(function (i) {
												$(this).addClass(settings.asDestroyStripes[i % ien]);
										});
								}
						}

						/* Remove the settings object from the settings array */
						var idx = $.inArray(settings, _DataTable.settings);
						if (idx !== -1) {
								_DataTable.settings.splice(idx, 1);
						}
				});
		});

		// Add the `every()` method for rows, columns and cells in a compact form
		$.each(['column', 'row', 'cell'], function (i, type) {
				_api_register(type + 's().every()', function (fn) {
						var opts = this.selector.opts;
						var api = this;

						return this.iterator(type, function (settings, arg1, arg2, arg3, arg4) {
								// Rows and columns:
								//  arg1 - index
								//  arg2 - table counter
								//  arg3 - loop counter
								//  arg4 - undefined
								// Cells:
								//  arg1 - row index
								//  arg2 - column index
								//  arg3 - table counter
								//  arg4 - loop counter
								fn.call(api[type](arg1, type === 'cell' ? arg2 : opts, type === 'cell' ? opts : undefined), arg1, arg2, arg3, arg4);
						});
				});
		});

		// i18n method for extensions to be able to use the language object from the
		// DataTable
		_api_register('i18n()', function (token, def, plural) {
				var ctx = this.context[0];
				var resolved = _fnGetObjectDataFn(token)(ctx.oLanguage);

				if (resolved === undefined) {
						resolved = def;
				}

				if (plural !== undefined && $.isPlainObject(resolved)) {
						resolved = resolved[plural] !== undefined ? resolved[plural] : resolved._;
				}

				return resolved.replace('%d', plural); // nb: plural might be undefined,
		});

		/**
   * Version string for plug-ins to check compatibility. Allowed format is
   * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used
   * only for non-release builds. See http://semver.org/ for more information.
   *  @member
   *  @type string
   *  @default Version number
   */
		_DataTable.version = "1.10.11";

		/**
   * Private data store, containing all of the settings objects that are
   * created for the tables on a given page.
   *
   * Note that the `DataTable.settings` object is aliased to
   * `jQuery.fn.dataTableExt` through which it may be accessed and
   * manipulated, or `jQuery.fn.dataTable.settings`.
   *  @member
   *  @type array
   *  @default []
   *  @private
   */
		_DataTable.settings = [];

		/**
   * Object models container, for the various models that DataTables has
   * available to it. These models define the objects that are used to hold
   * the active state and configuration of the table.
   *  @namespace
   */
		_DataTable.models = {};

		/**
   * Template object for the way in which DataTables holds information about
   * search information for the global filter and individual column filters.
   *  @namespace
   */
		_DataTable.models.oSearch = {
				/**
     * Flag to indicate if the filtering should be case insensitive or not
     *  @type boolean
     *  @default true
     */
				"bCaseInsensitive": true,

				/**
     * Applied search term
     *  @type string
     *  @default <i>Empty string</i>
     */
				"sSearch": "",

				/**
     * Flag to indicate if the search term should be interpreted as a
     * regular expression (true) or not (false) and therefore and special
     * regex characters escaped.
     *  @type boolean
     *  @default false
     */
				"bRegex": false,

				/**
     * Flag to indicate if DataTables is to use its smart filtering or not.
     *  @type boolean
     *  @default true
     */
				"bSmart": true
		};

		/**
   * Template object for the way in which DataTables holds information about
   * each individual row. This is the object format used for the settings
   * aoData array.
   *  @namespace
   */
		_DataTable.models.oRow = {
				/**
     * TR element for the row
     *  @type node
     *  @default null
     */
				"nTr": null,

				/**
     * Array of TD elements for each row. This is null until the row has been
     * created.
     *  @type array nodes
     *  @default []
     */
				"anCells": null,

				/**
     * Data object from the original data source for the row. This is either
     * an array if using the traditional form of DataTables, or an object if
     * using mData options. The exact type will depend on the passed in
     * data from the data source, or will be an array if using DOM a data
     * source.
     *  @type array|object
     *  @default []
     */
				"_aData": [],

				/**
     * Sorting data cache - this array is ostensibly the same length as the
     * number of columns (although each index is generated only as it is
     * needed), and holds the data that is used for sorting each column in the
     * row. We do this cache generation at the start of the sort in order that
     * the formatting of the sort data need be done only once for each cell
     * per sort. This array should not be read from or written to by anything
     * other than the master sorting methods.
     *  @type array
     *  @default null
     *  @private
     */
				"_aSortData": null,

				/**
     * Per cell filtering data cache. As per the sort data cache, used to
     * increase the performance of the filtering in DataTables
     *  @type array
     *  @default null
     *  @private
     */
				"_aFilterData": null,

				/**
     * Filtering data cache. This is the same as the cell filtering cache, but
     * in this case a string rather than an array. This is easily computed with
     * a join on `_aFilterData`, but is provided as a cache so the join isn't
     * needed on every search (memory traded for performance)
     *  @type array
     *  @default null
     *  @private
     */
				"_sFilterRow": null,

				/**
     * Cache of the class name that DataTables has applied to the row, so we
     * can quickly look at this variable rather than needing to do a DOM check
     * on className for the nTr property.
     *  @type string
     *  @default <i>Empty string</i>
     *  @private
     */
				"_sRowStripe": "",

				/**
     * Denote if the original data source was from the DOM, or the data source
     * object. This is used for invalidating data, so DataTables can
     * automatically read data from the original source, unless uninstructed
     * otherwise.
     *  @type string
     *  @default null
     *  @private
     */
				"src": null,

				/**
     * Index in the aoData array. This saves an indexOf lookup when we have the
     * object, but want to know the index
     *  @type integer
     *  @default -1
     *  @private
     */
				"idx": -1
		};

		/**
   * Template object for the column information object in DataTables. This object
   * is held in the settings aoColumns array and contains all the information that
   * DataTables needs about each individual column.
   *
   * Note that this object is related to {@link DataTable.defaults.column}
   * but this one is the internal data store for DataTables's cache of columns.
   * It should NOT be manipulated outside of DataTables. Any configuration should
   * be done through the initialisation options.
   *  @namespace
   */
		_DataTable.models.oColumn = {
				/**
     * Column index. This could be worked out on-the-fly with $.inArray, but it
     * is faster to just hold it as a variable
     *  @type integer
     *  @default null
     */
				"idx": null,

				/**
     * A list of the columns that sorting should occur on when this column
     * is sorted. That this property is an array allows multi-column sorting
     * to be defined for a column (for example first name / last name columns
     * would benefit from this). The values are integers pointing to the
     * columns to be sorted on (typically it will be a single integer pointing
     * at itself, but that doesn't need to be the case).
     *  @type array
     */
				"aDataSort": null,

				/**
     * Define the sorting directions that are applied to the column, in sequence
     * as the column is repeatedly sorted upon - i.e. the first value is used
     * as the sorting direction when the column if first sorted (clicked on).
     * Sort it again (click again) and it will move on to the next index.
     * Repeat until loop.
     *  @type array
     */
				"asSorting": null,

				/**
     * Flag to indicate if the column is searchable, and thus should be included
     * in the filtering or not.
     *  @type boolean
     */
				"bSearchable": null,

				/**
     * Flag to indicate if the column is sortable or not.
     *  @type boolean
     */
				"bSortable": null,

				/**
     * Flag to indicate if the column is currently visible in the table or not
     *  @type boolean
     */
				"bVisible": null,

				/**
     * Store for manual type assignment using the `column.type` option. This
     * is held in store so we can manipulate the column's `sType` property.
     *  @type string
     *  @default null
     *  @private
     */
				"_sManualType": null,

				/**
     * Flag to indicate if HTML5 data attributes should be used as the data
     * source for filtering or sorting. True is either are.
     *  @type boolean
     *  @default false
     *  @private
     */
				"_bAttrSrc": false,

				/**
     * Developer definable function that is called whenever a cell is created (Ajax source,
     * etc) or processed for input (DOM source). This can be used as a compliment to mRender
     * allowing you to modify the DOM element (add background colour for example) when the
     * element is available.
     *  @type function
     *  @param {element} nTd The TD node that has been created
     *  @param {*} sData The Data for the cell
     *  @param {array|object} oData The data for the whole row
     *  @param {int} iRow The row index for the aoData data store
     *  @default null
     */
				"fnCreatedCell": null,

				/**
     * Function to get data from a cell in a column. You should <b>never</b>
     * access data directly through _aData internally in DataTables - always use
     * the method attached to this property. It allows mData to function as
     * required. This function is automatically assigned by the column
     * initialisation method
     *  @type function
     *  @param {array|object} oData The data array/object for the array
     *    (i.e. aoData[]._aData)
     *  @param {string} sSpecific The specific data type you want to get -
     *    'display', 'type' 'filter' 'sort'
     *  @returns {*} The data for the cell from the given row's data
     *  @default null
     */
				"fnGetData": null,

				/**
     * Function to set data for a cell in the column. You should <b>never</b>
     * set the data directly to _aData internally in DataTables - always use
     * this method. It allows mData to function as required. This function
     * is automatically assigned by the column initialisation method
     *  @type function
     *  @param {array|object} oData The data array/object for the array
     *    (i.e. aoData[]._aData)
     *  @param {*} sValue Value to set
     *  @default null
     */
				"fnSetData": null,

				/**
     * Property to read the value for the cells in the column from the data
     * source array / object. If null, then the default content is used, if a
     * function is given then the return from the function is used.
     *  @type function|int|string|null
     *  @default null
     */
				"mData": null,

				/**
     * Partner property to mData which is used (only when defined) to get
     * the data - i.e. it is basically the same as mData, but without the
     * 'set' option, and also the data fed to it is the result from mData.
     * This is the rendering method to match the data method of mData.
     *  @type function|int|string|null
     *  @default null
     */
				"mRender": null,

				/**
     * Unique header TH/TD element for this column - this is what the sorting
     * listener is attached to (if sorting is enabled.)
     *  @type node
     *  @default null
     */
				"nTh": null,

				/**
     * Unique footer TH/TD element for this column (if there is one). Not used
     * in DataTables as such, but can be used for plug-ins to reference the
     * footer for each column.
     *  @type node
     *  @default null
     */
				"nTf": null,

				/**
     * The class to apply to all TD elements in the table's TBODY for the column
     *  @type string
     *  @default null
     */
				"sClass": null,

				/**
     * When DataTables calculates the column widths to assign to each column,
     * it finds the longest string in each column and then constructs a
     * temporary table and reads the widths from that. The problem with this
     * is that "mmm" is much wider then "iiii", but the latter is a longer
     * string - thus the calculation can go wrong (doing it properly and putting
     * it into an DOM object and measuring that is horribly(!) slow). Thus as
     * a "work around" we provide this option. It will append its value to the
     * text that is found to be the longest string for the column - i.e. padding.
     *  @type string
     */
				"sContentPadding": null,

				/**
     * Allows a default value to be given for a column's data, and will be used
     * whenever a null data source is encountered (this can be because mData
     * is set to null, or because the data source itself is null).
     *  @type string
     *  @default null
     */
				"sDefaultContent": null,

				/**
     * Name for the column, allowing reference to the column by name as well as
     * by index (needs a lookup to work by name).
     *  @type string
     */
				"sName": null,

				/**
     * Custom sorting data type - defines which of the available plug-ins in
     * afnSortData the custom sorting will use - if any is defined.
     *  @type string
     *  @default std
     */
				"sSortDataType": 'std',

				/**
     * Class to be applied to the header element when sorting on this column
     *  @type string
     *  @default null
     */
				"sSortingClass": null,

				/**
     * Class to be applied to the header element when sorting on this column -
     * when jQuery UI theming is used.
     *  @type string
     *  @default null
     */
				"sSortingClassJUI": null,

				/**
     * Title of the column - what is seen in the TH element (nTh).
     *  @type string
     */
				"sTitle": null,

				/**
     * Column sorting and filtering type
     *  @type string
     *  @default null
     */
				"sType": null,

				/**
     * Width of the column
     *  @type string
     *  @default null
     */
				"sWidth": null,

				/**
     * Width of the column when it was first "encountered"
     *  @type string
     *  @default null
     */
				"sWidthOrig": null
		};

		/*
   * Developer note: The properties of the object below are given in Hungarian
   * notation, that was used as the interface for DataTables prior to v1.10, however
   * from v1.10 onwards the primary interface is camel case. In order to avoid
   * breaking backwards compatibility utterly with this change, the Hungarian
   * version is still, internally the primary interface, but is is not documented
   * - hence the @name tags in each doc comment. This allows a Javascript function
   * to create a map from Hungarian notation to camel case (going the other direction
   * would require each property to be listed, which would at around 3K to the size
   * of DataTables, while this method is about a 0.5K hit.
   *
   * Ultimately this does pave the way for Hungarian notation to be dropped
   * completely, but that is a massive amount of work and will break current
   * installs (therefore is on-hold until v2).
   */

		/**
   * Initialisation options that can be given to DataTables at initialisation
   * time.
   *  @namespace
   */
		_DataTable.defaults = {
				/**
     * An array of data to use for the table, passed in at initialisation which
     * will be used in preference to any data which is already in the DOM. This is
     * particularly useful for constructing tables purely in Javascript, for
     * example with a custom Ajax call.
     *  @type array
     *  @default null
     *
     *  @dtopt Option
     *  @name DataTable.defaults.data
     *
     *  @example
     *    // Using a 2D array data source
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "data": [
     *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],
     *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],
     *        ],
     *        "columns": [
     *          { "title": "Engine" },
     *          { "title": "Browser" },
     *          { "title": "Platform" },
     *          { "title": "Version" },
     *          { "title": "Grade" }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using an array of objects as a data source (`data`)
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "data": [
     *          {
     *            "engine":   "Trident",
     *            "browser":  "Internet Explorer 4.0",
     *            "platform": "Win 95+",
     *            "version":  4,
     *            "grade":    "X"
     *          },
     *          {
     *            "engine":   "Trident",
     *            "browser":  "Internet Explorer 5.0",
     *            "platform": "Win 95+",
     *            "version":  5,
     *            "grade":    "C"
     *          }
     *        ],
     *        "columns": [
     *          { "title": "Engine",   "data": "engine" },
     *          { "title": "Browser",  "data": "browser" },
     *          { "title": "Platform", "data": "platform" },
     *          { "title": "Version",  "data": "version" },
     *          { "title": "Grade",    "data": "grade" }
     *        ]
     *      } );
     *    } );
     */
				"aaData": null,

				/**
     * If ordering is enabled, then DataTables will perform a first pass sort on
     * initialisation. You can define which column(s) the sort is performed
     * upon, and the sorting direction, with this variable. The `sorting` array
     * should contain an array for each column to be sorted initially containing
     * the column's index and a direction string ('asc' or 'desc').
     *  @type array
     *  @default [[0,'asc']]
     *
     *  @dtopt Option
     *  @name DataTable.defaults.order
     *
     *  @example
     *    // Sort by 3rd column first, and then 4th column
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "order": [[2,'asc'], [3,'desc']]
     *      } );
     *    } );
     *
     *    // No initial sorting
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "order": []
     *      } );
     *    } );
     */
				"aaSorting": [[0, 'asc']],

				/**
     * This parameter is basically identical to the `sorting` parameter, but
     * cannot be overridden by user interaction with the table. What this means
     * is that you could have a column (visible or hidden) which the sorting
     * will always be forced on first - any sorting after that (from the user)
     * will then be performed as required. This can be useful for grouping rows
     * together.
     *  @type array
     *  @default null
     *
     *  @dtopt Option
     *  @name DataTable.defaults.orderFixed
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "orderFixed": [[0,'asc']]
     *      } );
     *    } )
     */
				"aaSortingFixed": [],

				/**
     * DataTables can be instructed to load data to display in the table from a
     * Ajax source. This option defines how that Ajax call is made and where to.
     *
     * The `ajax` property has three different modes of operation, depending on
     * how it is defined. These are:
     *
     * * `string` - Set the URL from where the data should be loaded from.
     * * `object` - Define properties for `jQuery.ajax`.
     * * `function` - Custom data get function
     *
     * `string`
     * --------
     *
     * As a string, the `ajax` property simply defines the URL from which
     * DataTables will load data.
     *
     * `object`
     * --------
     *
     * As an object, the parameters in the object are passed to
     * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control
     * of the Ajax request. DataTables has a number of default parameters which
     * you can override using this option. Please refer to the jQuery
     * documentation for a full description of the options available, although
     * the following parameters provide additional options in DataTables or
     * require special consideration:
     *
     * * `data` - As with jQuery, `data` can be provided as an object, but it
     *   can also be used as a function to manipulate the data DataTables sends
     *   to the server. The function takes a single parameter, an object of
     *   parameters with the values that DataTables has readied for sending. An
     *   object may be returned which will be merged into the DataTables
     *   defaults, or you can add the items to the object that was passed in and
     *   not return anything from the function. This supersedes `fnServerParams`
     *   from DataTables 1.9-.
     *
     * * `dataSrc` - By default DataTables will look for the property `data` (or
     *   `aaData` for compatibility with DataTables 1.9-) when obtaining data
     *   from an Ajax source or for server-side processing - this parameter
     *   allows that property to be changed. You can use Javascript dotted
     *   object notation to get a data source for multiple levels of nesting, or
     *   it my be used as a function. As a function it takes a single parameter,
     *   the JSON returned from the server, which can be manipulated as
     *   required, with the returned value being that used by DataTables as the
     *   data source for the table. This supersedes `sAjaxDataProp` from
     *   DataTables 1.9-.
     *
     * * `success` - Should not be overridden it is used internally in
     *   DataTables. To manipulate / transform the data returned by the server
     *   use `ajax.dataSrc`, or use `ajax` as a function (see below).
     *
     * `function`
     * ----------
     *
     * As a function, making the Ajax call is left up to yourself allowing
     * complete control of the Ajax request. Indeed, if desired, a method other
     * than Ajax could be used to obtain the required data, such as Web storage
     * or an AIR database.
     *
     * The function is given four parameters and no return is required. The
     * parameters are:
     *
     * 1. _object_ - Data to send to the server
     * 2. _function_ - Callback function that must be executed when the required
     *    data has been obtained. That data should be passed into the callback
     *    as the only parameter
     * 3. _object_ - DataTables settings object for the table
     *
     * Note that this supersedes `fnServerData` from DataTables 1.9-.
     *
     *  @type string|object|function
     *  @default null
     *
     *  @dtopt Option
     *  @name DataTable.defaults.ajax
     *  @since 1.10.0
     *
     * @example
     *   // Get JSON data from a file via Ajax.
     *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).
     *   $('#example').dataTable( {
     *     "ajax": "data.json"
     *   } );
     *
     * @example
     *   // Get JSON data from a file via Ajax, using `dataSrc` to change
     *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)
     *   $('#example').dataTable( {
     *     "ajax": {
     *       "url": "data.json",
     *       "dataSrc": "tableData"
     *     }
     *   } );
     *
     * @example
     *   // Get JSON data from a file via Ajax, using `dataSrc` to read data
     *   // from a plain array rather than an array in an object
     *   $('#example').dataTable( {
     *     "ajax": {
     *       "url": "data.json",
     *       "dataSrc": ""
     *     }
     *   } );
     *
     * @example
     *   // Manipulate the data returned from the server - add a link to data
     *   // (note this can, should, be done using `render` for the column - this
     *   // is just a simple example of how the data can be manipulated).
     *   $('#example').dataTable( {
     *     "ajax": {
     *       "url": "data.json",
     *       "dataSrc": function ( json ) {
     *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {
     *           json[i][0] = '<a href="/message/'+json[i][0]+'>View message</a>';
     *         }
     *         return json;
     *       }
     *     }
     *   } );
     *
     * @example
     *   // Add data to the request
     *   $('#example').dataTable( {
     *     "ajax": {
     *       "url": "data.json",
     *       "data": function ( d ) {
     *         return {
     *           "extra_search": $('#extra').val()
     *         };
     *       }
     *     }
     *   } );
     *
     * @example
     *   // Send request as POST
     *   $('#example').dataTable( {
     *     "ajax": {
     *       "url": "data.json",
     *       "type": "POST"
     *     }
     *   } );
     *
     * @example
     *   // Get the data from localStorage (could interface with a form for
     *   // adding, editing and removing rows).
     *   $('#example').dataTable( {
     *     "ajax": function (data, callback, settings) {
     *       callback(
     *         JSON.parse( localStorage.getItem('dataTablesData') )
     *       );
     *     }
     *   } );
     */
				"ajax": null,

				/**
     * This parameter allows you to readily specify the entries in the length drop
     * down menu that DataTables shows when pagination is enabled. It can be
     * either a 1D array of options which will be used for both the displayed
     * option and the value, or a 2D array which will use the array in the first
     * position as the value, and the array in the second position as the
     * displayed options (useful for language strings such as 'All').
     *
     * Note that the `pageLength` property will be automatically set to the
     * first value given in this array, unless `pageLength` is also provided.
     *  @type array
     *  @default [ 10, 25, 50, 100 ]
     *
     *  @dtopt Option
     *  @name DataTable.defaults.lengthMenu
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]]
     *      } );
     *    } );
     */
				"aLengthMenu": [10, 25, 50, 100],

				/**
     * The `columns` option in the initialisation parameter allows you to define
     * details about the way individual columns behave. For a full list of
     * column options that can be set, please see
     * {@link DataTable.defaults.column}. Note that if you use `columns` to
     * define your columns, you must have an entry in the array for every single
     * column that you have in your table (these can be null if you don't which
     * to specify any options).
     *  @member
     *
     *  @name DataTable.defaults.column
     */
				"aoColumns": null,

				/**
     * Very similar to `columns`, `columnDefs` allows you to target a specific
     * column, multiple columns, or all columns, using the `targets` property of
     * each object in the array. This allows great flexibility when creating
     * tables, as the `columnDefs` arrays can be of any length, targeting the
     * columns you specifically want. `columnDefs` may use any of the column
     * options available: {@link DataTable.defaults.column}, but it _must_
     * have `targets` defined in each object in the array. Values in the `targets`
     * array may be:
     *   <ul>
     *     <li>a string - class name will be matched on the TH for the column</li>
     *     <li>0 or a positive integer - column index counting from the left</li>
     *     <li>a negative integer - column index counting from the right</li>
     *     <li>the string "_all" - all columns (i.e. assign a default)</li>
     *   </ul>
     *  @member
     *
     *  @name DataTable.defaults.columnDefs
     */
				"aoColumnDefs": null,

				/**
     * Basically the same as `search`, this parameter defines the individual column
     * filtering state at initialisation time. The array must be of the same size
     * as the number of columns, and each element be an object with the parameters
     * `search` and `escapeRegex` (the latter is optional). 'null' is also
     * accepted and the default will be used.
     *  @type array
     *  @default []
     *
     *  @dtopt Option
     *  @name DataTable.defaults.searchCols
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "searchCols": [
     *          null,
     *          { "search": "My filter" },
     *          null,
     *          { "search": "^[0-9]", "escapeRegex": false }
     *        ]
     *      } );
     *    } )
     */
				"aoSearchCols": [],

				/**
     * An array of CSS classes that should be applied to displayed rows. This
     * array may be of any length, and DataTables will apply each class
     * sequentially, looping when required.
     *  @type array
     *  @default null <i>Will take the values determined by the `oClasses.stripe*`
     *    options</i>
     *
     *  @dtopt Option
     *  @name DataTable.defaults.stripeClasses
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "stripeClasses": [ 'strip1', 'strip2', 'strip3' ]
     *      } );
     *    } )
     */
				"asStripeClasses": null,

				/**
     * Enable or disable automatic column width calculation. This can be disabled
     * as an optimisation (it takes some time to calculate the widths) if the
     * tables widths are passed in using `columns`.
     *  @type boolean
     *  @default true
     *
     *  @dtopt Features
     *  @name DataTable.defaults.autoWidth
     *
     *  @example
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "autoWidth": false
     *      } );
     *    } );
     */
				"bAutoWidth": true,

				/**
     * Deferred rendering can provide DataTables with a huge speed boost when you
     * are using an Ajax or JS data source for the table. This option, when set to
     * true, will cause DataTables to defer the creation of the table elements for
     * each row until they are needed for a draw - saving a significant amount of
     * time.
     *  @type boolean
     *  @default false
     *
     *  @dtopt Features
     *  @name DataTable.defaults.deferRender
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "ajax": "sources/arrays.txt",
     *        "deferRender": true
     *      } );
     *    } );
     */
				"bDeferRender": false,

				/**
     * Replace a DataTable which matches the given selector and replace it with
     * one which has the properties of the new initialisation object passed. If no
     * table matches the selector, then the new DataTable will be constructed as
     * per normal.
     *  @type boolean
     *  @default false
     *
     *  @dtopt Options
     *  @name DataTable.defaults.destroy
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "srollY": "200px",
     *        "paginate": false
     *      } );
     *
     *      // Some time later....
     *      $('#example').dataTable( {
     *        "filter": false,
     *        "destroy": true
     *      } );
     *    } );
     */
				"bDestroy": false,

				/**
     * Enable or disable filtering of data. Filtering in DataTables is "smart" in
     * that it allows the end user to input multiple words (space separated) and
     * will match a row containing those words, even if not in the order that was
     * specified (this allow matching across multiple columns). Note that if you
     * wish to use filtering in DataTables this must remain 'true' - to remove the
     * default filtering input box and retain filtering abilities, please use
     * {@link DataTable.defaults.dom}.
     *  @type boolean
     *  @default true
     *
     *  @dtopt Features
     *  @name DataTable.defaults.searching
     *
     *  @example
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "searching": false
     *      } );
     *    } );
     */
				"bFilter": true,

				/**
     * Enable or disable the table information display. This shows information
     * about the data that is currently visible on the page, including information
     * about filtered data if that action is being performed.
     *  @type boolean
     *  @default true
     *
     *  @dtopt Features
     *  @name DataTable.defaults.info
     *
     *  @example
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "info": false
     *      } );
     *    } );
     */
				"bInfo": true,

				/**
     * Enable jQuery UI ThemeRoller support (required as ThemeRoller requires some
     * slightly different and additional mark-up from what DataTables has
     * traditionally used).
     *  @type boolean
     *  @default false
     *
     *  @dtopt Features
     *  @name DataTable.defaults.jQueryUI
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "jQueryUI": true
     *      } );
     *    } );
     */
				"bJQueryUI": false,

				/**
     * Allows the end user to select the size of a formatted page from a select
     * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).
     *  @type boolean
     *  @default true
     *
     *  @dtopt Features
     *  @name DataTable.defaults.lengthChange
     *
     *  @example
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "lengthChange": false
     *      } );
     *    } );
     */
				"bLengthChange": true,

				/**
     * Enable or disable pagination.
     *  @type boolean
     *  @default true
     *
     *  @dtopt Features
     *  @name DataTable.defaults.paging
     *
     *  @example
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "paging": false
     *      } );
     *    } );
     */
				"bPaginate": true,

				/**
     * Enable or disable the display of a 'processing' indicator when the table is
     * being processed (e.g. a sort). This is particularly useful for tables with
     * large amounts of data where it can take a noticeable amount of time to sort
     * the entries.
     *  @type boolean
     *  @default false
     *
     *  @dtopt Features
     *  @name DataTable.defaults.processing
     *
     *  @example
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "processing": true
     *      } );
     *    } );
     */
				"bProcessing": false,

				/**
     * Retrieve the DataTables object for the given selector. Note that if the
     * table has already been initialised, this parameter will cause DataTables
     * to simply return the object that has already been set up - it will not take
     * account of any changes you might have made to the initialisation object
     * passed to DataTables (setting this parameter to true is an acknowledgement
     * that you understand this). `destroy` can be used to reinitialise a table if
     * you need.
     *  @type boolean
     *  @default false
     *
     *  @dtopt Options
     *  @name DataTable.defaults.retrieve
     *
     *  @example
     *    $(document).ready( function() {
     *      initTable();
     *      tableActions();
     *    } );
     *
     *    function initTable ()
     *    {
     *      return $('#example').dataTable( {
     *        "scrollY": "200px",
     *        "paginate": false,
     *        "retrieve": true
     *      } );
     *    }
     *
     *    function tableActions ()
     *    {
     *      var table = initTable();
     *      // perform API operations with oTable
     *    }
     */
				"bRetrieve": false,

				/**
     * When vertical (y) scrolling is enabled, DataTables will force the height of
     * the table's viewport to the given height at all times (useful for layout).
     * However, this can look odd when filtering data down to a small data set,
     * and the footer is left "floating" further down. This parameter (when
     * enabled) will cause DataTables to collapse the table's viewport down when
     * the result set will fit within the given Y height.
     *  @type boolean
     *  @default false
     *
     *  @dtopt Options
     *  @name DataTable.defaults.scrollCollapse
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "scrollY": "200",
     *        "scrollCollapse": true
     *      } );
     *    } );
     */
				"bScrollCollapse": false,

				/**
     * Configure DataTables to use server-side processing. Note that the
     * `ajax` parameter must also be given in order to give DataTables a
     * source to obtain the required data for each draw.
     *  @type boolean
     *  @default false
     *
     *  @dtopt Features
     *  @dtopt Server-side
     *  @name DataTable.defaults.serverSide
     *
     *  @example
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "serverSide": true,
     *        "ajax": "xhr.php"
     *      } );
     *    } );
     */
				"bServerSide": false,

				/**
     * Enable or disable sorting of columns. Sorting of individual columns can be
     * disabled by the `sortable` option for each column.
     *  @type boolean
     *  @default true
     *
     *  @dtopt Features
     *  @name DataTable.defaults.ordering
     *
     *  @example
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "ordering": false
     *      } );
     *    } );
     */
				"bSort": true,

				/**
     * Enable or display DataTables' ability to sort multiple columns at the
     * same time (activated by shift-click by the user).
     *  @type boolean
     *  @default true
     *
     *  @dtopt Options
     *  @name DataTable.defaults.orderMulti
     *
     *  @example
     *    // Disable multiple column sorting ability
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "orderMulti": false
     *      } );
     *    } );
     */
				"bSortMulti": true,

				/**
     * Allows control over whether DataTables should use the top (true) unique
     * cell that is found for a single column, or the bottom (false - default).
     * This is useful when using complex headers.
     *  @type boolean
     *  @default false
     *
     *  @dtopt Options
     *  @name DataTable.defaults.orderCellsTop
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "orderCellsTop": true
     *      } );
     *    } );
     */
				"bSortCellsTop": false,

				/**
     * Enable or disable the addition of the classes `sorting\_1`, `sorting\_2` and
     * `sorting\_3` to the columns which are currently being sorted on. This is
     * presented as a feature switch as it can increase processing time (while
     * classes are removed and added) so for large data sets you might want to
     * turn this off.
     *  @type boolean
     *  @default true
     *
     *  @dtopt Features
     *  @name DataTable.defaults.orderClasses
     *
     *  @example
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "orderClasses": false
     *      } );
     *    } );
     */
				"bSortClasses": true,

				/**
     * Enable or disable state saving. When enabled HTML5 `localStorage` will be
     * used to save table display information such as pagination information,
     * display length, filtering and sorting. As such when the end user reloads
     * the page the display display will match what thy had previously set up.
     *
     * Due to the use of `localStorage` the default state saving is not supported
     * in IE6 or 7. If state saving is required in those browsers, use
     * `stateSaveCallback` to provide a storage solution such as cookies.
     *  @type boolean
     *  @default false
     *
     *  @dtopt Features
     *  @name DataTable.defaults.stateSave
     *
     *  @example
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "stateSave": true
     *      } );
     *    } );
     */
				"bStateSave": false,

				/**
     * This function is called when a TR element is created (and all TD child
     * elements have been inserted), or registered if using a DOM source, allowing
     * manipulation of the TR element (adding classes etc).
     *  @type function
     *  @param {node} row "TR" element for the current row
     *  @param {array} data Raw data array for this row
     *  @param {int} dataIndex The index of this row in the internal aoData array
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.createdRow
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "createdRow": function( row, data, dataIndex ) {
     *          // Bold the grade for all 'A' grade browsers
     *          if ( data[4] == "A" )
     *          {
     *            $('td:eq(4)', row).html( '<b>A</b>' );
     *          }
     *        }
     *      } );
     *    } );
     */
				"fnCreatedRow": null,

				/**
     * This function is called on every 'draw' event, and allows you to
     * dynamically modify any aspect you want about the created DOM.
     *  @type function
     *  @param {object} settings DataTables settings object
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.drawCallback
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "drawCallback": function( settings ) {
     *          alert( 'DataTables has redrawn the table' );
     *        }
     *      } );
     *    } );
     */
				"fnDrawCallback": null,

				/**
     * Identical to fnHeaderCallback() but for the table footer this function
     * allows you to modify the table footer on every 'draw' event.
     *  @type function
     *  @param {node} foot "TR" element for the footer
     *  @param {array} data Full table data (as derived from the original HTML)
     *  @param {int} start Index for the current display starting point in the
     *    display array
     *  @param {int} end Index for the current display ending point in the
     *    display array
     *  @param {array int} display Index array to translate the visual position
     *    to the full data array
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.footerCallback
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "footerCallback": function( tfoot, data, start, end, display ) {
     *          tfoot.getElementsByTagName('th')[0].innerHTML = "Starting index is "+start;
     *        }
     *      } );
     *    } )
     */
				"fnFooterCallback": null,

				/**
     * When rendering large numbers in the information element for the table
     * (i.e. "Showing 1 to 10 of 57 entries") DataTables will render large numbers
     * to have a comma separator for the 'thousands' units (e.g. 1 million is
     * rendered as "1,000,000") to help readability for the end user. This
     * function will override the default method DataTables uses.
     *  @type function
     *  @member
     *  @param {int} toFormat number to be formatted
     *  @returns {string} formatted string for DataTables to show the number
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.formatNumber
     *
     *  @example
     *    // Format a number using a single quote for the separator (note that
     *    // this can also be done with the language.thousands option)
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "formatNumber": function ( toFormat ) {
     *          return toFormat.toString().replace(
     *            /\B(?=(\d{3})+(?!\d))/g, "'"
     *          );
     *        };
     *      } );
     *    } );
     */
				"fnFormatNumber": function fnFormatNumber(toFormat) {
						return toFormat.toString().replace(/\B(?=(\d{3})+(?!\d))/g, this.oLanguage.sThousands);
				},

				/**
     * This function is called on every 'draw' event, and allows you to
     * dynamically modify the header row. This can be used to calculate and
     * display useful information about the table.
     *  @type function
     *  @param {node} head "TR" element for the header
     *  @param {array} data Full table data (as derived from the original HTML)
     *  @param {int} start Index for the current display starting point in the
     *    display array
     *  @param {int} end Index for the current display ending point in the
     *    display array
     *  @param {array int} display Index array to translate the visual position
     *    to the full data array
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.headerCallback
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "fheaderCallback": function( head, data, start, end, display ) {
     *          head.getElementsByTagName('th')[0].innerHTML = "Displaying "+(end-start)+" records";
     *        }
     *      } );
     *    } )
     */
				"fnHeaderCallback": null,

				/**
     * The information element can be used to convey information about the current
     * state of the table. Although the internationalisation options presented by
     * DataTables are quite capable of dealing with most customisations, there may
     * be times where you wish to customise the string further. This callback
     * allows you to do exactly that.
     *  @type function
     *  @param {object} oSettings DataTables settings object
     *  @param {int} start Starting position in data for the draw
     *  @param {int} end End position in data for the draw
     *  @param {int} max Total number of rows in the table (regardless of
     *    filtering)
     *  @param {int} total Total number of rows in the data set, after filtering
     *  @param {string} pre The string that DataTables has formatted using it's
     *    own rules
     *  @returns {string} The string to be displayed in the information element.
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.infoCallback
     *
     *  @example
     *    $('#example').dataTable( {
     *      "infoCallback": function( settings, start, end, max, total, pre ) {
     *        return start +" to "+ end;
     *      }
     *    } );
     */
				"fnInfoCallback": null,

				/**
     * Called when the table has been initialised. Normally DataTables will
     * initialise sequentially and there will be no need for this function,
     * however, this does not hold true when using external language information
     * since that is obtained using an async XHR call.
     *  @type function
     *  @param {object} settings DataTables settings object
     *  @param {object} json The JSON object request from the server - only
     *    present if client-side Ajax sourced data is used
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.initComplete
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "initComplete": function(settings, json) {
     *          alert( 'DataTables has finished its initialisation.' );
     *        }
     *      } );
     *    } )
     */
				"fnInitComplete": null,

				/**
     * Called at the very start of each table draw and can be used to cancel the
     * draw by returning false, any other return (including undefined) results in
     * the full draw occurring).
     *  @type function
     *  @param {object} settings DataTables settings object
     *  @returns {boolean} False will cancel the draw, anything else (including no
     *    return) will allow it to complete.
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.preDrawCallback
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "preDrawCallback": function( settings ) {
     *          if ( $('#test').val() == 1 ) {
     *            return false;
     *          }
     *        }
     *      } );
     *    } );
     */
				"fnPreDrawCallback": null,

				/**
     * This function allows you to 'post process' each row after it have been
     * generated for each table draw, but before it is rendered on screen. This
     * function might be used for setting the row class name etc.
     *  @type function
     *  @param {node} row "TR" element for the current row
     *  @param {array} data Raw data array for this row
     *  @param {int} displayIndex The display index for the current table draw
     *  @param {int} displayIndexFull The index of the data in the full list of
     *    rows (after filtering)
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.rowCallback
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "rowCallback": function( row, data, displayIndex, displayIndexFull ) {
     *          // Bold the grade for all 'A' grade browsers
     *          if ( data[4] == "A" ) {
     *            $('td:eq(4)', row).html( '<b>A</b>' );
     *          }
     *        }
     *      } );
     *    } );
     */
				"fnRowCallback": null,

				/**
     * __Deprecated__ The functionality provided by this parameter has now been
     * superseded by that provided through `ajax`, which should be used instead.
     *
     * This parameter allows you to override the default function which obtains
     * the data from the server so something more suitable for your application.
     * For example you could use POST data, or pull information from a Gears or
     * AIR database.
     *  @type function
     *  @member
     *  @param {string} source HTTP source to obtain the data from (`ajax`)
     *  @param {array} data A key/value pair object containing the data to send
     *    to the server
     *  @param {function} callback to be called on completion of the data get
     *    process that will draw the data on the page.
     *  @param {object} settings DataTables settings object
     *
     *  @dtopt Callbacks
     *  @dtopt Server-side
     *  @name DataTable.defaults.serverData
     *
     *  @deprecated 1.10. Please use `ajax` for this functionality now.
     */
				"fnServerData": null,

				/**
     * __Deprecated__ The functionality provided by this parameter has now been
     * superseded by that provided through `ajax`, which should be used instead.
     *
     *  It is often useful to send extra data to the server when making an Ajax
     * request - for example custom filtering information, and this callback
     * function makes it trivial to send extra information to the server. The
     * passed in parameter is the data set that has been constructed by
     * DataTables, and you can add to this or modify it as you require.
     *  @type function
     *  @param {array} data Data array (array of objects which are name/value
     *    pairs) that has been constructed by DataTables and will be sent to the
     *    server. In the case of Ajax sourced data with server-side processing
     *    this will be an empty array, for server-side processing there will be a
     *    significant number of parameters!
     *  @returns {undefined} Ensure that you modify the data array passed in,
     *    as this is passed by reference.
     *
     *  @dtopt Callbacks
     *  @dtopt Server-side
     *  @name DataTable.defaults.serverParams
     *
     *  @deprecated 1.10. Please use `ajax` for this functionality now.
     */
				"fnServerParams": null,

				/**
     * Load the table state. With this function you can define from where, and how, the
     * state of a table is loaded. By default DataTables will load from `localStorage`
     * but you might wish to use a server-side database or cookies.
     *  @type function
     *  @member
     *  @param {object} settings DataTables settings object
     *  @return {object} The DataTables state object to be loaded
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.stateLoadCallback
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "stateSave": true,
     *        "stateLoadCallback": function (settings) {
     *          var o;
     *
     *          // Send an Ajax request to the server to get the data. Note that
     *          // this is a synchronous request.
     *          $.ajax( {
     *            "url": "/state_load",
     *            "async": false,
     *            "dataType": "json",
     *            "success": function (json) {
     *              o = json;
     *            }
     *          } );
     *
     *          return o;
     *        }
     *      } );
     *    } );
     */
				"fnStateLoadCallback": function fnStateLoadCallback(settings) {
						try {
								return JSON.parse((settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem('DataTables_' + settings.sInstance + '_' + location.pathname));
						} catch (e) {}
				},

				/**
     * Callback which allows modification of the saved state prior to loading that state.
     * This callback is called when the table is loading state from the stored data, but
     * prior to the settings object being modified by the saved state. Note that for
     * plug-in authors, you should use the `stateLoadParams` event to load parameters for
     * a plug-in.
     *  @type function
     *  @param {object} settings DataTables settings object
     *  @param {object} data The state object that is to be loaded
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.stateLoadParams
     *
     *  @example
     *    // Remove a saved filter, so filtering is never loaded
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "stateSave": true,
     *        "stateLoadParams": function (settings, data) {
     *          data.oSearch.sSearch = "";
     *        }
     *      } );
     *    } );
     *
     *  @example
     *    // Disallow state loading by returning false
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "stateSave": true,
     *        "stateLoadParams": function (settings, data) {
     *          return false;
     *        }
     *      } );
     *    } );
     */
				"fnStateLoadParams": null,

				/**
     * Callback that is called when the state has been loaded from the state saving method
     * and the DataTables settings object has been modified as a result of the loaded state.
     *  @type function
     *  @param {object} settings DataTables settings object
     *  @param {object} data The state object that was loaded
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.stateLoaded
     *
     *  @example
     *    // Show an alert with the filtering value that was saved
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "stateSave": true,
     *        "stateLoaded": function (settings, data) {
     *          alert( 'Saved filter was: '+data.oSearch.sSearch );
     *        }
     *      } );
     *    } );
     */
				"fnStateLoaded": null,

				/**
     * Save the table state. This function allows you to define where and how the state
     * information for the table is stored By default DataTables will use `localStorage`
     * but you might wish to use a server-side database or cookies.
     *  @type function
     *  @member
     *  @param {object} settings DataTables settings object
     *  @param {object} data The state object to be saved
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.stateSaveCallback
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "stateSave": true,
     *        "stateSaveCallback": function (settings, data) {
     *          // Send an Ajax request to the server with the state object
     *          $.ajax( {
     *            "url": "/state_save",
     *            "data": data,
     *            "dataType": "json",
     *            "method": "POST"
     *            "success": function () {}
     *          } );
     *        }
     *      } );
     *    } );
     */
				"fnStateSaveCallback": function fnStateSaveCallback(settings, data) {
						try {
								(settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem('DataTables_' + settings.sInstance + '_' + location.pathname, JSON.stringify(data));
						} catch (e) {}
				},

				/**
     * Callback which allows modification of the state to be saved. Called when the table
     * has changed state a new state save is required. This method allows modification of
     * the state saving object prior to actually doing the save, including addition or
     * other state properties or modification. Note that for plug-in authors, you should
     * use the `stateSaveParams` event to save parameters for a plug-in.
     *  @type function
     *  @param {object} settings DataTables settings object
     *  @param {object} data The state object to be saved
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.stateSaveParams
     *
     *  @example
     *    // Remove a saved filter, so filtering is never saved
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "stateSave": true,
     *        "stateSaveParams": function (settings, data) {
     *          data.oSearch.sSearch = "";
     *        }
     *      } );
     *    } );
     */
				"fnStateSaveParams": null,

				/**
     * Duration for which the saved state information is considered valid. After this period
     * has elapsed the state will be returned to the default.
     * Value is given in seconds.
     *  @type int
     *  @default 7200 <i>(2 hours)</i>
     *
     *  @dtopt Options
     *  @name DataTable.defaults.stateDuration
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "stateDuration": 60*60*24; // 1 day
     *      } );
     *    } )
     */
				"iStateDuration": 7200,

				/**
     * When enabled DataTables will not make a request to the server for the first
     * page draw - rather it will use the data already on the page (no sorting etc
     * will be applied to it), thus saving on an XHR at load time. `deferLoading`
     * is used to indicate that deferred loading is required, but it is also used
     * to tell DataTables how many records there are in the full table (allowing
     * the information element and pagination to be displayed correctly). In the case
     * where a filtering is applied to the table on initial load, this can be
     * indicated by giving the parameter as an array, where the first element is
     * the number of records available after filtering and the second element is the
     * number of records without filtering (allowing the table information element
     * to be shown correctly).
     *  @type int | array
     *  @default null
     *
     *  @dtopt Options
     *  @name DataTable.defaults.deferLoading
     *
     *  @example
     *    // 57 records available in the table, no filtering applied
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "serverSide": true,
     *        "ajax": "scripts/server_processing.php",
     *        "deferLoading": 57
     *      } );
     *    } );
     *
     *  @example
     *    // 57 records after filtering, 100 without filtering (an initial filter applied)
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "serverSide": true,
     *        "ajax": "scripts/server_processing.php",
     *        "deferLoading": [ 57, 100 ],
     *        "search": {
     *          "search": "my_filter"
     *        }
     *      } );
     *    } );
     */
				"iDeferLoading": null,

				/**
     * Number of rows to display on a single page when using pagination. If
     * feature enabled (`lengthChange`) then the end user will be able to override
     * this to a custom setting using a pop-up menu.
     *  @type int
     *  @default 10
     *
     *  @dtopt Options
     *  @name DataTable.defaults.pageLength
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "pageLength": 50
     *      } );
     *    } )
     */
				"iDisplayLength": 10,

				/**
     * Define the starting point for data display when using DataTables with
     * pagination. Note that this parameter is the number of records, rather than
     * the page number, so if you have 10 records per page and want to start on
     * the third page, it should be "20".
     *  @type int
     *  @default 0
     *
     *  @dtopt Options
     *  @name DataTable.defaults.displayStart
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "displayStart": 20
     *      } );
     *    } )
     */
				"iDisplayStart": 0,

				/**
     * By default DataTables allows keyboard navigation of the table (sorting, paging,
     * and filtering) by adding a `tabindex` attribute to the required elements. This
     * allows you to tab through the controls and press the enter key to activate them.
     * The tabindex is default 0, meaning that the tab follows the flow of the document.
     * You can overrule this using this parameter if you wish. Use a value of -1 to
     * disable built-in keyboard navigation.
     *  @type int
     *  @default 0
     *
     *  @dtopt Options
     *  @name DataTable.defaults.tabIndex
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "tabIndex": 1
     *      } );
     *    } );
     */
				"iTabIndex": 0,

				/**
     * Classes that DataTables assigns to the various components and features
     * that it adds to the HTML table. This allows classes to be configured
     * during initialisation in addition to through the static
     * {@link DataTable.ext.oStdClasses} object).
     *  @namespace
     *  @name DataTable.defaults.classes
     */
				"oClasses": {},

				/**
     * All strings that DataTables uses in the user interface that it creates
     * are defined in this object, allowing you to modified them individually or
     * completely replace them all as required.
     *  @namespace
     *  @name DataTable.defaults.language
     */
				"oLanguage": {
						/**
       * Strings that are used for WAI-ARIA labels and controls only (these are not
       * actually visible on the page, but will be read by screenreaders, and thus
       * must be internationalised as well).
       *  @namespace
       *  @name DataTable.defaults.language.aria
       */
						"oAria": {
								/**
         * ARIA label that is added to the table headers when the column may be
         * sorted ascending by activing the column (click or return when focused).
         * Note that the column header is prefixed to this string.
         *  @type string
         *  @default : activate to sort column ascending
         *
         *  @dtopt Language
         *  @name DataTable.defaults.language.aria.sortAscending
         *
         *  @example
         *    $(document).ready( function() {
         *      $('#example').dataTable( {
         *        "language": {
         *          "aria": {
         *            "sortAscending": " - click/return to sort ascending"
         *          }
         *        }
         *      } );
         *    } );
         */
								"sSortAscending": ": activate to sort column ascending",

								/**
         * ARIA label that is added to the table headers when the column may be
         * sorted descending by activing the column (click or return when focused).
         * Note that the column header is prefixed to this string.
         *  @type string
         *  @default : activate to sort column ascending
         *
         *  @dtopt Language
         *  @name DataTable.defaults.language.aria.sortDescending
         *
         *  @example
         *    $(document).ready( function() {
         *      $('#example').dataTable( {
         *        "language": {
         *          "aria": {
         *            "sortDescending": " - click/return to sort descending"
         *          }
         *        }
         *      } );
         *    } );
         */
								"sSortDescending": ": activate to sort column descending"
						},

						/**
       * Pagination string used by DataTables for the built-in pagination
       * control types.
       *  @namespace
       *  @name DataTable.defaults.language.paginate
       */
						"oPaginate": {
								/**
         * Text to use when using the 'full_numbers' type of pagination for the
         * button to take the user to the first page.
         *  @type string
         *  @default First
         *
         *  @dtopt Language
         *  @name DataTable.defaults.language.paginate.first
         *
         *  @example
         *    $(document).ready( function() {
         *      $('#example').dataTable( {
         *        "language": {
         *          "paginate": {
         *            "first": "First page"
         *          }
         *        }
         *      } );
         *    } );
         */
								"sFirst": "First",

								/**
         * Text to use when using the 'full_numbers' type of pagination for the
         * button to take the user to the last page.
         *  @type string
         *  @default Last
         *
         *  @dtopt Language
         *  @name DataTable.defaults.language.paginate.last
         *
         *  @example
         *    $(document).ready( function() {
         *      $('#example').dataTable( {
         *        "language": {
         *          "paginate": {
         *            "last": "Last page"
         *          }
         *        }
         *      } );
         *    } );
         */
								"sLast": "Last",

								/**
         * Text to use for the 'next' pagination button (to take the user to the
         * next page).
         *  @type string
         *  @default Next
         *
         *  @dtopt Language
         *  @name DataTable.defaults.language.paginate.next
         *
         *  @example
         *    $(document).ready( function() {
         *      $('#example').dataTable( {
         *        "language": {
         *          "paginate": {
         *            "next": "Next page"
         *          }
         *        }
         *      } );
         *    } );
         */
								"sNext": "Next",

								/**
         * Text to use for the 'previous' pagination button (to take the user to
         * the previous page).
         *  @type string
         *  @default Previous
         *
         *  @dtopt Language
         *  @name DataTable.defaults.language.paginate.previous
         *
         *  @example
         *    $(document).ready( function() {
         *      $('#example').dataTable( {
         *        "language": {
         *          "paginate": {
         *            "previous": "Previous page"
         *          }
         *        }
         *      } );
         *    } );
         */
								"sPrevious": "Previous"
						},

						/**
       * This string is shown in preference to `zeroRecords` when the table is
       * empty of data (regardless of filtering). Note that this is an optional
       * parameter - if it is not given, the value of `zeroRecords` will be used
       * instead (either the default or given value).
       *  @type string
       *  @default No data available in table
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.emptyTable
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "emptyTable": "No data available in table"
       *        }
       *      } );
       *    } );
       */
						"sEmptyTable": "No data available in table",

						/**
       * This string gives information to the end user about the information
       * that is current on display on the page. The following tokens can be
       * used in the string and will be dynamically replaced as the table
       * display updates. This tokens can be placed anywhere in the string, or
       * removed as needed by the language requires:
       *
       * * `\_START\_` - Display index of the first record on the current page
       * * `\_END\_` - Display index of the last record on the current page
       * * `\_TOTAL\_` - Number of records in the table after filtering
       * * `\_MAX\_` - Number of records in the table without filtering
       * * `\_PAGE\_` - Current page number
       * * `\_PAGES\_` - Total number of pages of data in the table
       *
       *  @type string
       *  @default Showing _START_ to _END_ of _TOTAL_ entries
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.info
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "info": "Showing page _PAGE_ of _PAGES_"
       *        }
       *      } );
       *    } );
       */
						"sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",

						/**
       * Display information string for when the table is empty. Typically the
       * format of this string should match `info`.
       *  @type string
       *  @default Showing 0 to 0 of 0 entries
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.infoEmpty
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "infoEmpty": "No entries to show"
       *        }
       *      } );
       *    } );
       */
						"sInfoEmpty": "Showing 0 to 0 of 0 entries",

						/**
       * When a user filters the information in a table, this string is appended
       * to the information (`info`) to give an idea of how strong the filtering
       * is. The variable _MAX_ is dynamically updated.
       *  @type string
       *  @default (filtered from _MAX_ total entries)
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.infoFiltered
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "infoFiltered": " - filtering from _MAX_ records"
       *        }
       *      } );
       *    } );
       */
						"sInfoFiltered": "(filtered from _MAX_ total entries)",

						/**
       * If can be useful to append extra information to the info string at times,
       * and this variable does exactly that. This information will be appended to
       * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are
       * being used) at all times.
       *  @type string
       *  @default <i>Empty string</i>
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.infoPostFix
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "infoPostFix": "All records shown are derived from real information."
       *        }
       *      } );
       *    } );
       */
						"sInfoPostFix": "",

						/**
       * This decimal place operator is a little different from the other
       * language options since DataTables doesn't output floating point
       * numbers, so it won't ever use this for display of a number. Rather,
       * what this parameter does is modify the sort methods of the table so
       * that numbers which are in a format which has a character other than
       * a period (`.`) as a decimal place will be sorted numerically.
       *
       * Note that numbers with different decimal places cannot be shown in
       * the same table and still be sortable, the table must be consistent.
       * However, multiple different tables on the page can use different
       * decimal place characters.
       *  @type string
       *  @default
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.decimal
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "decimal": ","
       *          "thousands": "."
       *        }
       *      } );
       *    } );
       */
						"sDecimal": "",

						/**
       * DataTables has a build in number formatter (`formatNumber`) which is
       * used to format large numbers that are used in the table information.
       * By default a comma is used, but this can be trivially changed to any
       * character you wish with this parameter.
       *  @type string
       *  @default ,
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.thousands
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "thousands": "'"
       *        }
       *      } );
       *    } );
       */
						"sThousands": ",",

						/**
       * Detail the action that will be taken when the drop down menu for the
       * pagination length option is changed. The '_MENU_' variable is replaced
       * with a default select list of 10, 25, 50 and 100, and can be replaced
       * with a custom select box if required.
       *  @type string
       *  @default Show _MENU_ entries
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.lengthMenu
       *
       *  @example
       *    // Language change only
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "lengthMenu": "Display _MENU_ records"
       *        }
       *      } );
       *    } );
       *
       *  @example
       *    // Language and options change
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "lengthMenu": 'Display <select>'+
       *            '<option value="10">10</option>'+
       *            '<option value="20">20</option>'+
       *            '<option value="30">30</option>'+
       *            '<option value="40">40</option>'+
       *            '<option value="50">50</option>'+
       *            '<option value="-1">All</option>'+
       *            '</select> records'
       *        }
       *      } );
       *    } );
       */
						"sLengthMenu": "Show _MENU_ entries",

						/**
       * When using Ajax sourced data and during the first draw when DataTables is
       * gathering the data, this message is shown in an empty row in the table to
       * indicate to the end user the the data is being loaded. Note that this
       * parameter is not used when loading data by server-side processing, just
       * Ajax sourced data with client-side processing.
       *  @type string
       *  @default Loading...
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.loadingRecords
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "loadingRecords": "Please wait - loading..."
       *        }
       *      } );
       *    } );
       */
						"sLoadingRecords": "Loading...",

						/**
       * Text which is displayed when the table is processing a user action
       * (usually a sort command or similar).
       *  @type string
       *  @default Processing...
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.processing
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "processing": "DataTables is currently busy"
       *        }
       *      } );
       *    } );
       */
						"sProcessing": "Processing...",

						/**
       * Details the actions that will be taken when the user types into the
       * filtering input text box. The variable "_INPUT_", if used in the string,
       * is replaced with the HTML text box for the filtering input allowing
       * control over where it appears in the string. If "_INPUT_" is not given
       * then the input box is appended to the string automatically.
       *  @type string
       *  @default Search:
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.search
       *
       *  @example
       *    // Input text box will be appended at the end automatically
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "search": "Filter records:"
       *        }
       *      } );
       *    } );
       *
       *  @example
       *    // Specify where the filter should appear
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "search": "Apply filter _INPUT_ to table"
       *        }
       *      } );
       *    } );
       */
						"sSearch": "Search:",

						/**
       * Assign a `placeholder` attribute to the search `input` element
       *  @type string
       *  @default
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.searchPlaceholder
       */
						"sSearchPlaceholder": "",

						/**
       * All of the language information can be stored in a file on the
       * server-side, which DataTables will look up if this parameter is passed.
       * It must store the URL of the language file, which is in a JSON format,
       * and the object has the same properties as the oLanguage object in the
       * initialiser object (i.e. the above parameters). Please refer to one of
       * the example language files to see how this works in action.
       *  @type string
       *  @default <i>Empty string - i.e. disabled</i>
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.url
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "url": "http://www.sprymedia.co.uk/dataTables/lang.txt"
       *        }
       *      } );
       *    } );
       */
						"sUrl": "",

						/**
       * Text shown inside the table records when the is no information to be
       * displayed after filtering. `emptyTable` is shown when there is simply no
       * information in the table at all (regardless of filtering).
       *  @type string
       *  @default No matching records found
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.zeroRecords
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "zeroRecords": "No records to display"
       *        }
       *      } );
       *    } );
       */
						"sZeroRecords": "No matching records found"
				},

				/**
     * This parameter allows you to have define the global filtering state at
     * initialisation time. As an object the `search` parameter must be
     * defined, but all other parameters are optional. When `regex` is true,
     * the search string will be treated as a regular expression, when false
     * (default) it will be treated as a straight string. When `smart`
     * DataTables will use it's smart filtering methods (to word match at
     * any point in the data), when false this will not be done.
     *  @namespace
     *  @extends DataTable.models.oSearch
     *
     *  @dtopt Options
     *  @name DataTable.defaults.search
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "search": {"search": "Initial search"}
     *      } );
     *    } )
     */
				"oSearch": $.extend({}, _DataTable.models.oSearch),

				/**
     * __Deprecated__ The functionality provided by this parameter has now been
     * superseded by that provided through `ajax`, which should be used instead.
     *
     * By default DataTables will look for the property `data` (or `aaData` for
     * compatibility with DataTables 1.9-) when obtaining data from an Ajax
     * source or for server-side processing - this parameter allows that
     * property to be changed. You can use Javascript dotted object notation to
     * get a data source for multiple levels of nesting.
     *  @type string
     *  @default data
     *
     *  @dtopt Options
     *  @dtopt Server-side
     *  @name DataTable.defaults.ajaxDataProp
     *
     *  @deprecated 1.10. Please use `ajax` for this functionality now.
     */
				"sAjaxDataProp": "data",

				/**
     * __Deprecated__ The functionality provided by this parameter has now been
     * superseded by that provided through `ajax`, which should be used instead.
     *
     * You can instruct DataTables to load data from an external
     * source using this parameter (use aData if you want to pass data in you
     * already have). Simply provide a url a JSON object can be obtained from.
     *  @type string
     *  @default null
     *
     *  @dtopt Options
     *  @dtopt Server-side
     *  @name DataTable.defaults.ajaxSource
     *
     *  @deprecated 1.10. Please use `ajax` for this functionality now.
     */
				"sAjaxSource": null,

				/**
     * This initialisation variable allows you to specify exactly where in the
     * DOM you want DataTables to inject the various controls it adds to the page
     * (for example you might want the pagination controls at the top of the
     * table). DIV elements (with or without a custom class) can also be added to
     * aid styling. The follow syntax is used:
     *   <ul>
     *     <li>The following options are allowed:
     *       <ul>
     *         <li>'l' - Length changing</li>
     *         <li>'f' - Filtering input</li>
     *         <li>'t' - The table!</li>
     *         <li>'i' - Information</li>
     *         <li>'p' - Pagination</li>
     *         <li>'r' - pRocessing</li>
     *       </ul>
     *     </li>
     *     <li>The following constants are allowed:
     *       <ul>
     *         <li>'H' - jQueryUI theme "header" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>
     *         <li>'F' - jQueryUI theme "footer" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>
     *       </ul>
     *     </li>
     *     <li>The following syntax is expected:
     *       <ul>
     *         <li>'&lt;' and '&gt;' - div elements</li>
     *         <li>'&lt;"class" and '&gt;' - div with a class</li>
     *         <li>'&lt;"#id" and '&gt;' - div with an ID</li>
     *       </ul>
     *     </li>
     *     <li>Examples:
     *       <ul>
     *         <li>'&lt;"wrapper"flipt&gt;'</li>
     *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>
     *       </ul>
     *     </li>
     *   </ul>
     *  @type string
     *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>
     *    <"H"lfr>t<"F"ip> <i>(when `jQueryUI` is true)</i>
     *
     *  @dtopt Options
     *  @name DataTable.defaults.dom
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "dom": '&lt;"top"i&gt;rt&lt;"bottom"flp&gt;&lt;"clear"&gt;'
     *      } );
     *    } );
     */
				"sDom": "lfrtip",

				/**
     * Search delay option. This will throttle full table searches that use the
     * DataTables provided search input element (it does not effect calls to
     * `dt-api search()`, providing a delay before the search is made.
     *  @type integer
     *  @default 0
     *
     *  @dtopt Options
     *  @name DataTable.defaults.searchDelay
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "searchDelay": 200
     *      } );
     *    } )
     */
				"searchDelay": null,

				/**
     * DataTables features four different built-in options for the buttons to
     * display for pagination control:
     *
     * * `simple` - 'Previous' and 'Next' buttons only
     * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers
     * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons
     * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus
     *   page numbers
     *
     * Further methods can be added using {@link DataTable.ext.oPagination}.
     *  @type string
     *  @default simple_numbers
     *
     *  @dtopt Options
     *  @name DataTable.defaults.pagingType
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "pagingType": "full_numbers"
     *      } );
     *    } )
     */
				"sPaginationType": "simple_numbers",

				/**
     * Enable horizontal scrolling. When a table is too wide to fit into a
     * certain layout, or you have a large number of columns in the table, you
     * can enable x-scrolling to show the table in a viewport, which can be
     * scrolled. This property can be `true` which will allow the table to
     * scroll horizontally when needed, or any CSS unit, or a number (in which
     * case it will be treated as a pixel measurement). Setting as simply `true`
     * is recommended.
     *  @type boolean|string
     *  @default <i>blank string - i.e. disabled</i>
     *
     *  @dtopt Features
     *  @name DataTable.defaults.scrollX
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "scrollX": true,
     *        "scrollCollapse": true
     *      } );
     *    } );
     */
				"sScrollX": "",

				/**
     * This property can be used to force a DataTable to use more width than it
     * might otherwise do when x-scrolling is enabled. For example if you have a
     * table which requires to be well spaced, this parameter is useful for
     * "over-sizing" the table, and thus forcing scrolling. This property can by
     * any CSS unit, or a number (in which case it will be treated as a pixel
     * measurement).
     *  @type string
     *  @default <i>blank string - i.e. disabled</i>
     *
     *  @dtopt Options
     *  @name DataTable.defaults.scrollXInner
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "scrollX": "100%",
     *        "scrollXInner": "110%"
     *      } );
     *    } );
     */
				"sScrollXInner": "",

				/**
     * Enable vertical scrolling. Vertical scrolling will constrain the DataTable
     * to the given height, and enable scrolling for any data which overflows the
     * current viewport. This can be used as an alternative to paging to display
     * a lot of data in a small area (although paging and scrolling can both be
     * enabled at the same time). This property can be any CSS unit, or a number
     * (in which case it will be treated as a pixel measurement).
     *  @type string
     *  @default <i>blank string - i.e. disabled</i>
     *
     *  @dtopt Features
     *  @name DataTable.defaults.scrollY
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "scrollY": "200px",
     *        "paginate": false
     *      } );
     *    } );
     */
				"sScrollY": "",

				/**
     * __Deprecated__ The functionality provided by this parameter has now been
     * superseded by that provided through `ajax`, which should be used instead.
     *
     * Set the HTTP method that is used to make the Ajax call for server-side
     * processing or Ajax sourced data.
     *  @type string
     *  @default GET
     *
     *  @dtopt Options
     *  @dtopt Server-side
     *  @name DataTable.defaults.serverMethod
     *
     *  @deprecated 1.10. Please use `ajax` for this functionality now.
     */
				"sServerMethod": "GET",

				/**
     * DataTables makes use of renderers when displaying HTML elements for
     * a table. These renderers can be added or modified by plug-ins to
     * generate suitable mark-up for a site. For example the Bootstrap
     * integration plug-in for DataTables uses a paging button renderer to
     * display pagination buttons in the mark-up required by Bootstrap.
     *
     * For further information about the renderers available see
     * DataTable.ext.renderer
     *  @type string|object
     *  @default null
     *
     *  @name DataTable.defaults.renderer
     *
     */
				"renderer": null,

				/**
     * Set the data property name that DataTables should use to get a row's id
     * to set as the `id` property in the node.
     *  @type string
     *  @default DT_RowId
     *
     *  @name DataTable.defaults.rowId
     */
				"rowId": "DT_RowId"
		};

		_fnHungarianMap(_DataTable.defaults);

		/*
   * Developer note - See note in model.defaults.js about the use of Hungarian
   * notation and camel case.
   */

		/**
   * Column options that can be given to DataTables at initialisation time.
   *  @namespace
   */
		_DataTable.defaults.column = {
				/**
     * Define which column(s) an order will occur on for this column. This
     * allows a column's ordering to take multiple columns into account when
     * doing a sort or use the data from a different column. For example first
     * name / last name columns make sense to do a multi-column sort over the
     * two columns.
     *  @type array|int
     *  @default null <i>Takes the value of the column index automatically</i>
     *
     *  @name DataTable.defaults.column.orderData
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          { "orderData": [ 0, 1 ], "targets": [ 0 ] },
     *          { "orderData": [ 1, 0 ], "targets": [ 1 ] },
     *          { "orderData": 2, "targets": [ 2 ] }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          { "orderData": [ 0, 1 ] },
     *          { "orderData": [ 1, 0 ] },
     *          { "orderData": 2 },
     *          null,
     *          null
     *        ]
     *      } );
     *    } );
     */
				"aDataSort": null,
				"iDataSort": -1,

				/**
     * You can control the default ordering direction, and even alter the
     * behaviour of the sort handler (i.e. only allow ascending ordering etc)
     * using this parameter.
     *  @type array
     *  @default [ 'asc', 'desc' ]
     *
     *  @name DataTable.defaults.column.orderSequence
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          { "orderSequence": [ "asc" ], "targets": [ 1 ] },
     *          { "orderSequence": [ "desc", "asc", "asc" ], "targets": [ 2 ] },
     *          { "orderSequence": [ "desc" ], "targets": [ 3 ] }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          null,
     *          { "orderSequence": [ "asc" ] },
     *          { "orderSequence": [ "desc", "asc", "asc" ] },
     *          { "orderSequence": [ "desc" ] },
     *          null
     *        ]
     *      } );
     *    } );
     */
				"asSorting": ['asc', 'desc'],

				/**
     * Enable or disable filtering on the data in this column.
     *  @type boolean
     *  @default true
     *
     *  @name DataTable.defaults.column.searchable
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          { "searchable": false, "targets": [ 0 ] }
     *        ] } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          { "searchable": false },
     *          null,
     *          null,
     *          null,
     *          null
     *        ] } );
     *    } );
     */
				"bSearchable": true,

				/**
     * Enable or disable ordering on this column.
     *  @type boolean
     *  @default true
     *
     *  @name DataTable.defaults.column.orderable
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          { "orderable": false, "targets": [ 0 ] }
     *        ] } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          { "orderable": false },
     *          null,
     *          null,
     *          null,
     *          null
     *        ] } );
     *    } );
     */
				"bSortable": true,

				/**
     * Enable or disable the display of this column.
     *  @type boolean
     *  @default true
     *
     *  @name DataTable.defaults.column.visible
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          { "visible": false, "targets": [ 0 ] }
     *        ] } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          { "visible": false },
     *          null,
     *          null,
     *          null,
     *          null
     *        ] } );
     *    } );
     */
				"bVisible": true,

				/**
     * Developer definable function that is called whenever a cell is created (Ajax source,
     * etc) or processed for input (DOM source). This can be used as a compliment to mRender
     * allowing you to modify the DOM element (add background colour for example) when the
     * element is available.
     *  @type function
     *  @param {element} td The TD node that has been created
     *  @param {*} cellData The Data for the cell
     *  @param {array|object} rowData The data for the whole row
     *  @param {int} row The row index for the aoData data store
     *  @param {int} col The column index for aoColumns
     *
     *  @name DataTable.defaults.column.createdCell
     *  @dtopt Columns
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [ {
     *          "targets": [3],
     *          "createdCell": function (td, cellData, rowData, row, col) {
     *            if ( cellData == "1.7" ) {
     *              $(td).css('color', 'blue')
     *            }
     *          }
     *        } ]
     *      });
     *    } );
     */
				"fnCreatedCell": null,

				/**
     * This parameter has been replaced by `data` in DataTables to ensure naming
     * consistency. `dataProp` can still be used, as there is backwards
     * compatibility in DataTables for this option, but it is strongly
     * recommended that you use `data` in preference to `dataProp`.
     *  @name DataTable.defaults.column.dataProp
     */

				/**
     * This property can be used to read data from any data source property,
     * including deeply nested objects / properties. `data` can be given in a
     * number of different ways which effect its behaviour:
     *
     * * `integer` - treated as an array index for the data source. This is the
     *   default that DataTables uses (incrementally increased for each column).
     * * `string` - read an object property from the data source. There are
     *   three 'special' options that can be used in the string to alter how
     *   DataTables reads the data from the source object:
     *    * `.` - Dotted Javascript notation. Just as you use a `.` in
     *      Javascript to read from nested objects, so to can the options
     *      specified in `data`. For example: `browser.version` or
     *      `browser.name`. If your object parameter name contains a period, use
     *      `\\` to escape it - i.e. `first\\.name`.
     *    * `[]` - Array notation. DataTables can automatically combine data
     *      from and array source, joining the data with the characters provided
     *      between the two brackets. For example: `name[, ]` would provide a
     *      comma-space separated list from the source array. If no characters
     *      are provided between the brackets, the original array source is
     *      returned.
     *    * `()` - Function notation. Adding `()` to the end of a parameter will
     *      execute a function of the name given. For example: `browser()` for a
     *      simple function on the data source, `browser.version()` for a
     *      function in a nested property or even `browser().version` to get an
     *      object property if the function called returns an object. Note that
     *      function notation is recommended for use in `render` rather than
     *      `data` as it is much simpler to use as a renderer.
     * * `null` - use the original data source for the row rather than plucking
     *   data directly from it. This action has effects on two other
     *   initialisation options:
     *    * `defaultContent` - When null is given as the `data` option and
     *      `defaultContent` is specified for the column, the value defined by
     *      `defaultContent` will be used for the cell.
     *    * `render` - When null is used for the `data` option and the `render`
     *      option is specified for the column, the whole data source for the
     *      row is used for the renderer.
     * * `function` - the function given will be executed whenever DataTables
     *   needs to set or get the data for a cell in the column. The function
     *   takes three parameters:
     *    * Parameters:
     *      * `{array|object}` The data source for the row
     *      * `{string}` The type call data requested - this will be 'set' when
     *        setting data or 'filter', 'display', 'type', 'sort' or undefined
     *        when gathering data. Note that when `undefined` is given for the
     *        type DataTables expects to get the raw data for the object back<
     *      * `{*}` Data to set when the second parameter is 'set'.
     *    * Return:
     *      * The return value from the function is not required when 'set' is
     *        the type of call, but otherwise the return is what will be used
     *        for the data requested.
     *
     * Note that `data` is a getter and setter option. If you just require
     * formatting of data for output, you will likely want to use `render` which
     * is simply a getter and thus simpler to use.
     *
     * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The
     * name change reflects the flexibility of this property and is consistent
     * with the naming of mRender. If 'mDataProp' is given, then it will still
     * be used by DataTables, as it automatically maps the old name to the new
     * if required.
     *
     *  @type string|int|function|null
     *  @default null <i>Use automatically calculated column index</i>
     *
     *  @name DataTable.defaults.column.data
     *  @dtopt Columns
     *
     *  @example
     *    // Read table data from objects
     *    // JSON structure for each row:
     *    //   {
     *    //      "engine": {value},
     *    //      "browser": {value},
     *    //      "platform": {value},
     *    //      "version": {value},
     *    //      "grade": {value}
     *    //   }
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "ajaxSource": "sources/objects.txt",
     *        "columns": [
     *          { "data": "engine" },
     *          { "data": "browser" },
     *          { "data": "platform" },
     *          { "data": "version" },
     *          { "data": "grade" }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Read information from deeply nested objects
     *    // JSON structure for each row:
     *    //   {
     *    //      "engine": {value},
     *    //      "browser": {value},
     *    //      "platform": {
     *    //         "inner": {value}
     *    //      },
     *    //      "details": [
     *    //         {value}, {value}
     *    //      ]
     *    //   }
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "ajaxSource": "sources/deep.txt",
     *        "columns": [
     *          { "data": "engine" },
     *          { "data": "browser" },
     *          { "data": "platform.inner" },
     *          { "data": "platform.details.0" },
     *          { "data": "platform.details.1" }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using `data` as a function to provide different information for
     *    // sorting, filtering and display. In this case, currency (price)
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [ {
     *          "targets": [ 0 ],
     *          "data": function ( source, type, val ) {
     *            if (type === 'set') {
     *              source.price = val;
     *              // Store the computed dislay and filter values for efficiency
     *              source.price_display = val=="" ? "" : "$"+numberFormat(val);
     *              source.price_filter  = val=="" ? "" : "$"+numberFormat(val)+" "+val;
     *              return;
     *            }
     *            else if (type === 'display') {
     *              return source.price_display;
     *            }
     *            else if (type === 'filter') {
     *              return source.price_filter;
     *            }
     *            // 'sort', 'type' and undefined all just use the integer
     *            return source.price;
     *          }
     *        } ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using default content
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [ {
     *          "targets": [ 0 ],
     *          "data": null,
     *          "defaultContent": "Click to edit"
     *        } ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using array notation - outputting a list from an array
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [ {
     *          "targets": [ 0 ],
     *          "data": "name[, ]"
     *        } ]
     *      } );
     *    } );
     *
     */
				"mData": null,

				/**
     * This property is the rendering partner to `data` and it is suggested that
     * when you want to manipulate data for display (including filtering,
     * sorting etc) without altering the underlying data for the table, use this
     * property. `render` can be considered to be the the read only companion to
     * `data` which is read / write (then as such more complex). Like `data`
     * this option can be given in a number of different ways to effect its
     * behaviour:
     *
     * * `integer` - treated as an array index for the data source. This is the
     *   default that DataTables uses (incrementally increased for each column).
     * * `string` - read an object property from the data source. There are
     *   three 'special' options that can be used in the string to alter how
     *   DataTables reads the data from the source object:
     *    * `.` - Dotted Javascript notation. Just as you use a `.` in
     *      Javascript to read from nested objects, so to can the options
     *      specified in `data`. For example: `browser.version` or
     *      `browser.name`. If your object parameter name contains a period, use
     *      `\\` to escape it - i.e. `first\\.name`.
     *    * `[]` - Array notation. DataTables can automatically combine data
     *      from and array source, joining the data with the characters provided
     *      between the two brackets. For example: `name[, ]` would provide a
     *      comma-space separated list from the source array. If no characters
     *      are provided between the brackets, the original array source is
     *      returned.
     *    * `()` - Function notation. Adding `()` to the end of a parameter will
     *      execute a function of the name given. For example: `browser()` for a
     *      simple function on the data source, `browser.version()` for a
     *      function in a nested property or even `browser().version` to get an
     *      object property if the function called returns an object.
     * * `object` - use different data for the different data types requested by
     *   DataTables ('filter', 'display', 'type' or 'sort'). The property names
     *   of the object is the data type the property refers to and the value can
     *   defined using an integer, string or function using the same rules as
     *   `render` normally does. Note that an `_` option _must_ be specified.
     *   This is the default value to use if you haven't specified a value for
     *   the data type requested by DataTables.
     * * `function` - the function given will be executed whenever DataTables
     *   needs to set or get the data for a cell in the column. The function
     *   takes three parameters:
     *    * Parameters:
     *      * {array|object} The data source for the row (based on `data`)
     *      * {string} The type call data requested - this will be 'filter',
     *        'display', 'type' or 'sort'.
     *      * {array|object} The full data source for the row (not based on
     *        `data`)
     *    * Return:
     *      * The return value from the function is what will be used for the
     *        data requested.
     *
     *  @type string|int|function|object|null
     *  @default null Use the data source value.
     *
     *  @name DataTable.defaults.column.render
     *  @dtopt Columns
     *
     *  @example
     *    // Create a comma separated list from an array of objects
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "ajaxSource": "sources/deep.txt",
     *        "columns": [
     *          { "data": "engine" },
     *          { "data": "browser" },
     *          {
     *            "data": "platform",
     *            "render": "[, ].name"
     *          }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Execute a function to obtain data
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [ {
     *          "targets": [ 0 ],
     *          "data": null, // Use the full data source object for the renderer's source
     *          "render": "browserName()"
     *        } ]
     *      } );
     *    } );
     *
     *  @example
     *    // As an object, extracting different data for the different types
     *    // This would be used with a data source such as:
     *    //   { "phone": 5552368, "phone_filter": "5552368 555-2368", "phone_display": "555-2368" }
     *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`
     *    // (which has both forms) is used for filtering for if a user inputs either format, while
     *    // the formatted phone number is the one that is shown in the table.
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [ {
     *          "targets": [ 0 ],
     *          "data": null, // Use the full data source object for the renderer's source
     *          "render": {
     *            "_": "phone",
     *            "filter": "phone_filter",
     *            "display": "phone_display"
     *          }
     *        } ]
     *      } );
     *    } );
     *
     *  @example
     *    // Use as a function to create a link from the data source
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [ {
     *          "targets": [ 0 ],
     *          "data": "download_link",
     *          "render": function ( data, type, full ) {
     *            return '<a href="'+data+'">Download</a>';
     *          }
     *        } ]
     *      } );
     *    } );
     */
				"mRender": null,

				/**
     * Change the cell type created for the column - either TD cells or TH cells. This
     * can be useful as TH cells have semantic meaning in the table body, allowing them
     * to act as a header for a row (you may wish to add scope='row' to the TH elements).
     *  @type string
     *  @default td
     *
     *  @name DataTable.defaults.column.cellType
     *  @dtopt Columns
     *
     *  @example
     *    // Make the first column use TH cells
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [ {
     *          "targets": [ 0 ],
     *          "cellType": "th"
     *        } ]
     *      } );
     *    } );
     */
				"sCellType": "td",

				/**
     * Class to give to each cell in this column.
     *  @type string
     *  @default <i>Empty string</i>
     *
     *  @name DataTable.defaults.column.class
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          { "class": "my_class", "targets": [ 0 ] }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          { "class": "my_class" },
     *          null,
     *          null,
     *          null,
     *          null
     *        ]
     *      } );
     *    } );
     */
				"sClass": "",

				/**
     * When DataTables calculates the column widths to assign to each column,
     * it finds the longest string in each column and then constructs a
     * temporary table and reads the widths from that. The problem with this
     * is that "mmm" is much wider then "iiii", but the latter is a longer
     * string - thus the calculation can go wrong (doing it properly and putting
     * it into an DOM object and measuring that is horribly(!) slow). Thus as
     * a "work around" we provide this option. It will append its value to the
     * text that is found to be the longest string for the column - i.e. padding.
     * Generally you shouldn't need this!
     *  @type string
     *  @default <i>Empty string<i>
     *
     *  @name DataTable.defaults.column.contentPadding
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          null,
     *          null,
     *          null,
     *          {
     *            "contentPadding": "mmm"
     *          }
     *        ]
     *      } );
     *    } );
     */
				"sContentPadding": "",

				/**
     * Allows a default value to be given for a column's data, and will be used
     * whenever a null data source is encountered (this can be because `data`
     * is set to null, or because the data source itself is null).
     *  @type string
     *  @default null
     *
     *  @name DataTable.defaults.column.defaultContent
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          {
     *            "data": null,
     *            "defaultContent": "Edit",
     *            "targets": [ -1 ]
     *          }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          null,
     *          null,
     *          null,
     *          {
     *            "data": null,
     *            "defaultContent": "Edit"
     *          }
     *        ]
     *      } );
     *    } );
     */
				"sDefaultContent": null,

				/**
     * This parameter is only used in DataTables' server-side processing. It can
     * be exceptionally useful to know what columns are being displayed on the
     * client side, and to map these to database fields. When defined, the names
     * also allow DataTables to reorder information from the server if it comes
     * back in an unexpected order (i.e. if you switch your columns around on the
     * client-side, your server-side code does not also need updating).
     *  @type string
     *  @default <i>Empty string</i>
     *
     *  @name DataTable.defaults.column.name
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          { "name": "engine", "targets": [ 0 ] },
     *          { "name": "browser", "targets": [ 1 ] },
     *          { "name": "platform", "targets": [ 2 ] },
     *          { "name": "version", "targets": [ 3 ] },
     *          { "name": "grade", "targets": [ 4 ] }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          { "name": "engine" },
     *          { "name": "browser" },
     *          { "name": "platform" },
     *          { "name": "version" },
     *          { "name": "grade" }
     *        ]
     *      } );
     *    } );
     */
				"sName": "",

				/**
     * Defines a data source type for the ordering which can be used to read
     * real-time information from the table (updating the internally cached
     * version) prior to ordering. This allows ordering to occur on user
     * editable elements such as form inputs.
     *  @type string
     *  @default std
     *
     *  @name DataTable.defaults.column.orderDataType
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          { "orderDataType": "dom-text", "targets": [ 2, 3 ] },
     *          { "type": "numeric", "targets": [ 3 ] },
     *          { "orderDataType": "dom-select", "targets": [ 4 ] },
     *          { "orderDataType": "dom-checkbox", "targets": [ 5 ] }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          null,
     *          null,
     *          { "orderDataType": "dom-text" },
     *          { "orderDataType": "dom-text", "type": "numeric" },
     *          { "orderDataType": "dom-select" },
     *          { "orderDataType": "dom-checkbox" }
     *        ]
     *      } );
     *    } );
     */
				"sSortDataType": "std",

				/**
     * The title of this column.
     *  @type string
     *  @default null <i>Derived from the 'TH' value for this column in the
     *    original HTML table.</i>
     *
     *  @name DataTable.defaults.column.title
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          { "title": "My column title", "targets": [ 0 ] }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          { "title": "My column title" },
     *          null,
     *          null,
     *          null,
     *          null
     *        ]
     *      } );
     *    } );
     */
				"sTitle": null,

				/**
     * The type allows you to specify how the data for this column will be
     * ordered. Four types (string, numeric, date and html (which will strip
     * HTML tags before ordering)) are currently available. Note that only date
     * formats understood by Javascript's Date() object will be accepted as type
     * date. For example: "Mar 26, 2008 5:03 PM". May take the values: 'string',
     * 'numeric', 'date' or 'html' (by default). Further types can be adding
     * through plug-ins.
     *  @type string
     *  @default null <i>Auto-detected from raw data</i>
     *
     *  @name DataTable.defaults.column.type
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          { "type": "html", "targets": [ 0 ] }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          { "type": "html" },
     *          null,
     *          null,
     *          null,
     *          null
     *        ]
     *      } );
     *    } );
     */
				"sType": null,

				/**
     * Defining the width of the column, this parameter may take any CSS value
     * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not
     * been given a specific width through this interface ensuring that the table
     * remains readable.
     *  @type string
     *  @default null <i>Automatic</i>
     *
     *  @name DataTable.defaults.column.width
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          { "width": "20%", "targets": [ 0 ] }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          { "width": "20%" },
     *          null,
     *          null,
     *          null,
     *          null
     *        ]
     *      } );
     *    } );
     */
				"sWidth": null
		};

		_fnHungarianMap(_DataTable.defaults.column);

		/**
   * DataTables settings object - this holds all the information needed for a
   * given table, including configuration, data and current application of the
   * table options. DataTables does not have a single instance for each DataTable
   * with the settings attached to that instance, but rather instances of the
   * DataTable "class" are created on-the-fly as needed (typically by a
   * $().dataTable() call) and the settings object is then applied to that
   * instance.
   *
   * Note that this object is related to {@link DataTable.defaults} but this
   * one is the internal data store for DataTables's cache of columns. It should
   * NOT be manipulated outside of DataTables. Any configuration should be done
   * through the initialisation options.
   *  @namespace
   *  @todo Really should attach the settings object to individual instances so we
   *    don't need to create new instances on each $().dataTable() call (if the
   *    table already exists). It would also save passing oSettings around and
   *    into every single function. However, this is a very significant
   *    architecture change for DataTables and will almost certainly break
   *    backwards compatibility with older installations. This is something that
   *    will be done in 2.0.
   */
		_DataTable.models.oSettings = {
				/**
     * Primary features of DataTables and their enablement state.
     *  @namespace
     */
				"oFeatures": {

						/**
       * Flag to say if DataTables should automatically try to calculate the
       * optimum table and columns widths (true) or not (false).
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
						"bAutoWidth": null,

						/**
       * Delay the creation of TR and TD elements until they are actually
       * needed by a driven page draw. This can give a significant speed
       * increase for Ajax source and Javascript source data, but makes no
       * difference at all fro DOM and server-side processing tables.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
						"bDeferRender": null,

						/**
       * Enable filtering on the table or not. Note that if this is disabled
       * then there is no filtering at all on the table, including fnFilter.
       * To just remove the filtering input use sDom and remove the 'f' option.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
						"bFilter": null,

						/**
       * Table information element (the 'Showing x of y records' div) enable
       * flag.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
						"bInfo": null,

						/**
       * Present a user control allowing the end user to change the page size
       * when pagination is enabled.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
						"bLengthChange": null,

						/**
       * Pagination enabled or not. Note that if this is disabled then length
       * changing must also be disabled.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
						"bPaginate": null,

						/**
       * Processing indicator enable flag whenever DataTables is enacting a
       * user request - typically an Ajax request for server-side processing.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
						"bProcessing": null,

						/**
       * Server-side processing enabled flag - when enabled DataTables will
       * get all data from the server for every draw - there is no filtering,
       * sorting or paging done on the client-side.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
						"bServerSide": null,

						/**
       * Sorting enablement flag.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
						"bSort": null,

						/**
       * Multi-column sorting
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
						"bSortMulti": null,

						/**
       * Apply a class to the columns which are being sorted to provide a
       * visual highlight or not. This can slow things down when enabled since
       * there is a lot of DOM interaction.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
						"bSortClasses": null,

						/**
       * State saving enablement flag.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
						"bStateSave": null
				},

				/**
     * Scrolling settings for a table.
     *  @namespace
     */
				"oScroll": {
						/**
       * When the table is shorter in height than sScrollY, collapse the
       * table container down to the height of the table (when true).
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
						"bCollapse": null,

						/**
       * Width of the scrollbar for the web-browser's platform. Calculated
       * during table initialisation.
       *  @type int
       *  @default 0
       */
						"iBarWidth": 0,

						/**
       * Viewport width for horizontal scrolling. Horizontal scrolling is
       * disabled if an empty string.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type string
       */
						"sX": null,

						/**
       * Width to expand the table to when using x-scrolling. Typically you
       * should not need to use this.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type string
       *  @deprecated
       */
						"sXInner": null,

						/**
       * Viewport height for vertical scrolling. Vertical scrolling is disabled
       * if an empty string.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type string
       */
						"sY": null
				},

				/**
     * Language information for the table.
     *  @namespace
     *  @extends DataTable.defaults.oLanguage
     */
				"oLanguage": {
						/**
       * Information callback function. See
       * {@link DataTable.defaults.fnInfoCallback}
       *  @type function
       *  @default null
       */
						"fnInfoCallback": null
				},

				/**
     * Browser support parameters
     *  @namespace
     */
				"oBrowser": {
						/**
       * Indicate if the browser incorrectly calculates width:100% inside a
       * scrolling element (IE6/7)
       *  @type boolean
       *  @default false
       */
						"bScrollOversize": false,

						/**
       * Determine if the vertical scrollbar is on the right or left of the
       * scrolling container - needed for rtl language layout, although not
       * all browsers move the scrollbar (Safari).
       *  @type boolean
       *  @default false
       */
						"bScrollbarLeft": false,

						/**
       * Flag for if `getBoundingClientRect` is fully supported or not
       *  @type boolean
       *  @default false
       */
						"bBounding": false,

						/**
       * Browser scrollbar width
       *  @type integer
       *  @default 0
       */
						"barWidth": 0
				},

				"ajax": null,

				/**
     * Array referencing the nodes which are used for the features. The
     * parameters of this object match what is allowed by sDom - i.e.
     *   <ul>
     *     <li>'l' - Length changing</li>
     *     <li>'f' - Filtering input</li>
     *     <li>'t' - The table!</li>
     *     <li>'i' - Information</li>
     *     <li>'p' - Pagination</li>
     *     <li>'r' - pRocessing</li>
     *   </ul>
     *  @type array
     *  @default []
     */
				"aanFeatures": [],

				/**
     * Store data information - see {@link DataTable.models.oRow} for detailed
     * information.
     *  @type array
     *  @default []
     */
				"aoData": [],

				/**
     * Array of indexes which are in the current display (after filtering etc)
     *  @type array
     *  @default []
     */
				"aiDisplay": [],

				/**
     * Array of indexes for display - no filtering
     *  @type array
     *  @default []
     */
				"aiDisplayMaster": [],

				/**
     * Map of row ids to data indexes
     *  @type object
     *  @default {}
     */
				"aIds": {},

				/**
     * Store information about each column that is in use
     *  @type array
     *  @default []
     */
				"aoColumns": [],

				/**
     * Store information about the table's header
     *  @type array
     *  @default []
     */
				"aoHeader": [],

				/**
     * Store information about the table's footer
     *  @type array
     *  @default []
     */
				"aoFooter": [],

				/**
     * Store the applied global search information in case we want to force a
     * research or compare the old search to a new one.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @namespace
     *  @extends DataTable.models.oSearch
     */
				"oPreviousSearch": {},

				/**
     * Store the applied search for each column - see
     * {@link DataTable.models.oSearch} for the format that is used for the
     * filtering information for each column.
     *  @type array
     *  @default []
     */
				"aoPreSearchCols": [],

				/**
     * Sorting that is applied to the table. Note that the inner arrays are
     * used in the following manner:
     * <ul>
     *   <li>Index 0 - column number</li>
     *   <li>Index 1 - current sorting direction</li>
     * </ul>
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type array
     *  @todo These inner arrays should really be objects
     */
				"aaSorting": null,

				/**
     * Sorting that is always applied to the table (i.e. prefixed in front of
     * aaSorting).
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type array
     *  @default []
     */
				"aaSortingFixed": [],

				/**
     * Classes to use for the striping of a table.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type array
     *  @default []
     */
				"asStripeClasses": null,

				/**
     * If restoring a table - we should restore its striping classes as well
     *  @type array
     *  @default []
     */
				"asDestroyStripes": [],

				/**
     * If restoring a table - we should restore its width
     *  @type int
     *  @default 0
     */
				"sDestroyWidth": 0,

				/**
     * Callback functions array for every time a row is inserted (i.e. on a draw).
     *  @type array
     *  @default []
     */
				"aoRowCallback": [],

				/**
     * Callback functions for the header on each draw.
     *  @type array
     *  @default []
     */
				"aoHeaderCallback": [],

				/**
     * Callback function for the footer on each draw.
     *  @type array
     *  @default []
     */
				"aoFooterCallback": [],

				/**
     * Array of callback functions for draw callback functions
     *  @type array
     *  @default []
     */
				"aoDrawCallback": [],

				/**
     * Array of callback functions for row created function
     *  @type array
     *  @default []
     */
				"aoRowCreatedCallback": [],

				/**
     * Callback functions for just before the table is redrawn. A return of
     * false will be used to cancel the draw.
     *  @type array
     *  @default []
     */
				"aoPreDrawCallback": [],

				/**
     * Callback functions for when the table has been initialised.
     *  @type array
     *  @default []
     */
				"aoInitComplete": [],

				/**
     * Callbacks for modifying the settings to be stored for state saving, prior to
     * saving state.
     *  @type array
     *  @default []
     */
				"aoStateSaveParams": [],

				/**
     * Callbacks for modifying the settings that have been stored for state saving
     * prior to using the stored values to restore the state.
     *  @type array
     *  @default []
     */
				"aoStateLoadParams": [],

				/**
     * Callbacks for operating on the settings object once the saved state has been
     * loaded
     *  @type array
     *  @default []
     */
				"aoStateLoaded": [],

				/**
     * Cache the table ID for quick access
     *  @type string
     *  @default <i>Empty string</i>
     */
				"sTableId": "",

				/**
     * The TABLE node for the main table
     *  @type node
     *  @default null
     */
				"nTable": null,

				/**
     * Permanent ref to the thead element
     *  @type node
     *  @default null
     */
				"nTHead": null,

				/**
     * Permanent ref to the tfoot element - if it exists
     *  @type node
     *  @default null
     */
				"nTFoot": null,

				/**
     * Permanent ref to the tbody element
     *  @type node
     *  @default null
     */
				"nTBody": null,

				/**
     * Cache the wrapper node (contains all DataTables controlled elements)
     *  @type node
     *  @default null
     */
				"nTableWrapper": null,

				/**
     * Indicate if when using server-side processing the loading of data
     * should be deferred until the second draw.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type boolean
     *  @default false
     */
				"bDeferLoading": false,

				/**
     * Indicate if all required information has been read in
     *  @type boolean
     *  @default false
     */
				"bInitialised": false,

				/**
     * Information about open rows. Each object in the array has the parameters
     * 'nTr' and 'nParent'
     *  @type array
     *  @default []
     */
				"aoOpenRows": [],

				/**
     * Dictate the positioning of DataTables' control elements - see
     * {@link DataTable.model.oInit.sDom}.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type string
     *  @default null
     */
				"sDom": null,

				/**
     * Search delay (in mS)
     *  @type integer
     *  @default null
     */
				"searchDelay": null,

				/**
     * Which type of pagination should be used.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type string
     *  @default two_button
     */
				"sPaginationType": "two_button",

				/**
     * The state duration (for `stateSave`) in seconds.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type int
     *  @default 0
     */
				"iStateDuration": 0,

				/**
     * Array of callback functions for state saving. Each array element is an
     * object with the following parameters:
     *   <ul>
     *     <li>function:fn - function to call. Takes two parameters, oSettings
     *       and the JSON string to save that has been thus far created. Returns
     *       a JSON string to be inserted into a json object
     *       (i.e. '"param": [ 0, 1, 2]')</li>
     *     <li>string:sName - name of callback</li>
     *   </ul>
     *  @type array
     *  @default []
     */
				"aoStateSave": [],

				/**
     * Array of callback functions for state loading. Each array element is an
     * object with the following parameters:
     *   <ul>
     *     <li>function:fn - function to call. Takes two parameters, oSettings
     *       and the object stored. May return false to cancel state loading</li>
     *     <li>string:sName - name of callback</li>
     *   </ul>
     *  @type array
     *  @default []
     */
				"aoStateLoad": [],

				/**
     * State that was saved. Useful for back reference
     *  @type object
     *  @default null
     */
				"oSavedState": null,

				/**
     * State that was loaded. Useful for back reference
     *  @type object
     *  @default null
     */
				"oLoadedState": null,

				/**
     * Source url for AJAX data for the table.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type string
     *  @default null
     */
				"sAjaxSource": null,

				/**
     * Property from a given object from which to read the table data from. This
     * can be an empty string (when not server-side processing), in which case
     * it is  assumed an an array is given directly.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type string
     */
				"sAjaxDataProp": null,

				/**
     * Note if draw should be blocked while getting data
     *  @type boolean
     *  @default true
     */
				"bAjaxDataGet": true,

				/**
     * The last jQuery XHR object that was used for server-side data gathering.
     * This can be used for working with the XHR information in one of the
     * callbacks
     *  @type object
     *  @default null
     */
				"jqXHR": null,

				/**
     * JSON returned from the server in the last Ajax request
     *  @type object
     *  @default undefined
     */
				"json": undefined,

				/**
     * Data submitted as part of the last Ajax request
     *  @type object
     *  @default undefined
     */
				"oAjaxData": undefined,

				/**
     * Function to get the server-side data.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type function
     */
				"fnServerData": null,

				/**
     * Functions which are called prior to sending an Ajax request so extra
     * parameters can easily be sent to the server
     *  @type array
     *  @default []
     */
				"aoServerParams": [],

				/**
     * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if
     * required).
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type string
     */
				"sServerMethod": null,

				/**
     * Format numbers for display.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type function
     */
				"fnFormatNumber": null,

				/**
     * List of options that can be used for the user selectable length menu.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type array
     *  @default []
     */
				"aLengthMenu": null,

				/**
     * Counter for the draws that the table does. Also used as a tracker for
     * server-side processing
     *  @type int
     *  @default 0
     */
				"iDraw": 0,

				/**
     * Indicate if a redraw is being done - useful for Ajax
     *  @type boolean
     *  @default false
     */
				"bDrawing": false,

				/**
     * Draw index (iDraw) of the last error when parsing the returned data
     *  @type int
     *  @default -1
     */
				"iDrawError": -1,

				/**
     * Paging display length
     *  @type int
     *  @default 10
     */
				"_iDisplayLength": 10,

				/**
     * Paging start point - aiDisplay index
     *  @type int
     *  @default 0
     */
				"_iDisplayStart": 0,

				/**
     * Server-side processing - number of records in the result set
     * (i.e. before filtering), Use fnRecordsTotal rather than
     * this property to get the value of the number of records, regardless of
     * the server-side processing setting.
     *  @type int
     *  @default 0
     *  @private
     */
				"_iRecordsTotal": 0,

				/**
     * Server-side processing - number of records in the current display set
     * (i.e. after filtering). Use fnRecordsDisplay rather than
     * this property to get the value of the number of records, regardless of
     * the server-side processing setting.
     *  @type boolean
     *  @default 0
     *  @private
     */
				"_iRecordsDisplay": 0,

				/**
     * Flag to indicate if jQuery UI marking and classes should be used.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type boolean
     */
				"bJUI": null,

				/**
     * The classes to use for the table
     *  @type object
     *  @default {}
     */
				"oClasses": {},

				/**
     * Flag attached to the settings object so you can check in the draw
     * callback if filtering has been done in the draw. Deprecated in favour of
     * events.
     *  @type boolean
     *  @default false
     *  @deprecated
     */
				"bFiltered": false,

				/**
     * Flag attached to the settings object so you can check in the draw
     * callback if sorting has been done in the draw. Deprecated in favour of
     * events.
     *  @type boolean
     *  @default false
     *  @deprecated
     */
				"bSorted": false,

				/**
     * Indicate that if multiple rows are in the header and there is more than
     * one unique cell per column, if the top one (true) or bottom one (false)
     * should be used for sorting / title by DataTables.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type boolean
     */
				"bSortCellsTop": null,

				/**
     * Initialisation object that is used for the table
     *  @type object
     *  @default null
     */
				"oInit": null,

				/**
     * Destroy callback functions - for plug-ins to attach themselves to the
     * destroy so they can clean up markup and events.
     *  @type array
     *  @default []
     */
				"aoDestroyCallback": [],

				/**
     * Get the number of records in the current record set, before filtering
     *  @type function
     */
				"fnRecordsTotal": function fnRecordsTotal() {
						return _fnDataSource(this) == 'ssp' ? this._iRecordsTotal * 1 : this.aiDisplayMaster.length;
				},

				/**
     * Get the number of records in the current record set, after filtering
     *  @type function
     */
				"fnRecordsDisplay": function fnRecordsDisplay() {
						return _fnDataSource(this) == 'ssp' ? this._iRecordsDisplay * 1 : this.aiDisplay.length;
				},

				/**
     * Get the display end point - aiDisplay index
     *  @type function
     */
				"fnDisplayEnd": function fnDisplayEnd() {
						var len = this._iDisplayLength,
						    start = this._iDisplayStart,
						    calc = start + len,
						    records = this.aiDisplay.length,
						    features = this.oFeatures,
						    paginate = features.bPaginate;

						if (features.bServerSide) {
								return paginate === false || len === -1 ? start + records : Math.min(start + len, this._iRecordsDisplay);
						} else {
								return !paginate || calc > records || len === -1 ? records : calc;
						}
				},

				/**
     * The DataTables object for this table
     *  @type object
     *  @default null
     */
				"oInstance": null,

				/**
     * Unique identifier for each instance of the DataTables object. If there
     * is an ID on the table node, then it takes that value, otherwise an
     * incrementing internal counter is used.
     *  @type string
     *  @default null
     */
				"sInstance": null,

				/**
     * tabindex attribute value that is added to DataTables control elements, allowing
     * keyboard navigation of the table and its controls.
     */
				"iTabIndex": 0,

				/**
     * DIV container for the footer scrolling table if scrolling
     */
				"nScrollHead": null,

				/**
     * DIV container for the footer scrolling table if scrolling
     */
				"nScrollFoot": null,

				/**
     * Last applied sort
     *  @type array
     *  @default []
     */
				"aLastSort": [],

				/**
     * Stored plug-in instances
     *  @type object
     *  @default {}
     */
				"oPlugins": {},

				/**
     * Function used to get a row's id from the row's data
     *  @type function
     *  @default null
     */
				"rowIdFn": null,

				/**
     * Data location where to store a row's id
     *  @type string
     *  @default null
     */
				"rowId": null
		};

		/**
   * Extension object for DataTables that is used to provide all extension
   * options.
   *
   * Note that the `DataTable.ext` object is available through
   * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is
   * also aliased to `jQuery.fn.dataTableExt` for historic reasons.
   *  @namespace
   *  @extends DataTable.models.ext
   */

		/**
   * DataTables extensions
   *
   * This namespace acts as a collection area for plug-ins that can be used to
   * extend DataTables capabilities. Indeed many of the build in methods
   * use this method to provide their own capabilities (sorting methods for
   * example).
   *
   * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy
   * reasons
   *
   *  @namespace
   */
		_DataTable.ext = _ext = {
				/**
     * Buttons. For use with the Buttons extension for DataTables. This is
     * defined here so other extensions can define buttons regardless of load
     * order. It is _not_ used by DataTables core.
     *
     *  @type object
     *  @default {}
     */
				buttons: {},

				/**
     * Element class names
     *
     *  @type object
     *  @default {}
     */
				classes: {},

				/**
     * DataTables build type (expanded by the download builder)
     *
     *  @type string
     */
				builder: "-source-",

				/**
     * Error reporting.
     *
     * How should DataTables report an error. Can take the value 'alert',
     * 'throw', 'none' or a function.
     *
     *  @type string|function
     *  @default alert
     */
				errMode: "alert",

				/**
     * Feature plug-ins.
     *
     * This is an array of objects which describe the feature plug-ins that are
     * available to DataTables. These feature plug-ins are then available for
     * use through the `dom` initialisation option.
     *
     * Each feature plug-in is described by an object which must have the
     * following properties:
     *
     * * `fnInit` - function that is used to initialise the plug-in,
     * * `cFeature` - a character so the feature can be enabled by the `dom`
     *   instillation option. This is case sensitive.
     *
     * The `fnInit` function has the following input parameters:
     *
     * 1. `{object}` DataTables settings object: see
     *    {@link DataTable.models.oSettings}
     *
     * And the following return is expected:
     *
     * * {node|null} The element which contains your feature. Note that the
     *   return may also be void if your plug-in does not require to inject any
     *   DOM elements into DataTables control (`dom`) - for example this might
     *   be useful when developing a plug-in which allows table control via
     *   keyboard entry
     *
     *  @type array
     *
     *  @example
     *    $.fn.dataTable.ext.features.push( {
     *      "fnInit": function( oSettings ) {
     *        return new TableTools( { "oDTSettings": oSettings } );
     *      },
     *      "cFeature": "T"
     *    } );
     */
				feature: [],

				/**
     * Row searching.
     *
     * This method of searching is complimentary to the default type based
     * searching, and a lot more comprehensive as it allows you complete control
     * over the searching logic. Each element in this array is a function
     * (parameters described below) that is called for every row in the table,
     * and your logic decides if it should be included in the searching data set
     * or not.
     *
     * Searching functions have the following input parameters:
     *
     * 1. `{object}` DataTables settings object: see
     *    {@link DataTable.models.oSettings}
     * 2. `{array|object}` Data for the row to be processed (same as the
     *    original format that was passed in as the data source, or an array
     *    from a DOM data source
     * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which
     *    can be useful to retrieve the `TR` element if you need DOM interaction.
     *
     * And the following return is expected:
     *
     * * {boolean} Include the row in the searched result set (true) or not
     *   (false)
     *
     * Note that as with the main search ability in DataTables, technically this
     * is "filtering", since it is subtractive. However, for consistency in
     * naming we call it searching here.
     *
     *  @type array
     *  @default []
     *
     *  @example
     *    // The following example shows custom search being applied to the
     *    // fourth column (i.e. the data[3] index) based on two input values
     *    // from the end-user, matching the data in a certain range.
     *    $.fn.dataTable.ext.search.push(
     *      function( settings, data, dataIndex ) {
     *        var min = document.getElementById('min').value * 1;
     *        var max = document.getElementById('max').value * 1;
     *        var version = data[3] == "-" ? 0 : data[3]*1;
     *
     *        if ( min == "" && max == "" ) {
     *          return true;
     *        }
     *        else if ( min == "" && version < max ) {
     *          return true;
     *        }
     *        else if ( min < version && "" == max ) {
     *          return true;
     *        }
     *        else if ( min < version && version < max ) {
     *          return true;
     *        }
     *        return false;
     *      }
     *    );
     */
				search: [],

				/**
     * Selector extensions
     *
     * The `selector` option can be used to extend the options available for the
     * selector modifier options (`selector-modifier` object data type) that
     * each of the three built in selector types offer (row, column and cell +
     * their plural counterparts). For example the Select extension uses this
     * mechanism to provide an option to select only rows, columns and cells
     * that have been marked as selected by the end user (`{selected: true}`),
     * which can be used in conjunction with the existing built in selector
     * options.
     *
     * Each property is an array to which functions can be pushed. The functions
     * take three attributes:
     *
     * * Settings object for the host table
     * * Options object (`selector-modifier` object type)
     * * Array of selected item indexes
     *
     * The return is an array of the resulting item indexes after the custom
     * selector has been applied.
     *
     *  @type object
     */
				selector: {
						cell: [],
						column: [],
						row: []
				},

				/**
     * Internal functions, exposed for used in plug-ins.
     *
     * Please note that you should not need to use the internal methods for
     * anything other than a plug-in (and even then, try to avoid if possible).
     * The internal function may change between releases.
     *
     *  @type object
     *  @default {}
     */
				internal: {},

				/**
     * Legacy configuration options. Enable and disable legacy options that
     * are available in DataTables.
     *
     *  @type object
     */
				legacy: {
						/**
       * Enable / disable DataTables 1.9 compatible server-side processing
       * requests
       *
       *  @type boolean
       *  @default null
       */
						ajax: null
				},

				/**
     * Pagination plug-in methods.
     *
     * Each entry in this object is a function and defines which buttons should
     * be shown by the pagination rendering method that is used for the table:
     * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the
     * buttons are displayed in the document, while the functions here tell it
     * what buttons to display. This is done by returning an array of button
     * descriptions (what each button will do).
     *
     * Pagination types (the four built in options and any additional plug-in
     * options defined here) can be used through the `paginationType`
     * initialisation parameter.
     *
     * The functions defined take two parameters:
     *
     * 1. `{int} page` The current page index
     * 2. `{int} pages` The number of pages in the table
     *
     * Each function is expected to return an array where each element of the
     * array can be one of:
     *
     * * `first` - Jump to first page when activated
     * * `last` - Jump to last page when activated
     * * `previous` - Show previous page when activated
     * * `next` - Show next page when activated
     * * `{int}` - Show page of the index given
     * * `{array}` - A nested array containing the above elements to add a
     *   containing 'DIV' element (might be useful for styling).
     *
     * Note that DataTables v1.9- used this object slightly differently whereby
     * an object with two functions would be defined for each plug-in. That
     * ability is still supported by DataTables 1.10+ to provide backwards
     * compatibility, but this option of use is now decremented and no longer
     * documented in DataTables 1.10+.
     *
     *  @type object
     *  @default {}
     *
     *  @example
     *    // Show previous, next and current page buttons only
     *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {
     *      return [ 'previous', page, 'next' ];
     *    };
     */
				pager: {},

				renderer: {
						pageButton: {},
						header: {}
				},

				/**
     * Ordering plug-ins - custom data source
     *
     * The extension options for ordering of data available here is complimentary
     * to the default type based ordering that DataTables typically uses. It
     * allows much greater control over the the data that is being used to
     * order a column, but is necessarily therefore more complex.
     *
     * This type of ordering is useful if you want to do ordering based on data
     * live from the DOM (for example the contents of an 'input' element) rather
     * than just the static string that DataTables knows of.
     *
     * The way these plug-ins work is that you create an array of the values you
     * wish to be ordering for the column in question and then return that
     * array. The data in the array much be in the index order of the rows in
     * the table (not the currently ordering order!). Which order data gathering
     * function is run here depends on the `dt-init columns.orderDataType`
     * parameter that is used for the column (if any).
     *
     * The functions defined take two parameters:
     *
     * 1. `{object}` DataTables settings object: see
     *    {@link DataTable.models.oSettings}
     * 2. `{int}` Target column index
     *
     * Each function is expected to return an array:
     *
     * * `{array}` Data for the column to be ordering upon
     *
     *  @type array
     *
     *  @example
     *    // Ordering using `input` node values
     *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )
     *    {
     *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {
     *        return $('input', td).val();
     *      } );
     *    }
     */
				order: {},

				/**
     * Type based plug-ins.
     *
     * Each column in DataTables has a type assigned to it, either by automatic
     * detection or by direct assignment using the `type` option for the column.
     * The type of a column will effect how it is ordering and search (plug-ins
     * can also make use of the column type if required).
     *
     * @namespace
     */
				type: {
						/**
       * Type detection functions.
       *
       * The functions defined in this object are used to automatically detect
       * a column's type, making initialisation of DataTables super easy, even
       * when complex data is in the table.
       *
       * The functions defined take two parameters:
       *
          *  1. `{*}` Data from the column cell to be analysed
          *  2. `{settings}` DataTables settings object. This can be used to
          *     perform context specific type detection - for example detection
          *     based on language settings such as using a comma for a decimal
          *     place. Generally speaking the options from the settings will not
          *     be required
       *
       * Each function is expected to return:
       *
       * * `{string|null}` Data type detected, or null if unknown (and thus
       *   pass it on to the other type detection functions.
       *
       *  @type array
       *
       *  @example
       *    // Currency type detection plug-in:
       *    $.fn.dataTable.ext.type.detect.push(
       *      function ( data, settings ) {
       *        // Check the numeric part
       *        if ( ! $.isNumeric( data.substring(1) ) ) {
       *          return null;
       *        }
       *
       *        // Check prefixed by currency
       *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {
       *          return 'currency';
       *        }
       *        return null;
       *      }
       *    );
       */
						detect: [],

						/**
       * Type based search formatting.
       *
       * The type based searching functions can be used to pre-format the
       * data to be search on. For example, it can be used to strip HTML
       * tags or to de-format telephone numbers for numeric only searching.
       *
       * Note that is a search is not defined for a column of a given type,
       * no search formatting will be performed.
       *
       * Pre-processing of searching data plug-ins - When you assign the sType
       * for a column (or have it automatically detected for you by DataTables
       * or a type detection plug-in), you will typically be using this for
       * custom sorting, but it can also be used to provide custom searching
       * by allowing you to pre-processing the data and returning the data in
       * the format that should be searched upon. This is done by adding
       * functions this object with a parameter name which matches the sType
       * for that target column. This is the corollary of <i>afnSortData</i>
       * for searching data.
       *
       * The functions defined take a single parameter:
       *
          *  1. `{*}` Data from the column cell to be prepared for searching
       *
       * Each function is expected to return:
       *
       * * `{string|null}` Formatted string that will be used for the searching.
       *
       *  @type object
       *  @default {}
       *
       *  @example
       *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {
       *      return d.replace(/\n/g," ").replace( /<.*?>/g, "" );
       *    }
       */
						search: {},

						/**
       * Type based ordering.
       *
       * The column type tells DataTables what ordering to apply to the table
       * when a column is sorted upon. The order for each type that is defined,
       * is defined by the functions available in this object.
       *
       * Each ordering option can be described by three properties added to
       * this object:
       *
       * * `{type}-pre` - Pre-formatting function
       * * `{type}-asc` - Ascending order function
       * * `{type}-desc` - Descending order function
       *
       * All three can be used together, only `{type}-pre` or only
       * `{type}-asc` and `{type}-desc` together. It is generally recommended
       * that only `{type}-pre` is used, as this provides the optimal
       * implementation in terms of speed, although the others are provided
       * for compatibility with existing Javascript sort functions.
       *
       * `{type}-pre`: Functions defined take a single parameter:
       *
          *  1. `{*}` Data from the column cell to be prepared for ordering
       *
       * And return:
       *
       * * `{*}` Data to be sorted upon
       *
       * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort
       * functions, taking two parameters:
       *
          *  1. `{*}` Data to compare to the second parameter
          *  2. `{*}` Data to compare to the first parameter
       *
       * And returning:
       *
       * * `{*}` Ordering match: <0 if first parameter should be sorted lower
       *   than the second parameter, ===0 if the two parameters are equal and
       *   >0 if the first parameter should be sorted height than the second
       *   parameter.
       *
       *  @type object
       *  @default {}
       *
       *  @example
       *    // Numeric ordering of formatted numbers with a pre-formatter
       *    $.extend( $.fn.dataTable.ext.type.order, {
       *      "string-pre": function(x) {
       *        a = (a === "-" || a === "") ? 0 : a.replace( /[^\d\-\.]/g, "" );
       *        return parseFloat( a );
       *      }
       *    } );
       *
       *  @example
       *    // Case-sensitive string ordering, with no pre-formatting method
       *    $.extend( $.fn.dataTable.ext.order, {
       *      "string-case-asc": function(x,y) {
       *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
       *      },
       *      "string-case-desc": function(x,y) {
       *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));
       *      }
       *    } );
       */
						order: {}
				},

				/**
     * Unique DataTables instance counter
     *
     * @type int
     * @private
     */
				_unique: 0,

				//
				// Depreciated
				// The following properties are retained for backwards compatiblity only.
				// The should not be used in new projects and will be removed in a future
				// version
				//

				/**
     * Version check function.
     *  @type function
     *  @depreciated Since 1.10
     */
				fnVersionCheck: _DataTable.fnVersionCheck,

				/**
     * Index for what 'this' index API functions should use
     *  @type int
     *  @deprecated Since v1.10
     */
				iApiIndex: 0,

				/**
     * jQuery UI class container
     *  @type object
     *  @deprecated Since v1.10
     */
				oJUIClasses: {},

				/**
     * Software version
     *  @type string
     *  @deprecated Since v1.10
     */
				sVersion: _DataTable.version
		};

		//
		// Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts
		//
		$.extend(_ext, {
				afnFiltering: _ext.search,
				aTypes: _ext.type.detect,
				ofnSearch: _ext.type.search,
				oSort: _ext.type.order,
				afnSortData: _ext.order,
				aoFeatures: _ext.feature,
				oApi: _ext.internal,
				oStdClasses: _ext.classes,
				oPagination: _ext.pager
		});

		$.extend(_DataTable.ext.classes, {
				"sTable": "dataTable",
				"sNoFooter": "no-footer",

				/* Paging buttons */
				"sPageButton": "paginate_button",
				"sPageButtonActive": "current",
				"sPageButtonDisabled": "disabled",

				/* Striping classes */
				"sStripeOdd": "odd",
				"sStripeEven": "even",

				/* Empty row */
				"sRowEmpty": "dataTables_empty",

				/* Features */
				"sWrapper": "dataTables_wrapper",
				"sFilter": "dataTables_filter",
				"sInfo": "dataTables_info",
				"sPaging": "dataTables_paginate paging_", /* Note that the type is postfixed */
				"sLength": "dataTables_length",
				"sProcessing": "dataTables_processing",

				/* Sorting */
				"sSortAsc": "sorting_asc",
				"sSortDesc": "sorting_desc",
				"sSortable": "sorting", /* Sortable in both directions */
				"sSortableAsc": "sorting_asc_disabled",
				"sSortableDesc": "sorting_desc_disabled",
				"sSortableNone": "sorting_disabled",
				"sSortColumn": "sorting_", /* Note that an int is postfixed for the sorting order */

				/* Filtering */
				"sFilterInput": "",

				/* Page length */
				"sLengthSelect": "",

				/* Scrolling */
				"sScrollWrapper": "dataTables_scroll",
				"sScrollHead": "dataTables_scrollHead",
				"sScrollHeadInner": "dataTables_scrollHeadInner",
				"sScrollBody": "dataTables_scrollBody",
				"sScrollFoot": "dataTables_scrollFoot",
				"sScrollFootInner": "dataTables_scrollFootInner",

				/* Misc */
				"sHeaderTH": "",
				"sFooterTH": "",

				// Deprecated
				"sSortJUIAsc": "",
				"sSortJUIDesc": "",
				"sSortJUI": "",
				"sSortJUIAscAllowed": "",
				"sSortJUIDescAllowed": "",
				"sSortJUIWrapper": "",
				"sSortIcon": "",
				"sJUIHeader": "",
				"sJUIFooter": ""
		});

		(function () {

				// Reused strings for better compression. Closure compiler appears to have a
				// weird edge case where it is trying to expand strings rather than use the
				// variable version. This results in about 200 bytes being added, for very
				// little preference benefit since it this run on script load only.
				var _empty = '';
				_empty = '';

				var _stateDefault = _empty + 'ui-state-default';
				var _sortIcon = _empty + 'css_right ui-icon ui-icon-';
				var _headerFooter = _empty + 'fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix';

				$.extend(_DataTable.ext.oJUIClasses, _DataTable.ext.classes, {
						/* Full numbers paging buttons */
						"sPageButton": "fg-button ui-button " + _stateDefault,
						"sPageButtonActive": "ui-state-disabled",
						"sPageButtonDisabled": "ui-state-disabled",

						/* Features */
						"sPaging": "dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi " + "ui-buttonset-multi paging_", /* Note that the type is postfixed */

						/* Sorting */
						"sSortAsc": _stateDefault + " sorting_asc",
						"sSortDesc": _stateDefault + " sorting_desc",
						"sSortable": _stateDefault + " sorting",
						"sSortableAsc": _stateDefault + " sorting_asc_disabled",
						"sSortableDesc": _stateDefault + " sorting_desc_disabled",
						"sSortableNone": _stateDefault + " sorting_disabled",
						"sSortJUIAsc": _sortIcon + "triangle-1-n",
						"sSortJUIDesc": _sortIcon + "triangle-1-s",
						"sSortJUI": _sortIcon + "carat-2-n-s",
						"sSortJUIAscAllowed": _sortIcon + "carat-1-n",
						"sSortJUIDescAllowed": _sortIcon + "carat-1-s",
						"sSortJUIWrapper": "DataTables_sort_wrapper",
						"sSortIcon": "DataTables_sort_icon",

						/* Scrolling */
						"sScrollHead": "dataTables_scrollHead " + _stateDefault,
						"sScrollFoot": "dataTables_scrollFoot " + _stateDefault,

						/* Misc */
						"sHeaderTH": _stateDefault,
						"sFooterTH": _stateDefault,
						"sJUIHeader": _headerFooter + " ui-corner-tl ui-corner-tr",
						"sJUIFooter": _headerFooter + " ui-corner-bl ui-corner-br"
				});
		})();

		var extPagination = _DataTable.ext.pager;

		function _numbers(page, pages) {
				var numbers = [],
				    buttons = extPagination.numbers_length,
				    half = Math.floor(buttons / 2),
				    i = 1;

				if (pages <= buttons) {
						numbers = _range(0, pages);
				} else if (page <= half) {
						numbers = _range(0, buttons - 2);
						numbers.push('ellipsis');
						numbers.push(pages - 1);
				} else if (page >= pages - 1 - half) {
						numbers = _range(pages - (buttons - 2), pages);
						numbers.splice(0, 0, 'ellipsis'); // no unshift in ie6
						numbers.splice(0, 0, 0);
				} else {
						numbers = _range(page - half + 2, page + half - 1);
						numbers.push('ellipsis');
						numbers.push(pages - 1);
						numbers.splice(0, 0, 'ellipsis');
						numbers.splice(0, 0, 0);
				}

				numbers.DT_el = 'span';
				return numbers;
		}

		$.extend(extPagination, {
				simple: function simple(page, pages) {
						return ['previous', 'next'];
				},

				full: function full(page, pages) {
						return ['first', 'previous', 'next', 'last'];
				},

				numbers: function numbers(page, pages) {
						return [_numbers(page, pages)];
				},

				simple_numbers: function simple_numbers(page, pages) {
						return ['previous', _numbers(page, pages), 'next'];
				},

				full_numbers: function full_numbers(page, pages) {
						return ['first', 'previous', _numbers(page, pages), 'next', 'last'];
				},

				// For testing and plug-ins to use
				_numbers: _numbers,

				// Number of number buttons (including ellipsis) to show. _Must be odd!_
				numbers_length: 7
		});

		$.extend(true, _DataTable.ext.renderer, {
				pageButton: {
						_: function _(settings, host, idx, buttons, page, pages) {
								var classes = settings.oClasses;
								var lang = settings.oLanguage.oPaginate;
								var aria = settings.oLanguage.oAria.paginate || {};
								var btnDisplay,
								    btnClass,
								    counter = 0;

								var attach = function attach(container, buttons) {
										var i, ien, node, button;
										var clickHandler = function clickHandler(e) {
												_fnPageChange(settings, e.data.action, true);
										};

										for (i = 0, ien = buttons.length; i < ien; i++) {
												button = buttons[i];

												if ($.isArray(button)) {
														var inner = $('<' + (button.DT_el || 'div') + '/>').appendTo(container);
														attach(inner, button);
												} else {
														btnDisplay = null;
														btnClass = '';

														switch (button) {
																case 'ellipsis':
																		container.append('<span class="ellipsis">&#x2026;</span>');
																		break;

																case 'first':
																		btnDisplay = lang.sFirst;
																		btnClass = button + (page > 0 ? '' : ' ' + classes.sPageButtonDisabled);
																		break;

																case 'previous':
																		btnDisplay = lang.sPrevious;
																		btnClass = button + (page > 0 ? '' : ' ' + classes.sPageButtonDisabled);
																		break;

																case 'next':
																		btnDisplay = lang.sNext;
																		btnClass = button + (page < pages - 1 ? '' : ' ' + classes.sPageButtonDisabled);
																		break;

																case 'last':
																		btnDisplay = lang.sLast;
																		btnClass = button + (page < pages - 1 ? '' : ' ' + classes.sPageButtonDisabled);
																		break;

																default:
																		btnDisplay = button + 1;
																		btnClass = page === button ? classes.sPageButtonActive : '';
																		break;
														}

														if (btnDisplay !== null) {
																node = $('<a>', {
																		'class': classes.sPageButton + ' ' + btnClass,
																		'aria-controls': settings.sTableId,
																		'aria-label': aria[button],
																		'data-dt-idx': counter,
																		'tabindex': settings.iTabIndex,
																		'id': idx === 0 && typeof button === 'string' ? settings.sTableId + '_' + button : null
																}).html(btnDisplay).appendTo(container);

																_fnBindAction(node, { action: button }, clickHandler);

																counter++;
														}
												}
										}
								};

								// IE9 throws an 'unknown error' if document.activeElement is used
								// inside an iframe or frame. Try / catch the error. Not good for
								// accessibility, but neither are frames.
								var activeEl;

								try {
										// Because this approach is destroying and recreating the paging
										// elements, focus is lost on the select button which is bad for
										// accessibility. So we want to restore focus once the draw has
										// completed
										activeEl = $(host).find(document.activeElement).data('dt-idx');
								} catch (e) {}

								attach($(host).empty(), buttons);

								if (activeEl) {
										$(host).find('[data-dt-idx=' + activeEl + ']').focus();
								}
						}
				}
		});

		// Built in type detection. See model.ext.aTypes for information about
		// what is required from this methods.
		$.extend(_DataTable.ext.type.detect, [
		// Plain numbers - first since V8 detects some plain numbers as dates
		// e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).
		function (d, settings) {
				var decimal = settings.oLanguage.sDecimal;
				return _isNumber(d, decimal) ? 'num' + decimal : null;
		},

		// Dates (only those recognised by the browser's Date.parse)
		function (d, settings) {
				// V8 will remove any unknown characters at the start and end of the
				// expression, leading to false matches such as `$245.12` or `10%` being
				// a valid date. See forum thread 18941 for detail.
				if (d && !(d instanceof Date) && (!_re_date_start.test(d) || !_re_date_end.test(d))) {
						return null;
				}
				var parsed = Date.parse(d);
				return parsed !== null && !isNaN(parsed) || _empty(d) ? 'date' : null;
		},

		// Formatted numbers
		function (d, settings) {
				var decimal = settings.oLanguage.sDecimal;
				return _isNumber(d, decimal, true) ? 'num-fmt' + decimal : null;
		},

		// HTML numeric
		function (d, settings) {
				var decimal = settings.oLanguage.sDecimal;
				return _htmlNumeric(d, decimal) ? 'html-num' + decimal : null;
		},

		// HTML numeric, formatted
		function (d, settings) {
				var decimal = settings.oLanguage.sDecimal;
				return _htmlNumeric(d, decimal, true) ? 'html-num-fmt' + decimal : null;
		},

		// HTML (this is strict checking - there must be html)
		function (d, settings) {
				return _empty(d) || typeof d === 'string' && d.indexOf('<') !== -1 ? 'html' : null;
		}]);

		// Filter formatting functions. See model.ext.ofnSearch for information about
		// what is required from these methods.
		//
		// Note that additional search methods are added for the html numbers and
		// html formatted numbers by `_addNumericSort()` when we know what the decimal
		// place is

		$.extend(_DataTable.ext.type.search, {
				html: function html(data) {
						return _empty(data) ? data : typeof data === 'string' ? data.replace(_re_new_lines, " ").replace(_re_html, "") : '';
				},

				string: function string(data) {
						return _empty(data) ? data : typeof data === 'string' ? data.replace(_re_new_lines, " ") : data;
				}
		});

		var __numericReplace = function __numericReplace(d, decimalPlace, re1, re2) {
				if (d !== 0 && (!d || d === '-')) {
						return -Infinity;
				}

				// If a decimal place other than `.` is used, it needs to be given to the
				// function so we can detect it and replace with a `.` which is the only
				// decimal place Javascript recognises - it is not locale aware.
				if (decimalPlace) {
						d = _numToDecimal(d, decimalPlace);
				}

				if (d.replace) {
						if (re1) {
								d = d.replace(re1, '');
						}

						if (re2) {
								d = d.replace(re2, '');
						}
				}

				return d * 1;
		};

		// Add the numeric 'deformatting' functions for sorting and search. This is done
		// in a function to provide an easy ability for the language options to add
		// additional methods if a non-period decimal place is used.
		function _addNumericSort(decimalPlace) {
				$.each({
						// Plain numbers
						"num": function num(d) {
								return __numericReplace(d, decimalPlace);
						},

						// Formatted numbers
						"num-fmt": function numFmt(d) {
								return __numericReplace(d, decimalPlace, _re_formatted_numeric);
						},

						// HTML numeric
						"html-num": function htmlNum(d) {
								return __numericReplace(d, decimalPlace, _re_html);
						},

						// HTML numeric, formatted
						"html-num-fmt": function htmlNumFmt(d) {
								return __numericReplace(d, decimalPlace, _re_html, _re_formatted_numeric);
						}
				}, function (key, fn) {
						// Add the ordering method
						_ext.type.order[key + decimalPlace + '-pre'] = fn;

						// For HTML types add a search formatter that will strip the HTML
						if (key.match(/^html\-/)) {
								_ext.type.search[key + decimalPlace] = _ext.type.search.html;
						}
				});
		}

		// Default sort methods
		$.extend(_ext.type.order, {
				// Dates
				"date-pre": function datePre(d) {
						return Date.parse(d) || 0;
				},

				// html
				"html-pre": function htmlPre(a) {
						return _empty(a) ? '' : a.replace ? a.replace(/<.*?>/g, "").toLowerCase() : a + '';
				},

				// string
				"string-pre": function stringPre(a) {
						// This is a little complex, but faster than always calling toString,
						// http://jsperf.com/tostring-v-check
						return _empty(a) ? '' : typeof a === 'string' ? a.toLowerCase() : !a.toString ? '' : a.toString();
				},

				// string-asc and -desc are retained only for compatibility with the old
				// sort methods
				"string-asc": function stringAsc(x, y) {
						return x < y ? -1 : x > y ? 1 : 0;
				},

				"string-desc": function stringDesc(x, y) {
						return x < y ? 1 : x > y ? -1 : 0;
				}
		});

		// Numeric sorting types - order doesn't matter here
		_addNumericSort('');

		$.extend(true, _DataTable.ext.renderer, {
				header: {
						_: function _(settings, cell, column, classes) {
								// No additional mark-up required
								// Attach a sort listener to update on sort - note that using the
								// `DT` namespace will allow the event to be removed automatically
								// on destroy, while the `dt` namespaced event is the one we are
								// listening for
								$(settings.nTable).on('order.dt.DT', function (e, ctx, sorting, columns) {
										if (settings !== ctx) {
												// need to check this this is the host
												return; // table, not a nested one
										}

										var colIdx = column.idx;

										cell.removeClass(column.sSortingClass + ' ' + classes.sSortAsc + ' ' + classes.sSortDesc).addClass(columns[colIdx] == 'asc' ? classes.sSortAsc : columns[colIdx] == 'desc' ? classes.sSortDesc : column.sSortingClass);
								});
						},

						jqueryui: function jqueryui(settings, cell, column, classes) {
								$('<div/>').addClass(classes.sSortJUIWrapper).append(cell.contents()).append($('<span/>').addClass(classes.sSortIcon + ' ' + column.sSortingClassJUI)).appendTo(cell);

								// Attach a sort listener to update on sort
								$(settings.nTable).on('order.dt.DT', function (e, ctx, sorting, columns) {
										if (settings !== ctx) {
												return;
										}

										var colIdx = column.idx;

										cell.removeClass(classes.sSortAsc + " " + classes.sSortDesc).addClass(columns[colIdx] == 'asc' ? classes.sSortAsc : columns[colIdx] == 'desc' ? classes.sSortDesc : column.sSortingClass);

										cell.find('span.' + classes.sSortIcon).removeClass(classes.sSortJUIAsc + " " + classes.sSortJUIDesc + " " + classes.sSortJUI + " " + classes.sSortJUIAscAllowed + " " + classes.sSortJUIDescAllowed).addClass(columns[colIdx] == 'asc' ? classes.sSortJUIAsc : columns[colIdx] == 'desc' ? classes.sSortJUIDesc : column.sSortingClassJUI);
								});
						}
				}
		});

		/*
   * Public helper functions. These aren't used internally by DataTables, or
   * called by any of the options passed into DataTables, but they can be used
   * externally by developers working with DataTables. They are helper functions
   * to make working with DataTables a little bit easier.
   */

		var __htmlEscapeEntities = function __htmlEscapeEntities(d) {
				return typeof d === 'string' ? d.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;') : d;
		};

		/**
   * Helpers for `columns.render`.
   *
   * The options defined here can be used with the `columns.render` initialisation
   * option to provide a display renderer. The following functions are defined:
   *
   * * `number` - Will format numeric data (defined by `columns.data`) for
   *   display, retaining the original unformatted data for sorting and filtering.
   *   It takes 5 parameters:
   *   * `string` - Thousands grouping separator
   *   * `string` - Decimal point indicator
   *   * `integer` - Number of decimal points to show
   *   * `string` (optional) - Prefix.
   *   * `string` (optional) - Postfix (/suffix).
   * * `text` - Escape HTML to help prevent XSS attacks. It has no optional
   *   parameters.
   *
   * @example
   *   // Column definition using the number renderer
   *   {
   *     data: "salary",
   *     render: $.fn.dataTable.render.number( '\'', '.', 0, '$' )
   *   }
   *
   * @namespace
   */
		_DataTable.render = {
				number: function number(thousands, decimal, precision, prefix, postfix) {
						return {
								display: function display(d) {
										if (typeof d !== 'number' && typeof d !== 'string') {
												return d;
										}

										var negative = d < 0 ? '-' : '';
										var flo = parseFloat(d);

										// If NaN then there isn't much formatting that we can do - just
										// return immediately, escaping any HTML (this was supposed to
										// be a number after all)
										if (isNaN(flo)) {
												return __htmlEscapeEntities(d);
										}

										d = Math.abs(flo);

										var intPart = parseInt(d, 10);
										var floatPart = precision ? decimal + (d - intPart).toFixed(precision).substring(2) : '';

										return negative + (prefix || '') + intPart.toString().replace(/\B(?=(\d{3})+(?!\d))/g, thousands) + floatPart + (postfix || '');
								}
						};
				},

				text: function text() {
						return {
								display: __htmlEscapeEntities
						};
				}
		};

		/*
   * This is really a good bit rubbish this method of exposing the internal methods
   * publicly... - To be fixed in 2.0 using methods on the prototype
   */

		/**
   * Create a wrapper function for exporting an internal functions to an external API.
   *  @param {string} fn API function name
   *  @returns {function} wrapped function
   *  @memberof DataTable#internal
   */
		function _fnExternApiFunc(fn) {
				return function () {
						var args = [_fnSettingsFromNode(this[_DataTable.ext.iApiIndex])].concat(Array.prototype.slice.call(arguments));
						return _DataTable.ext.internal[fn].apply(this, args);
				};
		}

		/**
   * Reference to internal functions for use by plug-in developers. Note that
   * these methods are references to internal functions and are considered to be
   * private. If you use these methods, be aware that they are liable to change
   * between versions.
   *  @namespace
   */
		$.extend(_DataTable.ext.internal, {
				_fnExternApiFunc: _fnExternApiFunc,
				_fnBuildAjax: _fnBuildAjax,
				_fnAjaxUpdate: _fnAjaxUpdate,
				_fnAjaxParameters: _fnAjaxParameters,
				_fnAjaxUpdateDraw: _fnAjaxUpdateDraw,
				_fnAjaxDataSrc: _fnAjaxDataSrc,
				_fnAddColumn: _fnAddColumn,
				_fnColumnOptions: _fnColumnOptions,
				_fnAdjustColumnSizing: _fnAdjustColumnSizing,
				_fnVisibleToColumnIndex: _fnVisibleToColumnIndex,
				_fnColumnIndexToVisible: _fnColumnIndexToVisible,
				_fnVisbleColumns: _fnVisbleColumns,
				_fnGetColumns: _fnGetColumns,
				_fnColumnTypes: _fnColumnTypes,
				_fnApplyColumnDefs: _fnApplyColumnDefs,
				_fnHungarianMap: _fnHungarianMap,
				_fnCamelToHungarian: _fnCamelToHungarian,
				_fnLanguageCompat: _fnLanguageCompat,
				_fnBrowserDetect: _fnBrowserDetect,
				_fnAddData: _fnAddData,
				_fnAddTr: _fnAddTr,
				_fnNodeToDataIndex: _fnNodeToDataIndex,
				_fnNodeToColumnIndex: _fnNodeToColumnIndex,
				_fnGetCellData: _fnGetCellData,
				_fnSetCellData: _fnSetCellData,
				_fnSplitObjNotation: _fnSplitObjNotation,
				_fnGetObjectDataFn: _fnGetObjectDataFn,
				_fnSetObjectDataFn: _fnSetObjectDataFn,
				_fnGetDataMaster: _fnGetDataMaster,
				_fnClearTable: _fnClearTable,
				_fnDeleteIndex: _fnDeleteIndex,
				_fnInvalidate: _fnInvalidate,
				_fnGetRowElements: _fnGetRowElements,
				_fnCreateTr: _fnCreateTr,
				_fnBuildHead: _fnBuildHead,
				_fnDrawHead: _fnDrawHead,
				_fnDraw: _fnDraw,
				_fnReDraw: _fnReDraw,
				_fnAddOptionsHtml: _fnAddOptionsHtml,
				_fnDetectHeader: _fnDetectHeader,
				_fnGetUniqueThs: _fnGetUniqueThs,
				_fnFeatureHtmlFilter: _fnFeatureHtmlFilter,
				_fnFilterComplete: _fnFilterComplete,
				_fnFilterCustom: _fnFilterCustom,
				_fnFilterColumn: _fnFilterColumn,
				_fnFilter: _fnFilter,
				_fnFilterCreateSearch: _fnFilterCreateSearch,
				_fnEscapeRegex: _fnEscapeRegex,
				_fnFilterData: _fnFilterData,
				_fnFeatureHtmlInfo: _fnFeatureHtmlInfo,
				_fnUpdateInfo: _fnUpdateInfo,
				_fnInfoMacros: _fnInfoMacros,
				_fnInitialise: _fnInitialise,
				_fnInitComplete: _fnInitComplete,
				_fnLengthChange: _fnLengthChange,
				_fnFeatureHtmlLength: _fnFeatureHtmlLength,
				_fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,
				_fnPageChange: _fnPageChange,
				_fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,
				_fnProcessingDisplay: _fnProcessingDisplay,
				_fnFeatureHtmlTable: _fnFeatureHtmlTable,
				_fnScrollDraw: _fnScrollDraw,
				_fnApplyToChildren: _fnApplyToChildren,
				_fnCalculateColumnWidths: _fnCalculateColumnWidths,
				_fnThrottle: _fnThrottle,
				_fnConvertToWidth: _fnConvertToWidth,
				_fnGetWidestNode: _fnGetWidestNode,
				_fnGetMaxLenString: _fnGetMaxLenString,
				_fnStringToCss: _fnStringToCss,
				_fnSortFlatten: _fnSortFlatten,
				_fnSort: _fnSort,
				_fnSortAria: _fnSortAria,
				_fnSortListener: _fnSortListener,
				_fnSortAttachListener: _fnSortAttachListener,
				_fnSortingClasses: _fnSortingClasses,
				_fnSortData: _fnSortData,
				_fnSaveState: _fnSaveState,
				_fnLoadState: _fnLoadState,
				_fnSettingsFromNode: _fnSettingsFromNode,
				_fnLog: _fnLog,
				_fnMap: _fnMap,
				_fnBindAction: _fnBindAction,
				_fnCallbackReg: _fnCallbackReg,
				_fnCallbackFire: _fnCallbackFire,
				_fnLengthOverflow: _fnLengthOverflow,
				_fnRenderer: _fnRenderer,
				_fnDataSource: _fnDataSource,
				_fnRowAttributes: _fnRowAttributes,
				_fnCalculateEnd: function _fnCalculateEnd() {} // Used by a lot of plug-ins, but redundant
				// in 1.10, so this dead-end function is
				// added to prevent errors
		});

		// jQuery access
		$.fn.dataTable = _DataTable;

		// Provide access to the host jQuery object (circular reference)
		_DataTable.$ = $;

		// Legacy aliases
		$.fn.dataTableSettings = _DataTable.settings;
		$.fn.dataTableExt = _DataTable.ext;

		// With a capital `D` we return a DataTables API instance rather than a
		// jQuery object
		$.fn.DataTable = function (opts) {
				return $(this).dataTable(opts).api();
		};

		// All properties that are available to $.fn.dataTable should also be
		// available on $.fn.DataTable
		$.each(_DataTable, function (prop, val) {
				$.fn.DataTable[prop] = val;
		});

		// Information about events fired by DataTables - for documentation.
		/**
   * Draw event, fired whenever the table is redrawn on the page, at the same
   * point as fnDrawCallback. This may be useful for binding events or
   * performing calculations when the table is altered at all.
   *  @name DataTable#draw.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
   */

		/**
   * Search event, fired when the searching applied to the table (using the
   * built-in global search, or column filters) is altered.
   *  @name DataTable#search.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
   */

		/**
   * Page change event, fired when the paging of the table is altered.
   *  @name DataTable#page.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
   */

		/**
   * Order event, fired when the ordering applied to the table is altered.
   *  @name DataTable#order.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
   */

		/**
   * DataTables initialisation complete event, fired when the table is fully
   * drawn, including Ajax data loaded, if Ajax data is required.
   *  @name DataTable#init.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} oSettings DataTables settings object
   *  @param {object} json The JSON object request from the server - only
   *    present if client-side Ajax sourced data is used</li></ol>
   */

		/**
   * State save event, fired when the table has changed state a new state save
   * is required. This event allows modification of the state saving object
   * prior to actually doing the save, including addition or other state
   * properties (for plug-ins) or modification of a DataTables core property.
   *  @name DataTable#stateSaveParams.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} oSettings DataTables settings object
   *  @param {object} json The state information to be saved
   */

		/**
   * State load event, fired when the table is loading state from the stored
   * data, but prior to the settings object being modified by the saved state
   * - allowing modification of the saved state is required or loading of
   * state for a plug-in.
   *  @name DataTable#stateLoadParams.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} oSettings DataTables settings object
   *  @param {object} json The saved state information
   */

		/**
   * State loaded event, fired when state has been loaded from stored data and
   * the settings object has been modified by the loaded data.
   *  @name DataTable#stateLoaded.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} oSettings DataTables settings object
   *  @param {object} json The saved state information
   */

		/**
   * Processing event, fired when DataTables is doing some kind of processing
   * (be it, order, searcg or anything else). It can be used to indicate to
   * the end user that there is something happening, or that something has
   * finished.
   *  @name DataTable#processing.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} oSettings DataTables settings object
   *  @param {boolean} bShow Flag for if DataTables is doing processing or not
   */

		/**
   * Ajax (XHR) event, fired whenever an Ajax request is completed from a
   * request to made to the server for new data. This event is called before
   * DataTables processed the returned data, so it can also be used to pre-
   * process the data returned from the server, if needed.
   *
   * Note that this trigger is called in `fnServerData`, if you override
   * `fnServerData` and which to use this event, you need to trigger it in you
   * success function.
   *  @name DataTable#xhr.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
   *  @param {object} json JSON returned from the server
   *
   *  @example
   *     // Use a custom property returned from the server in another DOM element
   *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
   *       $('#status').html( json.status );
   *     } );
   *
   *  @example
   *     // Pre-process the data returned from the server
   *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
   *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {
   *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;
   *       }
   *       // Note no return - manipulate the data directly in the JSON object.
   *     } );
   */

		/**
   * Destroy event, fired when the DataTable is destroyed by calling fnDestroy
   * or passing the bDestroy:true parameter in the initialisation object. This
   * can be used to remove bound events, added DOM nodes, etc.
   *  @name DataTable#destroy.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
   */

		/**
   * Page length change event, fired when number of records to show on each
   * page (the length) is changed.
   *  @name DataTable#length.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
   *  @param {integer} len New length
   */

		/**
   * Column sizing has changed.
   *  @name DataTable#column-sizing.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
   */

		/**
   * Column visibility has changed.
   *  @name DataTable#column-visibility.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
   *  @param {int} column Column index
   *  @param {bool} vis `false` if column now hidden, or `true` if visible
   */

		return $.fn.dataTable;
});

/* =========================================================================
 * Svelto - Widgets - Datatables (Config)
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato - All rights reserved.
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @before ./vendor/datatables.js
 * @require core/svelto/svelto.js
 * ========================================================================= */

/* DATATABLES */

(function ($, _, Svelto, DataTable) {

		'use strict';

		/* CHECK IF LOADED */

		if (!DataTable) return;

		/* DEFAULTS */

		_.extend(DataTable.defaults, {
				dom: '<"card-header bordered"' + '<"multiple center" l <"spacer hidden-xs-down"> f>' + '>' + '<"card-block bordered table-wrapper" t>' + '<"card-footer bordered"' + '<"multiple center" i <"spacer hidden-xs-down"> p>' + '>',
				autoWidth: false,
				lengthMenu: [[10, 25, 50, 100, 250], [10, 25, 50, 100, 250]],
				pageLength: 10,
				pagingType: 'simple_numbers_no_ellipses',
				renderer: 'svelto',
				drawCallback: function drawCallback() {
						$(this).widgetize();
				},
				initComplete: function initComplete() {
						$(this).closest('.datatable-wrapper').widgetize();
				}
		});

		_.extend(DataTable.defaults.oLanguage, {
				sInfo: 'Entries _START_-_END_ of _TOTAL_',
				sInfoEmpty: 'No entries to show',
				sInfoFiltered: ' (_MAX_ total)',
				sLengthMenu: '_MENU_<label>Show <strong><span class="select-value">10</span></strong> entries</label>',
				sSearch: '<div class="multiple joined no-separators">_INPUT_<div class="label compact bordered"><i class="icon">search</i></div></div>',
				sSearchPlaceholder: 'Search...'
		});

		_.extend(DataTable.defaults.oLanguage.oPaginate, {
				sFirst: '<i class="icon">first_page</i>',
				sPrevious: '<i class="icon">chevron_left</i>',
				sNext: '<i class="icon">chevron_right</i>',
				sLast: '<i class="icon">last_page</i>'
		});

		_.extend(DataTable.ext.classes, {
				sFilter: 'datatable-filter',
				sFilterInput: 'bordered',
				sInfo: 'datatable-info',
				sLength: 'datatable-length button bordered select',
				sLengthSelect: '',
				sPageButton: 'button bordered compact',
				sPageButtonActive: 'active highlighted',
				sPageButtonDisabled: 'disabled',
				sPaging: 'datatable-pagination pagination multiple joined ', // Not a type, `pagingType` will get attached after this
				sProcessing: 'datatable-processing',
				sRowEmpty: 'datatable-row-empty',
				sScrollBody: 'datatable-scroll-body',
				sScrollFoot: 'datatable-scroll-foot',
				sScrollFootInner: 'datatable-scroll-foot-inner',
				sScrollHead: 'datatable-scroll-head',
				sScrollHeadInner: 'datatable-scroll-head-inner',
				sScrollWrapper: 'datatable-scroll',
				sSortAsc: 'sortable sort-asc',
				sSortColumn: 'sort-',
				sSortDesc: 'sortable sort-desc',
				sSortable: 'sortable',
				sSortableAsc: 'sort-asc-disabled',
				sSortableDesc: 'sort-desc-disabled',
				sSortableNone: 'sort-disabled',
				sStripeEven: 'even',
				sStripeOdd: 'odd',
				sTable: 'datatable',
				sWrapper: 'datatable-wrapper card bordered limited centered'
		});

		/* PAGER */

		DataTable.ext.pager.numbers_length = 5;
		DataTable.ext.pager.simple_numbers_no_ellipses = function (page, pages) {

				var blocks = DataTable.ext.pager.numbers_length,
				    halfBlocks = Math.floor(blocks / 2),
				    numbers = void 0;

				if (pages <= blocks) {

						numbers = _.range(0, pages);
				} else if (page <= halfBlocks) {

						numbers = _.range(0, blocks);
				} else if (page >= pages - 1 - halfBlocks) {

						numbers = _.range(pages - blocks, pages);
				} else {

						numbers = _.range(page - halfBlocks, page + halfBlocks + 1);
				}

				numbers.DT_el = false;

				return ['previous', numbers, 'next'];
		};

		/* RENDERER */

		DataTable.ext.renderer.pageButton.svelto = function (settings, previous, idx, buttons, page, pages) {

				/* VARIABLES */

				var api = new DataTable.Api(settings),
				    classes = settings.oClasses,
				    lang = settings.oLanguage.oPaginate,
				    aria = settings.oLanguage.oAria.paginate || {},
				    counter = 0;

				/* ATTACH */

				var attach = function attach(container, buttons) {

						/* CLICK HANDLER */

						var clickHandler = function clickHandler(event) {

								event.preventDefault();

								if ($(event.currentTarget).hasClass(classes.sPageButtonDisabled) || api.page() === event.data.action) return;

								api.page(event.data.action).draw('page');
						};

						/* CONTENT */

						for (var i = 0, l = buttons.length; i < l; i++) {

								var button = buttons[i];

								if ($.isArray(button)) {

										attach(container, button);

										continue;
								}

								var btnText = '',
								    btnClasses = button;

								switch (button) {

										case 'ellipsis':
												btnText = '<i class="icon">more_horiz</i>';
												break;

										case 'first':
												if (page === 0) continue;
												btnText = lang.sFirst;
												break;

										case 'previous':
												if (page === 0) continue;
												btnText = lang.sPrevious;
												break;

										case 'next':
												if (pages === 0 || page === pages - 1) continue;
												btnText = lang.sNext;
												break;

										case 'last':
												if (pages === 0 || page === pages - 1) continue;
												btnText = lang.sLast;
												break;

										default:
												btnText = button + 1;
												btnClasses += page === button ? ' ' + classes.sPageButtonActive : '';
												break;

								}

								var node = $('<div>', {
										'aria-controls': settings.sTableId,
										'aria-label': aria[button],
										'data-dt-idx': counter,
										'tabindex': settings.iTabIndex,
										'class': classes.sPageButton + ' ' + btnClasses,
										'id': idx === 0 && typeof button === 'string' ? settings.sTableId + '_' + button : null
								}).html(btnText).appendTo(container);

								if (button !== 'ellipsis') {

										settings.oApi._fnBindAction(node, { action: button }, clickHandler);
								}

								counter++;
						}
				};

				/* FOCUS */

				var activeIDX = $(previous).find(document.activeElement).data('dt-idx');

				attach($(previous).empty(), buttons);

				if (activeIDX) {

						$(previous).find('[data-dt-idx=' + activeIDX + ']').focus();
				}
		};

		/* EXPORT */

		Svelto.DataTable = DataTable;
})(Svelto.$, Svelto._, Svelto, Svelto.$.fn.dataTable);

/* =========================================================================
 * Svelto - Widgets - Datatables
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato - All rights reserved.
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ./config.js
 * @require core/widget/widget.js
 * ========================================================================= */

//TODO: Add a spinnerOverlay when processing
//TODO: Proxy all `*.dt` events as `dt:*`
//TODO: Test in all browsers

/* DATATABLES */

(function ($, _, Svelto, Widgets, Factory, DataTable) {

		'use strict';

		/* CHECK IF LOADED */

		if (!DataTable) return;

		/* CONFIG */

		var config = {
				name: 'dt',
				plugin: true,
				selector: 'table.datatable:visible',
				options: {
						selectors: {
								wrapper: '.datatable-wrapper'
						},
						keystrokes: {
								'ctmd + shift + left': ['page', 'first'],
								'ctmd + left': ['page', 'previous'],
								'ctmd + right': ['page', 'next'],
								'ctmd + shift + right': ['page', 'last']
						}
				}
		};

		/* DATATABLE */

		var DT = function (_Widgets$Widget41) {
				_inherits(DT, _Widgets$Widget41);

				function DT() {
						_classCallCheck(this, DT);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(DT).apply(this, arguments));
				}

				_createClass(DT, [{
						key: '_variables',
						value: function _variables() {

								this.$table = this.$element;
								this.$wrapper = this.$table.closest(this.options.selectors.wrapper);
								this._api = this.$table.DataTable();
						}
				}, {
						key: '_init',
						value: function _init() {

								this.___keydown();
						}
				}, {
						key: '_destroy',
						value: function _destroy() {

								this.$wrapper.remove();
						}

						/* KEYDOWN */

				}, {
						key: '___keydown',
						value: function ___keydown() {

								this._onHover(this.$wrapper, [this.$document, 'keydown', this.__keydown]);
						}

						/* API */

				}, {
						key: 'api',
						value: function api(method) {
								var _api;

								for (var _len7 = arguments.length, args = Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
										args[_key7 - 1] = arguments[_key7];
								}

								return (_api = this._api)[method].apply(_api, args);
						}
				}, {
						key: 'page',
						value: function page(nr) {

								if (_.isUndefined(nr)) return this.api('page');

								this.api('page', nr);
								this.api('draw', false);
						}
				}], [{
						key: 'widgetize',


						/* SPECIAL */

						value: function widgetize($ele) {

								$ele.dataTable().dt();
						}
				}]);

				return DT;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(DT, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.DataTable);

/* =========================================================================
 * Svelto - Widgets - Selectable
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @before widgets/datatables/datatables.js
 * @require core/browser/browser.js
 * @require core/mouse/mouse.js
 * @require core/widget/widget.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory, Pointer, Browser, Keyboard, Mouse) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'selectable',
				plugin: true,
				selector: 'table.selectable',
				options: {
						moveThreshold: 5, // Threshold after with we start to consider the `Pointer.move` events (Dragging disabled on touch device)
						single: false, // Enforcing `select-single` even without the need to add the class
						classes: {
								selected: 'selected',
								single: 'select-single',
								datatable: 'datatable'
						},
						selectors: {
								element: 'tbody tr:not(.table-row-empty)', //FIXME: Add support for datatables' empty row
								selectionToggler: undefined // Selector having `element` as context. If falsy the entire `element` will be the selection toggler
						},
						keystrokes: {
								'ctmd + a': 'all',
								'ctmd + shift + a': 'clear',
								'ctmd + i': 'invert'
						},
						callbacks: {
								change: _.noop
						}
				}
		};

		/* SELECTABLE */

		var Selectable = function (_Widgets$Widget42) {
				_inherits(Selectable, _Widgets$Widget42);

				function Selectable() {
						_classCallCheck(this, Selectable);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Selectable).apply(this, arguments));
				}

				_createClass(Selectable, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this.$selectable = this.$element;

								this._isSingle = this.options.single || this.$selectable.hasClass(this.options.classes.single);
								this._isDataTable = this.$selectable.hasClass(this.options.classes.datatable);

								this._dtapi = this._isDataTable ? this.$selectable.DataTable() : false;

								this.$elements = this._getElements();

								this._usingSelectionToggler = !!this.options.selectors.selectionToggler;
								this.options.selectors.selectionToggler = this._usingSelectionToggler ? this.options.selectors.element + ' ' + this.options.selectors.selectionToggler : this.options.selectors.element;
						}
				}, {
						key: '_events',
						value: function _events() {

								this.___change();
								this.___keydown();
								this.___downTap();
						}
				}, {
						key: '_destroy',
						value: function _destroy() {

								this.clear();
						}

						/* CHANGE */

				}, {
						key: '___change',
						value: function ___change() {

								this._on(true, 'change tablehelper:change sortable:sort processing.dt sort.dt search.dt', this.__change);
						}
				}, {
						key: '__change',
						value: function __change() {

								this.$elements = this._getElements();

								this._resetPrev();

								this._trigger('change');
						}

						/* KEYDOWN */

				}, {
						key: '___keydown',
						value: function ___keydown() {

								this._onHover([this.$document, 'keydown', this.__keydown]);
						}

						/* DOWN / TAP */

				}, {
						key: '___downTap',
						value: function ___downTap() {

								if (Browser.is.touchDevice || this._isSingle) {

										this._on(Pointer.tap, this.options.selectors.selectionToggler, this.__tapTouch);
								} else {

										this._on(Pointer.down, this.options.selectors.selectionToggler, this.__down);
								}
						}

						/* TAP */ // Just for touch devices or single select

				}, {
						key: '__tapTouch',
						value: function __tapTouch(event) {

								event.preventDefault();

								var $target = this._getEventElement(event);

								if (this._isSingle) {

										this.$elements.not($target).removeClass(this.options.classes.selected); //FIXME: Quite performance intensive, most of it could be avoided
								}

								$target.toggleClass(this.options.classes.selected);

								this._trigger('change');
						}

						/* CLICK / CTMD + CLICK / SHIFT + CLICK / CLICK -> DRAG */

				}, {
						key: '__down',
						value: function __down(event) {

								event.preventDefault();

								this.startEvent = event;
								this.$startElement = this._getEventElement(event);

								this._on(true, this.$document, Pointer.move, this.__move);

								this._one(true, this.$document, Pointer.up, this.__up);

								this._one(true, this.$document, Pointer.cancel, this.__cancel);
						}
				}, {
						key: '__move',
						value: function __move(event) {

								event.preventDefault();

								var startXY = $.eventXY(this.startEvent),
								    endXY = $.eventXY(event),
								    deltaXY = {
										x: endXY.x - startXY.x,
										y: endXY.y - startXY.y
								},
								    absDeltaXY = {
										x: Math.abs(deltaXY.x),
										y: Math.abs(deltaXY.y)
								};

								if (absDeltaXY.x >= this.options.moveThreshold || absDeltaXY.y >= this.options.moveThreshold) {

										this._off(this.$document, Pointer.move, this.__move);

										this._off(this.$document, Pointer.up, this.__up);

										this._off(this.$document, Pointer.cancel, this.__cancel);

										this._resetPrev();

										if (!Keyboard.keystroke.hasCtrlOrCmd(event)) {

												this.$elements.removeClass(this.options.classes.selected);
										}

										this.$startElement.toggleClass(this.options.classes.selected);

										this._on(true, Pointer.enter, this.options.selectors.element, this.__dragEnter);

										this._one(true, this.$document, Pointer.up + ' ' + Pointer.cancel, this.__dragEnd);

										this._trigger('change');
								}
						}
				}, {
						key: '__dragEnter',
						value: function __dragEnter(event) {

								this._toggleGroup(this.$startElement, this._getEventElement(event));

								this._trigger('change');
						}
				}, {
						key: '__dragEnd',
						value: function __dragEnd() {

								this._off(Pointer.enter, this.__dragEnter);
						}
				}, {
						key: '__up',
						value: function __up(event) {

								this._off(this.$document, Pointer.move, this.__move);

								this._off(this.$document, Pointer.cancel, this.__cancel);

								var isRightButton = Mouse.hasButton(event, Mouse.buttons.RIGHT); // When right clicking we suppose that we also want to select that element (useful when used in conjuction with SelectableActionsPopover)

								if (event.shiftKey) {

										this._toggleGroup(this.$prevElement, this.$startElement);
								} else if (Keyboard.keystroke.hasCtrlOrCmd(event)) {

										this.$startElement.toggleClass(this.options.classes.selected, isRightButton ? true : undefined);

										this._resetPrev(this.$startElement);
								} else {

										var $selected = this.get(),
										    $others = $selected.not(this.$startElement);

										if ($others.length) {

												$others.removeClass(this.options.classes.selected);

												this.$startElement.addClass(this.options.classes.selected);
										} else {

												this.$startElement.toggleClass(this.options.classes.selected, isRightButton ? true : undefined);
										}

										this._resetPrev(this.$startElement);
								}

								this._trigger('change');
						}
				}, {
						key: '__cancel',
						value: function __cancel() {

								this._off(this.$document, Pointer.move, this.__move);

								this._off(this.$document, Pointer.up, this.__up);
						}

						/* PRIVATE */

				}, {
						key: '_toggleGroup',
						value: function _toggleGroup($start, $end) {

								var startIndex = $start ? this.$elements.index($start) : 0,
								    endIndex = this.$elements.index($end),
								    minIndex = Math.min(startIndex, endIndex),
								    maxIndex = Math.max(startIndex, endIndex);

								if (minIndex === startIndex) {
										// Direction: down

										minIndex += 1;
										maxIndex += 1;
								}

								var $newGroup = this.$elements.slice(minIndex, maxIndex);

								if (this.$prevGroup) {

										$newGroup.not(this.$prevGroup).toggleClass(this.options.classes.selected);

										this.$prevGroup.not($newGroup).toggleClass(this.options.classes.selected);
								} else {

										$newGroup.toggleClass(this.options.classes.selected);
								}

								this.$prevGroup = $newGroup;
						}
				}, {
						key: '_getElements',
						value: function _getElements() {

								return this._dtapi ? $(this._dtapi.rows().nodes()) : this.$selectable.find(this.options.selectors.element);
						}
				}, {
						key: '_getEventElement',
						value: function _getEventElement(event) {

								return this._usingSelectionToggler ? $(event.currentTarget).closest(this.options.selectors.element) : $(event.currentTarget);
						}
				}, {
						key: '_resetPrev',
						value: function _resetPrev() {
								var $element = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];
								var $group = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];


								this.$prevElement = $element;
								this.$prevGroup = $group;
						}

						/* API */

				}, {
						key: 'get',
						value: function get() {

								return this.$elements.filter('.' + this.options.classes.selected);
						}
				}, {
						key: 'all',
						value: function all() {

								if (this._isSingle) return;

								this.$elements.addClass(this.options.classes.selected);

								this._resetPrev();

								this._trigger('change');
						}
				}, {
						key: 'clear',
						value: function clear() {

								this.$elements.removeClass(this.options.classes.selected);

								this._resetPrev();

								this._trigger('change');
						}
				}, {
						key: 'invert',
						value: function invert() {

								if (this._isSingle) return;

								this.$elements.toggleClass(this.options.classes.selected);

								this._resetPrev();

								this._trigger('change');
						}
				}]);

				return Selectable;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(Selectable, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Pointer, Svelto.Browser, Svelto.Keyboard, Svelto.Mouse);

/* =========================================================================
 * Svelto - Widgets - Selectable - Actions
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @before widgets/remote/action/action.js
 * @before widgets/remote/modal/modal.js
 * @require ../selectable.js
 * @require widgets/targeter/targeter.js
 * @require widgets/toast/toast.js
 * ========================================================================= */

//TODO: Cross-browser test

(function ($, _, Svelto, Widgets, Factory, Pointer) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'selectableActions',
				plugin: true,
				selector: '.selectable-actions',
				options: {
						ajax: {}, // Default values
						actions: {
								action: function action(ajax) {
										new Widgets.RemoteAction({ ajax: ajax }).request();
								},
								modal: function modal(ajax) {
										new Widgets.RemoteModal({ ajax: ajax }).request();
								},
								page: function page(ajax) {
										window.location.href = ajax.url;
								}
						},
						defaultAction: 'page',
						widget: Widgets.Selectable,
						characters: {
								separator: ','
						},
						messages: {
								no_selected: 'No entries selected'
						},
						placeholders: {
								id: '%ID%'
						},
						attributes: {
								href: 'href' // In order to better support `a` elements (the data value has higher priority)
						},
						datas: {
								id: 'id',
								type: 'type',
								url: 'url',
								data: 'data',
								method: 'method'
						},
						selectors: {
								action: '.action',
								id: false // Selects the element containing the id (from it's `tr` element), for instance it could be `> td:first-child`. If falsy, `datas.id` will be used
						},
						callbacks: {
								action: _.noop
						}
				}
		};

		/* SELECTABLE ACTIONS */

		var SelectableActions = function (_Widgets$Targeter2) {
				_inherits(SelectableActions, _Widgets$Targeter2);

				function SelectableActions() {
						_classCallCheck(this, SelectableActions);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(SelectableActions).apply(this, arguments));
				}

				_createClass(SelectableActions, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								_get(Object.getPrototypeOf(SelectableActions.prototype), '_variables', this).call(this);

								this.$wrapper = this.$element;
								this.$actions = this.$wrapper.find(this.options.selectors.action);
						}
				}, {
						key: '_events',
						value: function _events() {

								_get(Object.getPrototypeOf(SelectableActions.prototype), '_events', this).call(this);

								this.___action();
						}

						/* ACTION */

				}, {
						key: '___action',
						value: function ___action() {

								this._on(this.$actions, Pointer.tap, this.__action);
						}
				}, {
						key: '__action',
						value: function __action(event) {

								var ids = this._getIds();

								if (!ids.length) return $.toast(this.options.messages.no_selected);

								var $action = $(event.target),
								    type = $action.data(this.options.datas.type) || this.options.defaultAction,
								    action = this.options.actions[type];

								if (!action) return;

								var url = $action.data(this.options.datas.url) || $action.attr(this.options.attributes.href) || this.options.ajax.url,
								    data = $action.data(this.options.datas.data) || this.options.ajax.data,
								    method = $action.data(this.options.datas.method) || this.options.ajax.method;

								url = url.replace(this.options.placeholders.id, ids.join(this.options.characters.separator));
								data = _.extend(data || {}, { ids: ids });

								var ajax = _.extend({}, this.options.ajax, {
										url: url,
										data: data,
										method: method
								});

								action(ajax);

								this._trigger('action', event, { type: type, ajax: ajax });
						}

						/* IDs */

				}, {
						key: '_getIds',
						value: function _getIds() {
								var _this84 = this;

								var $rows = this._targetInstance.get(),
								    ids = $rows.get().map(function (row) {
										return _this84.options.selectors.id ? $(row).find(_this84.options.selectors.id).text() : $(row).data(_this84.options.datas.id);
								});

								return _.compact(ids);
						}
				}]);

				return SelectableActions;
		}(Widgets.Targeter);

		/* FACTORY */

		Factory.init(SelectableActions, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Pointer);

/* =========================================================================
 * Svelto - Widgets - Selectable - Actions - Container
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @before widgets/datatables/datatables.js
 * @require ../actions.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'selectableActionsContainer',
				plugin: true,
				selector: '.selectable-actions:not(.popover)',
				options: {
						widget: Widgets.Selectable,
						classes: {
								datatable: 'datatable',
								open: 'open'
						},
						callbacks: {
								open: _.noop,
								close: _.noop
						}
				}
		};

		/* SELECTABLE ACTIONS CONTAINER */

		var SelectableActionsContainer = function (_Widgets$Targeter3) {
				_inherits(SelectableActionsContainer, _Widgets$Targeter3);

				function SelectableActionsContainer() {
						_classCallCheck(this, SelectableActionsContainer);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(SelectableActionsContainer).apply(this, arguments));
				}

				_createClass(SelectableActionsContainer, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								_get(Object.getPrototypeOf(SelectableActionsContainer.prototype), '_variables', this).call(this);

								this.$container = this.$element;

								this._isOpen = this.$container.hasClass(this.options.classes.open);
								this._isDataTable = this.$target.hasClass(this.options.classes.datatable);
						}
				}, {
						key: '_init',
						value: function _init() {

								_get(Object.getPrototypeOf(SelectableActionsContainer.prototype), '_init', this).call(this);

								this.___datatable();
								this.__update();
						}
				}, {
						key: '_events',
						value: function _events() {

								_get(Object.getPrototypeOf(SelectableActionsContainer.prototype), '_events', this).call(this);

								this.___update();
						}

						/* DATATABLE */

				}, {
						key: '___datatable',
						value: function ___datatable() {

								if (!this._isDataTable) return;

								this.$container.removeClass('bordered limited centered');
								this.$target.closest('.card-block').before(this.$container);
						}

						/* UPDATE */

				}, {
						key: '___update',
						value: function ___update() {

								this._on(true, this.$target, 'selectable:change', this.__update);
						}
				}, {
						key: '__update',
						value: function __update() {

								this.toggle(!!this._targetInstance.get().length);
						}

						/* API */

				}, {
						key: 'isOpen',
						value: function isOpen() {

								return this._isOpen;
						}
				}, {
						key: 'toggle',
						value: function toggle() {
								var force = arguments.length <= 0 || arguments[0] === undefined ? !this._isOpen : arguments[0];


								if (!!force !== this._isOpen) {

										this._isOpen = !!force;

										this.$container.toggleClass(this.options.classes.open, this._isOpen);

										this._trigger(this._isOpen ? 'open' : 'close');
								}
						}
				}, {
						key: 'open',
						value: function open() {

								this.toggle(true);
						}
				}, {
						key: 'close',
						value: function close() {

								this.toggle(false);
						}
				}]);

				return SelectableActionsContainer;
		}(Widgets.Targeter);

		/* FACTORY */

		Factory.init(SelectableActionsContainer, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory);

/* =========================================================================
 * Svelto - Widgets - Selectable - Actions - Popover
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ../actions.js
 * @require widgets/popover/popover.js
 * ========================================================================= */

(function ($, _, Svelto, Widgets, Factory, Pointer) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'selectableActionsPopover',
				plugin: true,
				selector: '.selectable-actions.popover',
				options: {
						widget: Widgets.Selectable
				}
		};

		/* SELECTABLE ACTIONS POPOVER */

		var SelectableActionsPopover = function (_Widgets$Targeter4) {
				_inherits(SelectableActionsPopover, _Widgets$Targeter4);

				function SelectableActionsPopover() {
						_classCallCheck(this, SelectableActionsPopover);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(SelectableActionsPopover).apply(this, arguments));
				}

				_createClass(SelectableActionsPopover, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								_get(Object.getPrototypeOf(SelectableActionsPopover.prototype), '_variables', this).call(this);

								this.$popover = this.$element;

								this._popoverInstance = this.$popover.popover('instance');
						}
				}, {
						key: '_init',
						value: function _init() {

								_get(Object.getPrototypeOf(SelectableActionsPopover.prototype), '_init', this).call(this);

								this._popoverInstance.option('positionate.alignment.x', 'left');
								this._popoverInstance.option('positionate.constrainer.$element', this.$window);
						}
				}, {
						key: '_events',
						value: function _events() {

								_get(Object.getPrototypeOf(SelectableActionsPopover.prototype), '_events', this).call(this);

								this.___context();
								this.___action();
						}

						/* CONTEXT */

				}, {
						key: '___context',
						value: function ___context() {

								this._on(true, this.$target, 'contextmenu', this.__context);
						}
				}, {
						key: '__context',
						value: function __context(event) {

								event.preventDefault();
								event.stopImmediatePropagation();

								this._contextEvent = event;

								this._one(true, this.$document, Pointer.up, this._toggle); // Selectable listens on this event, also `contextmenu` gets fired before, so we wouldn't get the updated list of selected elements
						}

						/* ACTION */

				}, {
						key: '___action',
						value: function ___action() {

								this._on(true, 'selectableactions:action', this._close);
						}

						/* PRIVATE API */

				}, {
						key: '_toggle',
						value: function _toggle() {

								this[this._targetInstance.get().length ? '_open' : '_close']();
						}
				}, {
						key: '_open',
						value: function _open() {

								var point = $.eventXY(this._contextEvent);

								this._popoverInstance.option('positionate.point', point);
								this._popoverInstance.open();
						}
				}, {
						key: '_close',
						value: function _close() {

								this._popoverInstance.close();
						}
				}]);

				return SelectableActionsPopover;
		}(Widgets.Targeter);

		/* FACTORY */

		Factory.init(SelectableActionsPopover, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Pointer);

/**
 * marked - a markdown parser
 * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)
 * https://github.com/chjj/marked
 */

;(function () {

		/**
   * Block-Level Grammar
   */

		var block = {
				newline: /^\n+/,
				code: /^( {4}[^\n]+\n*)+/,
				fences: noop,
				hr: /^( *[-*_]){3,} *(?:\n+|$)/,
				heading: /^ *(#{1,6}) *([^\n]+?) *#* *(?:\n+|$)/,
				nptable: noop,
				lheading: /^([^\n]+)\n *(=|-){2,} *(?:\n+|$)/,
				blockquote: /^( *>[^\n]+(\n(?!def)[^\n]+)*\n*)+/,
				list: /^( *)(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,
				html: /^ *(?:comment *(?:\n|\s*$)|closed *(?:\n{2,}|\s*$)|closing *(?:\n{2,}|\s*$))/,
				def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +["(]([^\n]+)[")])? *(?:\n+|$)/,
				table: noop,
				paragraph: /^((?:[^\n]+\n?(?!hr|heading|lheading|blockquote|tag|def))+)\n*/,
				text: /^[^\n]+/
		};

		block.bullet = /(?:[*+-]|\d+\.)/;
		block.item = /^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/;
		block.item = replace(block.item, 'gm')(/bull/g, block.bullet)();

		block.list = replace(block.list)(/bull/g, block.bullet)('hr', '\\n+(?=\\1?(?:[-*_] *){3,}(?:\\n+|$))')('def', '\\n+(?=' + block.def.source + ')')();

		block.blockquote = replace(block.blockquote)('def', block.def)();

		block._tag = '(?!(?:' + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code' + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo' + '|span|br|wbr|ins|del|img)\\b)\\w+(?!:/|[^\\w\\s@]*@)\\b';

		block.html = replace(block.html)('comment', /<!--[\s\S]*?-->/)('closed', /<(tag)[\s\S]+?<\/\1>/)('closing', /<tag(?:"[^"]*"|'[^']*'|[^'">])*?>/)(/tag/g, block._tag)();

		block.paragraph = replace(block.paragraph)('hr', block.hr)('heading', block.heading)('lheading', block.lheading)('blockquote', block.blockquote)('tag', '<' + block._tag)('def', block.def)();

		/**
   * Normal Block Grammar
   */

		block.normal = merge({}, block);

		/**
   * GFM Block Grammar
   */

		block.gfm = merge({}, block.normal, {
				fences: /^ *(`{3,}|~{3,})[ \.]*(\S+)? *\n([\s\S]*?)\s*\1 *(?:\n+|$)/,
				paragraph: /^/,
				heading: /^ *(#{1,6}) +([^\n]+?) *#* *(?:\n+|$)/
		});

		block.gfm.paragraph = replace(block.paragraph)('(?!', '(?!' + block.gfm.fences.source.replace('\\1', '\\2') + '|' + block.list.source.replace('\\1', '\\3') + '|')();

		/**
   * GFM + Tables Block Grammar
   */

		block.tables = merge({}, block.gfm, {
				nptable: /^ *(\S.*\|.*)\n *([-:]+ *\|[-| :]*)\n((?:.*\|.*(?:\n|$))*)\n*/,
				table: /^ *\|(.+)\n *\|( *[-:]+[-| :]*)\n((?: *\|.*(?:\n|$))*)\n*/
		});

		/**
   * Block Lexer
   */

		function Lexer(options) {
				this.tokens = [];
				this.tokens.links = {};
				this.options = options || marked.defaults;
				this.rules = block.normal;

				if (this.options.gfm) {
						if (this.options.tables) {
								this.rules = block.tables;
						} else {
								this.rules = block.gfm;
						}
				}
		}

		/**
   * Expose Block Rules
   */

		Lexer.rules = block;

		/**
   * Static Lex Method
   */

		Lexer.lex = function (src, options) {
				var lexer = new Lexer(options);
				return lexer.lex(src);
		};

		/**
   * Preprocessing
   */

		Lexer.prototype.lex = function (src) {
				src = src.replace(/\r\n|\r/g, '\n').replace(/\t/g, '    ').replace(/\u00a0/g, ' ').replace(/\u2424/g, '\n');

				return this.token(src, true);
		};

		/**
   * Lexing
   */

		Lexer.prototype.token = function (src, top, bq) {
				var src = src.replace(/^ +$/gm, ''),
				    next,
				    loose,
				    cap,
				    bull,
				    b,
				    item,
				    space,
				    i,
				    l;

				while (src) {
						// newline
						if (cap = this.rules.newline.exec(src)) {
								src = src.substring(cap[0].length);
								if (cap[0].length > 1) {
										this.tokens.push({
												type: 'space'
										});
								}
						}

						// code
						if (cap = this.rules.code.exec(src)) {
								src = src.substring(cap[0].length);
								cap = cap[0].replace(/^ {4}/gm, '');
								this.tokens.push({
										type: 'code',
										text: !this.options.pedantic ? cap.replace(/\n+$/, '') : cap
								});
								continue;
						}

						// fences (gfm)
						if (cap = this.rules.fences.exec(src)) {
								src = src.substring(cap[0].length);
								this.tokens.push({
										type: 'code',
										lang: cap[2],
										text: cap[3] || ''
								});
								continue;
						}

						// heading
						if (cap = this.rules.heading.exec(src)) {
								src = src.substring(cap[0].length);
								this.tokens.push({
										type: 'heading',
										depth: cap[1].length,
										text: cap[2]
								});
								continue;
						}

						// table no leading pipe (gfm)
						if (top && (cap = this.rules.nptable.exec(src))) {
								src = src.substring(cap[0].length);

								item = {
										type: 'table',
										header: cap[1].replace(/^ *| *\| *$/g, '').split(/ *\| */),
										align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
										cells: cap[3].replace(/\n$/, '').split('\n')
								};

								for (i = 0; i < item.align.length; i++) {
										if (/^ *-+: *$/.test(item.align[i])) {
												item.align[i] = 'right';
										} else if (/^ *:-+: *$/.test(item.align[i])) {
												item.align[i] = 'center';
										} else if (/^ *:-+ *$/.test(item.align[i])) {
												item.align[i] = 'left';
										} else {
												item.align[i] = null;
										}
								}

								for (i = 0; i < item.cells.length; i++) {
										item.cells[i] = item.cells[i].split(/ *\| */);
								}

								this.tokens.push(item);

								continue;
						}

						// lheading
						if (cap = this.rules.lheading.exec(src)) {
								src = src.substring(cap[0].length);
								this.tokens.push({
										type: 'heading',
										depth: cap[2] === '=' ? 1 : 2,
										text: cap[1]
								});
								continue;
						}

						// hr
						if (cap = this.rules.hr.exec(src)) {
								src = src.substring(cap[0].length);
								this.tokens.push({
										type: 'hr'
								});
								continue;
						}

						// blockquote
						if (cap = this.rules.blockquote.exec(src)) {
								src = src.substring(cap[0].length);

								this.tokens.push({
										type: 'blockquote_start'
								});

								cap = cap[0].replace(/^ *> ?/gm, '');

								// Pass `top` to keep the current
								// "toplevel" state. This is exactly
								// how markdown.pl works.
								this.token(cap, top, true);

								this.tokens.push({
										type: 'blockquote_end'
								});

								continue;
						}

						// list
						if (cap = this.rules.list.exec(src)) {
								src = src.substring(cap[0].length);
								bull = cap[2];

								this.tokens.push({
										type: 'list_start',
										ordered: bull.length > 1
								});

								// Get each top-level item.
								cap = cap[0].match(this.rules.item);

								next = false;
								l = cap.length;
								i = 0;

								for (; i < l; i++) {
										item = cap[i];

										// Remove the list item's bullet
										// so it is seen as the next token.
										space = item.length;
										item = item.replace(/^ *([*+-]|\d+\.) +/, '');

										// Outdent whatever the
										// list item contains. Hacky.
										if (~item.indexOf('\n ')) {
												space -= item.length;
												item = !this.options.pedantic ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '') : item.replace(/^ {1,4}/gm, '');
										}

										// Determine whether the next list item belongs here.
										// Backpedal if it does not belong in this list.
										if (this.options.smartLists && i !== l - 1) {
												b = block.bullet.exec(cap[i + 1])[0];
												if (bull !== b && !(bull.length > 1 && b.length > 1)) {
														src = cap.slice(i + 1).join('\n') + src;
														i = l - 1;
												}
										}

										// Determine whether item is loose or not.
										// Use: /(^|\n)(?! )[^\n]+\n\n(?!\s*$)/
										// for discount behavior.
										loose = next || /\n\n(?!\s*$)/.test(item);
										if (i !== l - 1) {
												next = item.charAt(item.length - 1) === '\n';
												if (!loose) loose = next;
										}

										this.tokens.push({
												type: loose ? 'loose_item_start' : 'list_item_start'
										});

										// Recurse.
										this.token(item, false, bq);

										this.tokens.push({
												type: 'list_item_end'
										});
								}

								this.tokens.push({
										type: 'list_end'
								});

								continue;
						}

						// html
						if (cap = this.rules.html.exec(src)) {
								src = src.substring(cap[0].length);
								this.tokens.push({
										type: this.options.sanitize ? 'paragraph' : 'html',
										pre: !this.options.sanitizer && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),
										text: cap[0]
								});
								continue;
						}

						// def
						if (!bq && top && (cap = this.rules.def.exec(src))) {
								src = src.substring(cap[0].length);
								this.tokens.links[cap[1].toLowerCase()] = {
										href: cap[2],
										title: cap[3]
								};
								continue;
						}

						// table (gfm)
						if (top && (cap = this.rules.table.exec(src))) {
								src = src.substring(cap[0].length);

								item = {
										type: 'table',
										header: cap[1].replace(/^ *| *\| *$/g, '').split(/ *\| */),
										align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
										cells: cap[3].replace(/(?: *\| *)?\n$/, '').split('\n')
								};

								for (i = 0; i < item.align.length; i++) {
										if (/^ *-+: *$/.test(item.align[i])) {
												item.align[i] = 'right';
										} else if (/^ *:-+: *$/.test(item.align[i])) {
												item.align[i] = 'center';
										} else if (/^ *:-+ *$/.test(item.align[i])) {
												item.align[i] = 'left';
										} else {
												item.align[i] = null;
										}
								}

								for (i = 0; i < item.cells.length; i++) {
										item.cells[i] = item.cells[i].replace(/^ *\| *| *\| *$/g, '').split(/ *\| */);
								}

								this.tokens.push(item);

								continue;
						}

						// top-level paragraph
						if (top && (cap = this.rules.paragraph.exec(src))) {
								src = src.substring(cap[0].length);
								this.tokens.push({
										type: 'paragraph',
										text: cap[1].charAt(cap[1].length - 1) === '\n' ? cap[1].slice(0, -1) : cap[1]
								});
								continue;
						}

						// text
						if (cap = this.rules.text.exec(src)) {
								// Top-level should never reach here.
								src = src.substring(cap[0].length);
								this.tokens.push({
										type: 'text',
										text: cap[0]
								});
								continue;
						}

						if (src) {
								throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));
						}
				}

				return this.tokens;
		};

		/**
   * Inline-Level Grammar
   */

		var inline = {
				escape: /^\\([\\`*{}\[\]()#+\-.!_>])/,
				autolink: /^<([^ >]+(@|:\/)[^ >]+)>/,
				url: noop,
				tag: /^<!--[\s\S]*?-->|^<\/?\w+(?:"[^"]*"|'[^']*'|[^'">])*?>/,
				link: /^!?\[(inside)\]\(href\)/,
				reflink: /^!?\[(inside)\]\s*\[([^\]]*)\]/,
				nolink: /^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/,
				strong: /^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/,
				em: /^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,
				code: /^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/,
				br: /^ {2,}\n(?!\s*$)/,
				del: noop,
				text: /^[\s\S]+?(?=[\\<!\[_*`]| {2,}\n|$)/
		};

		inline._inside = /(?:\[[^\]]*\]|[^\[\]]|\](?=[^\[]*\]))*/;
		inline._href = /\s*<?([\s\S]*?)>?(?:\s+['"]([\s\S]*?)['"])?\s*/;

		inline.link = replace(inline.link)('inside', inline._inside)('href', inline._href)();

		inline.reflink = replace(inline.reflink)('inside', inline._inside)();

		/**
   * Normal Inline Grammar
   */

		inline.normal = merge({}, inline);

		/**
   * Pedantic Inline Grammar
   */

		inline.pedantic = merge({}, inline.normal, {
				strong: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
				em: /^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/
		});

		/**
   * GFM Inline Grammar
   */

		inline.gfm = merge({}, inline.normal, {
				escape: replace(inline.escape)('])', '~|])')(),
				url: /^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/,
				del: /^~~(?=\S)([\s\S]*?\S)~~/,
				text: replace(inline.text)(']|', '~]|')('|', '|https?://|')()
		});

		/**
   * GFM + Line Breaks Inline Grammar
   */

		inline.breaks = merge({}, inline.gfm, {
				br: replace(inline.br)('{2,}', '*')(),
				text: replace(inline.gfm.text)('{2,}', '*')()
		});

		/**
   * Inline Lexer & Compiler
   */

		function InlineLexer(links, options) {
				this.options = options || marked.defaults;
				this.links = links;
				this.rules = inline.normal;
				this.renderer = this.options.renderer || new Renderer();
				this.renderer.options = this.options;

				if (!this.links) {
						throw new Error('Tokens array requires a `links` property.');
				}

				if (this.options.gfm) {
						if (this.options.breaks) {
								this.rules = inline.breaks;
						} else {
								this.rules = inline.gfm;
						}
				} else if (this.options.pedantic) {
						this.rules = inline.pedantic;
				}
		}

		/**
   * Expose Inline Rules
   */

		InlineLexer.rules = inline;

		/**
   * Static Lexing/Compiling Method
   */

		InlineLexer.output = function (src, links, options) {
				var inline = new InlineLexer(links, options);
				return inline.output(src);
		};

		/**
   * Lexing/Compiling
   */

		InlineLexer.prototype.output = function (src) {
				var out = '',
				    link,
				    text,
				    href,
				    cap;

				while (src) {
						// escape
						if (cap = this.rules.escape.exec(src)) {
								src = src.substring(cap[0].length);
								out += cap[1];
								continue;
						}

						// autolink
						if (cap = this.rules.autolink.exec(src)) {
								src = src.substring(cap[0].length);
								if (cap[2] === '@') {
										text = cap[1].charAt(6) === ':' ? this.mangle(cap[1].substring(7)) : this.mangle(cap[1]);
										href = this.mangle('mailto:') + text;
								} else {
										text = escape(cap[1]);
										href = text;
								}
								out += this.renderer.link(href, null, text);
								continue;
						}

						// url (gfm)
						if (!this.inLink && (cap = this.rules.url.exec(src))) {
								src = src.substring(cap[0].length);
								text = escape(cap[1]);
								href = text;
								out += this.renderer.link(href, null, text);
								continue;
						}

						// tag
						if (cap = this.rules.tag.exec(src)) {
								if (!this.inLink && /^<a /i.test(cap[0])) {
										this.inLink = true;
								} else if (this.inLink && /^<\/a>/i.test(cap[0])) {
										this.inLink = false;
								}
								src = src.substring(cap[0].length);
								out += this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0];
								continue;
						}

						// link
						if (cap = this.rules.link.exec(src)) {
								src = src.substring(cap[0].length);
								this.inLink = true;
								out += this.outputLink(cap, {
										href: cap[2],
										title: cap[3]
								});
								this.inLink = false;
								continue;
						}

						// reflink, nolink
						if ((cap = this.rules.reflink.exec(src)) || (cap = this.rules.nolink.exec(src))) {
								src = src.substring(cap[0].length);
								link = (cap[2] || cap[1]).replace(/\s+/g, ' ');
								link = this.links[link.toLowerCase()];
								if (!link || !link.href) {
										out += cap[0].charAt(0);
										src = cap[0].substring(1) + src;
										continue;
								}
								this.inLink = true;
								out += this.outputLink(cap, link);
								this.inLink = false;
								continue;
						}

						// strong
						if (cap = this.rules.strong.exec(src)) {
								src = src.substring(cap[0].length);
								out += this.renderer.strong(this.output(cap[2] || cap[1]));
								continue;
						}

						// em
						if (cap = this.rules.em.exec(src)) {
								src = src.substring(cap[0].length);
								out += this.renderer.em(this.output(cap[2] || cap[1]));
								continue;
						}

						// code
						if (cap = this.rules.code.exec(src)) {
								src = src.substring(cap[0].length);
								out += this.renderer.codespan(escape(cap[2], true));
								continue;
						}

						// br
						if (cap = this.rules.br.exec(src)) {
								src = src.substring(cap[0].length);
								out += this.renderer.br();
								continue;
						}

						// del (gfm)
						if (cap = this.rules.del.exec(src)) {
								src = src.substring(cap[0].length);
								out += this.renderer.del(this.output(cap[1]));
								continue;
						}

						// text
						if (cap = this.rules.text.exec(src)) {
								src = src.substring(cap[0].length);
								out += this.renderer.text(escape(this.smartypants(cap[0])));
								continue;
						}

						if (src) {
								throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));
						}
				}

				return out;
		};

		/**
   * Compile Link
   */

		InlineLexer.prototype.outputLink = function (cap, link) {
				var href = escape(link.href),
				    title = link.title ? escape(link.title) : null;

				return cap[0].charAt(0) !== '!' ? this.renderer.link(href, title, this.output(cap[1])) : this.renderer.image(href, title, escape(cap[1]));
		};

		/**
   * Smartypants Transformations
   */

		InlineLexer.prototype.smartypants = function (text) {
				if (!this.options.smartypants) return text;
				return text
				// em-dashes
				.replace(/---/g, '—')
				// en-dashes
				.replace(/--/g, '–')
				// opening singles
				.replace(/(^|[-\u2014/(\[{"\s])'/g, '$1‘')
				// closing singles & apostrophes
				.replace(/'/g, '’')
				// opening doubles
				.replace(/(^|[-\u2014/(\[{\u2018\s])"/g, '$1“')
				// closing doubles
				.replace(/"/g, '”')
				// ellipses
				.replace(/\.{3}/g, '…');
		};

		/**
   * Mangle Links
   */

		InlineLexer.prototype.mangle = function (text) {
				if (!this.options.mangle) return text;
				var out = '',
				    l = text.length,
				    i = 0,
				    ch;

				for (; i < l; i++) {
						ch = text.charCodeAt(i);
						if (Math.random() > 0.5) {
								ch = 'x' + ch.toString(16);
						}
						out += '&#' + ch + ';';
				}

				return out;
		};

		/**
   * Renderer
   */

		function Renderer(options) {
				this.options = options || {};
		}

		Renderer.prototype.code = function (code, lang, escaped) {
				if (this.options.highlight) {
						var out = this.options.highlight(code, lang);
						if (out != null && out !== code) {
								escaped = true;
								code = out;
						}
				}

				if (!lang) {
						return '<pre><code>' + (escaped ? code : escape(code, true)) + '\n</code></pre>';
				}

				return '<pre><code class="' + this.options.langPrefix + escape(lang, true) + '">' + (escaped ? code : escape(code, true)) + '\n</code></pre>\n';
		};

		Renderer.prototype.blockquote = function (quote) {
				return '<blockquote>\n' + quote + '</blockquote>\n';
		};

		Renderer.prototype.html = function (html) {
				return html;
		};

		Renderer.prototype.heading = function (text, level, raw) {
				return '<h' + level + ' id="' + this.options.headerPrefix + raw.toLowerCase().replace(/[^\w]+/g, '-') + '">' + text + '</h' + level + '>\n';
		};

		Renderer.prototype.hr = function () {
				return this.options.xhtml ? '<hr/>\n' : '<hr>\n';
		};

		Renderer.prototype.list = function (body, ordered) {
				var type = ordered ? 'ol' : 'ul';
				return '<' + type + '>\n' + body + '</' + type + '>\n';
		};

		Renderer.prototype.listitem = function (text) {
				return '<li>' + text + '</li>\n';
		};

		Renderer.prototype.paragraph = function (text) {
				return '<p>' + text + '</p>\n';
		};

		Renderer.prototype.table = function (header, body) {
				return '<table>\n' + '<thead>\n' + header + '</thead>\n' + '<tbody>\n' + body + '</tbody>\n' + '</table>\n';
		};

		Renderer.prototype.tablerow = function (content) {
				return '<tr>\n' + content + '</tr>\n';
		};

		Renderer.prototype.tablecell = function (content, flags) {
				var type = flags.header ? 'th' : 'td';
				var tag = flags.align ? '<' + type + ' style="text-align:' + flags.align + '">' : '<' + type + '>';
				return tag + content + '</' + type + '>\n';
		};

		// span level renderer
		Renderer.prototype.strong = function (text) {
				return '<strong>' + text + '</strong>';
		};

		Renderer.prototype.em = function (text) {
				return '<em>' + text + '</em>';
		};

		Renderer.prototype.codespan = function (text) {
				return '<code>' + text + '</code>';
		};

		Renderer.prototype.br = function () {
				return this.options.xhtml ? '<br/>' : '<br>';
		};

		Renderer.prototype.del = function (text) {
				return '<del>' + text + '</del>';
		};

		Renderer.prototype.link = function (href, title, text) {
				if (this.options.sanitize) {
						try {
								var prot = decodeURIComponent(unescape(href)).replace(/[^\w:]/g, '').toLowerCase();
						} catch (e) {
								return '';
						}
						if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0) {
								return '';
						}
				}
				var out = '<a href="' + href + '"';
				if (title) {
						out += ' title="' + title + '"';
				}
				out += '>' + text + '</a>';
				return out;
		};

		Renderer.prototype.image = function (href, title, text) {
				var out = '<img src="' + href + '" alt="' + text + '"';
				if (title) {
						out += ' title="' + title + '"';
				}
				out += this.options.xhtml ? '/>' : '>';
				return out;
		};

		Renderer.prototype.text = function (text) {
				return text;
		};

		/**
   * Parsing & Compiling
   */

		function Parser(options) {
				this.tokens = [];
				this.token = null;
				this.options = options || marked.defaults;
				this.options.renderer = this.options.renderer || new Renderer();
				this.renderer = this.options.renderer;
				this.renderer.options = this.options;
		}

		/**
   * Static Parse Method
   */

		Parser.parse = function (src, options, renderer) {
				var parser = new Parser(options, renderer);
				return parser.parse(src);
		};

		/**
   * Parse Loop
   */

		Parser.prototype.parse = function (src) {
				this.inline = new InlineLexer(src.links, this.options, this.renderer);
				this.tokens = src.reverse();

				var out = '';
				while (this.next()) {
						out += this.tok();
				}

				return out;
		};

		/**
   * Next Token
   */

		Parser.prototype.next = function () {
				return this.token = this.tokens.pop();
		};

		/**
   * Preview Next Token
   */

		Parser.prototype.peek = function () {
				return this.tokens[this.tokens.length - 1] || 0;
		};

		/**
   * Parse Text Tokens
   */

		Parser.prototype.parseText = function () {
				var body = this.token.text;

				while (this.peek().type === 'text') {
						body += '\n' + this.next().text;
				}

				return this.inline.output(body);
		};

		/**
   * Parse Current Token
   */

		Parser.prototype.tok = function () {
				switch (this.token.type) {
						case 'space':
								{
										return '';
								}
						case 'hr':
								{
										return this.renderer.hr();
								}
						case 'heading':
								{
										return this.renderer.heading(this.inline.output(this.token.text), this.token.depth, this.token.text);
								}
						case 'code':
								{
										return this.renderer.code(this.token.text, this.token.lang, this.token.escaped);
								}
						case 'table':
								{
										var header = '',
										    body = '',
										    i,
										    row,
										    cell,
										    flags,
										    j;

										// header
										cell = '';
										for (i = 0; i < this.token.header.length; i++) {
												flags = { header: true, align: this.token.align[i] };
												cell += this.renderer.tablecell(this.inline.output(this.token.header[i]), { header: true, align: this.token.align[i] });
										}
										header += this.renderer.tablerow(cell);

										for (i = 0; i < this.token.cells.length; i++) {
												row = this.token.cells[i];

												cell = '';
												for (j = 0; j < row.length; j++) {
														cell += this.renderer.tablecell(this.inline.output(row[j]), { header: false, align: this.token.align[j] });
												}

												body += this.renderer.tablerow(cell);
										}
										return this.renderer.table(header, body);
								}
						case 'blockquote_start':
								{
										var body = '';

										while (this.next().type !== 'blockquote_end') {
												body += this.tok();
										}

										return this.renderer.blockquote(body);
								}
						case 'list_start':
								{
										var body = '',
										    ordered = this.token.ordered;

										while (this.next().type !== 'list_end') {
												body += this.tok();
										}

										return this.renderer.list(body, ordered);
								}
						case 'list_item_start':
								{
										var body = '';

										while (this.next().type !== 'list_item_end') {
												body += this.token.type === 'text' ? this.parseText() : this.tok();
										}

										return this.renderer.listitem(body);
								}
						case 'loose_item_start':
								{
										var body = '';

										while (this.next().type !== 'list_item_end') {
												body += this.tok();
										}

										return this.renderer.listitem(body);
								}
						case 'html':
								{
										var html = !this.token.pre && !this.options.pedantic ? this.inline.output(this.token.text) : this.token.text;
										return this.renderer.html(html);
								}
						case 'paragraph':
								{
										return this.renderer.paragraph(this.inline.output(this.token.text));
								}
						case 'text':
								{
										return this.renderer.paragraph(this.parseText());
								}
				}
		};

		/**
   * Helpers
   */

		function escape(html, encode) {
				return html.replace(!encode ? /&(?!#?\w+;)/g : /&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
		}

		function unescape(html) {
				return html.replace(/&([#\w]+);/g, function (_, n) {
						n = n.toLowerCase();
						if (n === 'colon') return ':';
						if (n.charAt(0) === '#') {
								return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));
						}
						return '';
				});
		}

		function replace(regex, opt) {
				regex = regex.source;
				opt = opt || '';
				return function self(name, val) {
						if (!name) return new RegExp(regex, opt);
						val = val.source || val;
						val = val.replace(/(^|[^\[])\^/g, '$1');
						regex = regex.replace(name, val);
						return self;
				};
		}

		function noop() {}
		noop.exec = noop;

		function merge(obj) {
				var i = 1,
				    target,
				    key;

				for (; i < arguments.length; i++) {
						target = arguments[i];
						for (key in target) {
								if (Object.prototype.hasOwnProperty.call(target, key)) {
										obj[key] = target[key];
								}
						}
				}

				return obj;
		}

		/**
   * Marked
   */

		function marked(src, opt, callback) {
				if (callback || typeof opt === 'function') {
						if (!callback) {
								callback = opt;
								opt = null;
						}

						opt = merge({}, marked.defaults, opt || {});

						var highlight = opt.highlight,
						    tokens,
						    pending,
						    i = 0;

						try {
								tokens = Lexer.lex(src, opt);
						} catch (e) {
								return callback(e);
						}

						pending = tokens.length;

						var done = function done(err) {
								if (err) {
										opt.highlight = highlight;
										return callback(err);
								}

								var out;

								try {
										out = Parser.parse(tokens, opt);
								} catch (e) {
										err = e;
								}

								opt.highlight = highlight;

								return err ? callback(err) : callback(null, out);
						};

						if (!highlight || highlight.length < 3) {
								return done();
						}

						delete opt.highlight;

						if (!pending) return done();

						for (; i < tokens.length; i++) {
								(function (token) {
										if (token.type !== 'code') {
												return --pending || done();
										}
										return highlight(token.text, token.lang, function (err, code) {
												if (err) return done(err);
												if (code == null || code === token.text) {
														return --pending || done();
												}
												token.text = code;
												token.escaped = true;
												--pending || done();
										});
								})(tokens[i]);
						}

						return;
				}
				try {
						if (opt) opt = merge({}, marked.defaults, opt);
						return Parser.parse(Lexer.lex(src, opt), opt);
				} catch (e) {
						e.message += '\nPlease report this to https://github.com/chjj/marked.';
						if ((opt || marked.defaults).silent) {
								return '<p>An error occured:</p><pre>' + escape(e.message + '', true) + '</pre>';
						}
						throw e;
				}
		}

		/**
   * Options
   */

		marked.options = marked.setOptions = function (opt) {
				merge(marked.defaults, opt);
				return marked;
		};

		marked.defaults = {
				gfm: true,
				tables: true,
				breaks: false,
				pedantic: false,
				sanitize: false,
				sanitizer: null,
				mangle: true,
				smartLists: false,
				silent: false,
				highlight: null,
				langPrefix: 'lang-',
				smartypants: false,
				headerPrefix: '',
				renderer: new Renderer(),
				xhtml: false
		};

		/**
   * Expose
   */

		marked.Parser = Parser;
		marked.parser = Parser.parse;

		marked.Renderer = Renderer;

		marked.Lexer = Lexer;
		marked.lexer = Lexer.lex;

		marked.InlineLexer = InlineLexer;
		marked.inlineLexer = InlineLexer.output;

		marked.parse = marked;

		this.marked = marked;
}).call(function () {
		return this || (typeof window !== 'undefined' ? window : global);
}());

/* =========================================================================
 * Svelto - Widgets - Editor
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require ./vendor/marked.js
 * @require core/widget/widget.js
 * ========================================================================= */

//TODO: Cross browser testing
//TODO: Add headings support (level 1/3/5, like github does)
//TODO: Add emoji support
//TODO: MAYBE make a leaner editor with some stuff unimplemented, then extend it with a `EditorMarkdown` etc...
//FIXME: Add history support

(function ($, _, Svelto, Widgets, Factory, Pointer) {

		'use strict';

		/* CONFIG */

		var config = {
				name: 'editor',
				plugin: true,
				selector: '.editor',
				options: {
						parser: window.marked,
						actions: {
								bold: function bold() {
										this._action('**', '**', 'bold');
								},
								italic: function italic() {
										this._action('_', '_', 'italic');
								},
								strikethrough: function strikethrough() {
										this._action('~~', '~~', 'removed');
								},
								list_unordered: function list_unordered() {
										this._action('\n- ', '\n', 'List element');
								},
								list_ordered: function list_ordered() {
										this._action('\n1. ', '\n', 'List element');
								},
								link: function link() {
										this._action('[', '](http://example.com)', 'Link');
								},
								image: function image() {
										this._action('![', '](http://example.com/image.jpg)', 'Image');
								},
								code: function code() {
										this._action('`', '`', 'code');
								},
								quote: function quote() {
										this._action('\n> ', '\n', 'Quote');
								},
								divider: function divider() {
										this._action('\n-----', '\n', '', false);
								},
								undo: function undo() {
										document.execCommand('undo');
								},
								redo: function redo() {
										document.execCommand('redo');
								},
								preview: function preview() {
										this.togglePreview();
								},
								fullscreen: function fullscreen() {
										this.toggleFullscreen();
								}
						},
						datas: {
								action: 'action'
						},
						classes: {
								preview: 'preview',
								fullscreen: 'fullscreen',
								trigger: {
										active: 'active text-secondary'
								}
						},
						selectors: {
								actions: '[data-action]',
								textarea: 'textarea',
								preview: '.editor-preview',
								triggers: {
										all: '[data-action]',
										preview: '[data-action="preview"]',
										fullscreen: '[data-action="fullscreen"]'
								}
						},
						keystrokes: {
								'ctmd + b': ['action', 'bold'],
								'ctmd + i': ['action', 'italic'],
								'ctmd + s': ['action', 'strikethrough'],
								'ctmd + u': ['action', 'list_unordered'],
								'ctmd + o': ['action', 'list_ordered'],
								'ctmd + l': ['action', 'link'],
								'ctmd + g': ['action', 'image'],
								'ctmd + k': ['action', 'code'],
								'ctmd + m': ['action', 'quote'],
								'ctmd + d': ['action', 'divider'],
								'ctmd + p': ['action', 'preview'],
								'ctmd + f': ['action', 'fullscreen'],
								'esc': 'unfullscreen'
						},
						callbacks: {
								action: _.noop
						}
				}
		};

		/* EDITOR */

		var Editor = function (_Widgets$Widget43) {
				_inherits(Editor, _Widgets$Widget43);

				function Editor() {
						_classCallCheck(this, Editor);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Editor).apply(this, arguments));
				}

				_createClass(Editor, [{
						key: '_variables',


						/* SPECIAL */

						value: function _variables() {

								this.$editor = this.$element;
								this.$textarea = this.$editor.find(this.options.selectors.textarea);
								this.textarea = this.$textarea[0];
								this.$preview = this.$editor.find(this.options.selectors.preview);

								this.$triggers = this.$editor.find(this.options.selectors.triggers.all);
								this.$triggerPreview = this.$triggers.filter(this.options.selectors.triggers.preview);
								this.$triggerFullscreen = this.$triggers.filter(this.options.selectors.triggers.fullscreen);

								this._isPreview = this.$editor.hasClass(this.options.classes.preview);
								this._isFullscreen = this.$editor.hasClass(this.options.classes.fullscreen);
						}
				}, {
						key: '_init',
						value: function _init() {

								this.___keydown();
								this.___triggers();
						}

						/* KEYDOWN */

				}, {
						key: '___keydown',
						value: function ___keydown() {

								this._onHover([this.$document, 'keydown', this.__keydown]);
						}

						/* TRIGGERS */

				}, {
						key: '___triggers',
						value: function ___triggers() {
								var _iteratorNormalCompletion17 = true;
								var _didIteratorError17 = false;
								var _iteratorError17 = undefined;

								try {

										for (var _iterator17 = this.$triggers[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {
												var trigger = _step17.value;


												var $trigger = $(trigger),
												    action = $trigger.data(this.options.datas.action);

												this._on($trigger, Pointer.tap, _.wrap(action, this.action));
										}
								} catch (err) {
										_didIteratorError17 = true;
										_iteratorError17 = err;
								} finally {
										try {
												if (!_iteratorNormalCompletion17 && _iterator17.return) {
														_iterator17.return();
												}
										} finally {
												if (_didIteratorError17) {
														throw _iteratorError17;
												}
										}
								}
						}

						/* SELECTION */

				}, {
						key: '_getSelection',
						value: function _getSelection() {

								var start = this.textarea.selectionStart,
								    end = this.textarea.selectionEnd;

								return {
										start: start,
										end: end,
										text: this.$textarea.val().substring(start, end)
								};
						}
				}, {
						key: '_getWordSelection',
						value: function _getWordSelection() {

								var value = this.$textarea.val(),
								    selection = this._getSelection();

								if (selection.text.length || !value) return selection;

								/* FINDING */

								var start = selection.start;

								while (start >= 0 && start < value.length) {

										if (!value[start].match(/[a-zA-Z0-9-]/)) break;

										start -= 1;
								}

								start = Math.min(selection.start, start + 1);

								var end = selection.end + 1;

								while (end < value.length) {

										if (!value[end].match(/[a-zA-Z0-9-]/)) break;

										end += 1;
								}

								if (start === selection.start || end === selection.end) return selection;

								this.textarea.setSelectionRange(start, end);

								return this._getSelection();
						}
				}, {
						key: '_replaceSelection',
						value: function _replaceSelection(prefix, suffix, placeholder) {

								var value = this.$textarea.val(),
								    selection = this._getSelection(),
								    newValue = value.substr(0, selection.start) + prefix + placeholder + suffix + value.substr(selection.end, value.length);

								this.$textarea.val(newValue).change();

								this.textarea.setSelectionRange(selection.start + prefix.length, selection.start + prefix.length + placeholder.length);
						}
				}, {
						key: '_isSelectionWrapped',
						value: function _isSelectionWrapped(prefix, suffix) {

								var value = this.$textarea.val(),
								    selection = this._getSelection();

								return value.substr(selection.start - prefix.length, prefix.length) === prefix && value.substr(selection.end, suffix.length) === suffix;
						}
				}, {
						key: '_toggleWrapSelection',
						value: function _toggleWrapSelection(prefix, suffix, placeholder) {

								if (this._isSelectionWrapped(prefix, suffix)) {

										this._unwrapSelection(prefix, suffix, placeholder);
								} else {

										this._wrapSelection(prefix, suffix);
								}
						}
				}, {
						key: '_wrapSelection',
						value: function _wrapSelection(prefix, suffix) {

								var value = this.$textarea.val(),
								    selection = this._getSelection(),
								    newValue = value.substr(0, selection.start) + prefix + selection.text + suffix + value.substr(selection.end, value.length);

								this.$textarea.val(newValue).change();

								this.textarea.setSelectionRange(selection.start + prefix.length, selection.end + prefix.length);
						}
				}, {
						key: '_unwrapSelection',
						value: function _unwrapSelection(prefix, suffix, placeholder) {

								var value = this.$textarea.val(),
								    selection = this._getSelection(),
								    isPlaceholder = selection.text === placeholder,
								    newValue = value.substr(0, selection.start - prefix.length) + (isPlaceholder ? '' : selection.text) + value.substr(selection.end + suffix.length, value.length);

								this.$textarea.val(newValue).change();

								this.textarea.setSelectionRange(selection.start - prefix.length, selection.end - prefix.length - (isPlaceholder ? selection.text.length : 0));
						}

						/* ACTION */

				}, {
						key: '_action',
						value: function _action(prefix, suffix, placeholder) {
								var needWord = arguments.length <= 3 || arguments[3] === undefined ? true : arguments[3];


								var selection = needWord ? this._getWordSelection() : this._getSelection();

								if (selection.text.length) {

										this._toggleWrapSelection(prefix, suffix, placeholder);
								} else {

										this._replaceSelection(prefix, suffix, placeholder);
								}
						}

						/* PARSE */

				}, {
						key: '_parse',
						value: function _parse() {
								var str = arguments.length <= 0 || arguments[0] === undefined ? this.$textarea.val() : arguments[0];


								return this.options.parser(str);
						}

						/* RENDER */

				}, {
						key: '_render',
						value: function _render() {

								this.$preview.html(this._parse());
						}

						/* API */

				}, {
						key: 'get',
						value: function get(parsed) {

								return parsed ? this._parse() : this.$textarea.val();
						}
				}, {
						key: 'action',
						value: function action(name) {

								if (!name) return;

								if (!this.options.actions.hasOwnProperty(name)) return;

								this.options.actions[name].apply(this);

								this.$textarea.focus();

								this._trigger('action', { action: name });
						}

						/* PREVIEW */

				}, {
						key: 'isPreview',
						value: function isPreview() {

								return this._isPreview;
						}
				}, {
						key: 'togglePreview',
						value: function togglePreview() {
								var force = arguments.length <= 0 || arguments[0] === undefined ? !this._isPreview : arguments[0];


								if (!!force !== this._isPreview) {

										this[force ? 'preview' : 'unpreview']();
								}
						}
				}, {
						key: 'preview',
						value: function preview() {

								if (this._isPreview) return;

								this._isPreview = true;

								this._render();

								this.$preview.outerHeight(this.$textarea.outerHeight());

								this.$editor.addClass(this.options.classes.preview);

								this.$triggerPreview.addClass(this.options.classes.trigger.active);
						}
				}, {
						key: 'unpreview',
						value: function unpreview() {

								if (!this._isPreview) return;

								this._isPreview = false;

								this.$editor.removeClass(this.options.classes.preview);

								this.$triggerPreview.removeClass(this.options.classes.trigger.active);
						}

						/* FULLSCREEN */

				}, {
						key: 'isFullscreen',
						value: function isFullscreen() {

								return this._isFullscreen;
						}
				}, {
						key: 'toggleFullscreen',
						value: function toggleFullscreen() {
								var force = arguments.length <= 0 || arguments[0] === undefined ? !this._isFullscreen : arguments[0];


								if (!!force !== this._isFullscreen) {

										this[force ? 'fullscreen' : 'unfullscreen']();
								}
						}
				}, {
						key: 'fullscreen',
						value: function fullscreen() {

								if (this._isFullscreen) return;

								this._isFullscreen = true;

								this.$layout.disableScroll();
								this.$editor.addClass(this.options.classes.fullscreen);

								this.$triggerFullscreen.addClass(this.options.classes.trigger.active);
						}
				}, {
						key: 'unfullscreen',
						value: function unfullscreen() {

								if (!this._isFullscreen) return;

								this._isFullscreen = false;

								this.$layout.enableScroll();
								this.$editor.removeClass(this.options.classes.fullscreen);

								this.$triggerFullscreen.removeClass(this.options.classes.trigger.active);
						}
				}]);

				return Editor;
		}(Widgets.Widget);

		/* FACTORY */

		Factory.init(Editor, config, Widgets);
})(Svelto.$, Svelto._, Svelto, Svelto.Widgets, Svelto.Factory, Svelto.Pointer);

(function () {
		'use strict';

		var keyboardAllowed = typeof Element !== 'undefined' && 'ALLOW_KEYBOARD_INPUT' in Element;

		var fn = function () {
				var val;
				var valLength;

				var fnMap = [['requestFullscreen', 'exitFullscreen', 'fullscreenElement', 'fullscreenEnabled', 'fullscreenchange', 'fullscreenerror'],
				// new WebKit
				['webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitFullscreenElement', 'webkitFullscreenEnabled', 'webkitfullscreenchange', 'webkitfullscreenerror'],
				// old WebKit (Safari 5.1)
				['webkitRequestFullScreen', 'webkitCancelFullScreen', 'webkitCurrentFullScreenElement', 'webkitCancelFullScreen', 'webkitfullscreenchange', 'webkitfullscreenerror'], ['mozRequestFullScreen', 'mozCancelFullScreen', 'mozFullScreenElement', 'mozFullScreenEnabled', 'mozfullscreenchange', 'mozfullscreenerror'], ['msRequestFullscreen', 'msExitFullscreen', 'msFullscreenElement', 'msFullscreenEnabled', 'MSFullscreenChange', 'MSFullscreenError']];

				var i = 0;
				var l = fnMap.length;
				var ret = {};

				for (; i < l; i++) {
						val = fnMap[i];
						if (val && val[1] in document) {
								for (i = 0, valLength = val.length; i < valLength; i++) {
										ret[fnMap[0][i]] = val[i];
								}
								return ret;
						}
				}

				return false;
		}();

		var screenfull = {
				request: function request(elem) {
						var request = fn.requestFullscreen;

						elem = elem || document.documentElement;

						// Work around Safari 5.1 bug: reports support for
						// keyboard in fullscreen even though it doesn't.
						// Browser sniffing, since the alternative with
						// setTimeout is even worse.
						if (/5\.1[\.\d]* Safari/.test(navigator.userAgent)) {
								elem[request]();
						} else {
								elem[request](keyboardAllowed && Element.ALLOW_KEYBOARD_INPUT);
						}
				},
				exit: function exit() {
						document[fn.exitFullscreen]();
				},
				toggle: function toggle(elem) {
						if (this.isFullscreen) {
								this.exit();
						} else {
								this.request(elem);
						}
				},
				raw: fn
		};

		if (!fn) {
				window.screenfull = false;
				return;
		}

		Object.defineProperties(screenfull, {
				isFullscreen: {
						get: function get() {
								return !!document[fn.fullscreenElement];
						}
				},
				element: {
						enumerable: true,
						get: function get() {
								return document[fn.fullscreenElement];
						}
				},
				enabled: {
						enumerable: true,
						get: function get() {
								// Coerce to boolean in case of old WebKit
								return !!document[fn.fullscreenEnabled];
						}
				}
		});

		window.screenfull = screenfull;
})();

/* =========================================================================
 * Svelto - Widgets - Fullscreen
 * =========================================================================
 * Copyright (c) 2015-2016 Fabio Spampinato
 * Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
 * =========================================================================
 * @require core/pointer/pointer.js
 * @require core/svelto/svelto.js
 * @require core/widgetize/widgetize.js
 * @require ./vendor/screenfull.js
 * ========================================================================= */

//FIXME: It doesn't work in iOS's Safari and IE10
//TODO: Rewrite it
//TODO: Add the ability to trigger the fullscreen for a specific element

(function ($, _, Svelto, Widgetize, Pointer) {

		'use strict';

		/* FULLSCREEN */

		Widgetize.add('.fullscreen-toggler', function ($toggler) {

				$toggler.on(Pointer.tap, screenfull.toggle);
		});
})(Svelto.$, Svelto._, Svelto, Svelto.Widgetize, Svelto.Pointer);

/* http://prismjs.com/download.html?themes=prism&languages=markup+css+clike+javascript */
var _self = typeof window !== 'undefined' ? window // if in browser
: typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope ? self // if in worker
: {} // if in node js
;

/**
 * Prism: Lightweight, robust, elegant syntax highlighting
 * MIT license http://www.opensource.org/licenses/mit-license.php/
 * @author Lea Verou http://lea.verou.me
 */

var Prism = function () {

		// Private helper vars
		var lang = /\blang(?:uage)?-(?!\*)(\w+)\b/i;

		var _ = _self.Prism = {
				util: {
						encode: function encode(tokens) {
								if (tokens instanceof Token) {
										return new Token(tokens.type, _.util.encode(tokens.content), tokens.alias);
								} else if (_.util.type(tokens) === 'Array') {
										return tokens.map(_.util.encode);
								} else {
										return tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\u00a0/g, ' ');
								}
						},

						type: function type(o) {
								return Object.prototype.toString.call(o).match(/\[object (\w+)\]/)[1];
						},

						// Deep clone a language definition (e.g. to extend it)
						clone: function clone(o) {
								var type = _.util.type(o);

								switch (type) {
										case 'Object':
												var clone = {};

												for (var key in o) {
														if (o.hasOwnProperty(key)) {
																clone[key] = _.util.clone(o[key]);
														}
												}

												return clone;

										case 'Array':
												// Check for existence for IE8
												return o.map && o.map(function (v) {
														return _.util.clone(v);
												});
								}

								return o;
						}
				},

				languages: {
						extend: function extend(id, redef) {
								var lang = _.util.clone(_.languages[id]);

								for (var key in redef) {
										lang[key] = redef[key];
								}

								return lang;
						},

						/**
       * Insert a token before another token in a language literal
       * As this needs to recreate the object (we cannot actually insert before keys in object literals),
       * we cannot just provide an object, we need anobject and a key.
       * @param inside The key (or language id) of the parent
       * @param before The key to insert before. If not provided, the function appends instead.
       * @param insert Object with the key/value pairs to insert
       * @param root The object that contains `inside`. If equal to Prism.languages, it can be omitted.
       */
						insertBefore: function insertBefore(inside, before, insert, root) {
								root = root || _.languages;
								var grammar = root[inside];

								if (arguments.length == 2) {
										insert = arguments[1];

										for (var newToken in insert) {
												if (insert.hasOwnProperty(newToken)) {
														grammar[newToken] = insert[newToken];
												}
										}

										return grammar;
								}

								var ret = {};

								for (var token in grammar) {

										if (grammar.hasOwnProperty(token)) {

												if (token == before) {

														for (var newToken in insert) {

																if (insert.hasOwnProperty(newToken)) {
																		ret[newToken] = insert[newToken];
																}
														}
												}

												ret[token] = grammar[token];
										}
								}

								// Update references in other language definitions
								_.languages.DFS(_.languages, function (key, value) {
										if (value === root[inside] && key != inside) {
												this[key] = ret;
										}
								});

								return root[inside] = ret;
						},

						// Traverse a language definition with Depth First Search
						DFS: function DFS(o, callback, type) {
								for (var i in o) {
										if (o.hasOwnProperty(i)) {
												callback.call(o, i, o[i], type || i);

												if (_.util.type(o[i]) === 'Object') {
														_.languages.DFS(o[i], callback);
												} else if (_.util.type(o[i]) === 'Array') {
														_.languages.DFS(o[i], callback, i);
												}
										}
								}
						}
				},
				plugins: {},

				highlightAll: function highlightAll(async, callback) {
						var elements = document.querySelectorAll('code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code');

						for (var i = 0, element; element = elements[i++];) {
								_.highlightElement(element, async === true, callback);
						}
				},

				highlightElement: function highlightElement(element, async, callback) {
						// Find language
						var language,
						    grammar,
						    parent = element;

						while (parent && !lang.test(parent.className)) {
								parent = parent.parentNode;
						}

						if (parent) {
								language = (parent.className.match(lang) || [, ''])[1];
								grammar = _.languages[language];
						}

						// Set language on the element, if not present
						element.className = element.className.replace(lang, '').replace(/\s+/g, ' ') + ' language-' + language;

						// Set language on the parent, for styling
						parent = element.parentNode;

						if (/pre/i.test(parent.nodeName)) {
								parent.className = parent.className.replace(lang, '').replace(/\s+/g, ' ') + ' language-' + language;
						}

						var code = element.textContent;

						var env = {
								element: element,
								language: language,
								grammar: grammar,
								code: code
						};

						if (!code || !grammar) {
								_.hooks.run('complete', env);
								return;
						}

						_.hooks.run('before-highlight', env);

						if (async && _self.Worker) {
								var worker = new Worker(_.filename);

								worker.onmessage = function (evt) {
										env.highlightedCode = Token.stringify(JSON.parse(evt.data), language);

										_.hooks.run('before-insert', env);

										env.element.innerHTML = env.highlightedCode;

										callback && callback.call(env.element);
										_.hooks.run('after-highlight', env);
										_.hooks.run('complete', env);
								};

								worker.postMessage(JSON.stringify({
										language: env.language,
										code: env.code,
										immediateClose: true
								}));
						} else {
								env.highlightedCode = _.highlight(env.code, env.grammar, env.language);

								_.hooks.run('before-insert', env);

								env.element.innerHTML = env.highlightedCode;

								callback && callback.call(element);

								_.hooks.run('after-highlight', env);
								_.hooks.run('complete', env);
						}
				},

				highlight: function highlight(text, grammar, language) {
						var tokens = _.tokenize(text, grammar);
						return Token.stringify(_.util.encode(tokens), language);
				},

				tokenize: function tokenize(text, grammar, language) {
						var Token = _.Token;

						var strarr = [text];

						var rest = grammar.rest;

						if (rest) {
								for (var token in rest) {
										grammar[token] = rest[token];
								}

								delete grammar.rest;
						}

						tokenloop: for (var token in grammar) {
								if (!grammar.hasOwnProperty(token) || !grammar[token]) {
										continue;
								}

								var patterns = grammar[token];
								patterns = _.util.type(patterns) === "Array" ? patterns : [patterns];

								for (var j = 0; j < patterns.length; ++j) {
										var pattern = patterns[j],
										    inside = pattern.inside,
										    lookbehind = !!pattern.lookbehind,
										    lookbehindLength = 0,
										    alias = pattern.alias;

										pattern = pattern.pattern || pattern;

										for (var i = 0; i < strarr.length; i++) {
												// Don’t cache length as it changes during the loop

												var str = strarr[i];

												if (strarr.length > text.length) {
														// Something went terribly wrong, ABORT, ABORT!
														break tokenloop;
												}

												if (str instanceof Token) {
														continue;
												}

												pattern.lastIndex = 0;

												var match = pattern.exec(str);

												if (match) {
														if (lookbehind) {
																lookbehindLength = match[1].length;
														}

														var from = match.index - 1 + lookbehindLength,
														    match = match[0].slice(lookbehindLength),
														    len = match.length,
														    to = from + len,
														    before = str.slice(0, from + 1),
														    after = str.slice(to + 1);

														var args = [i, 1];

														if (before) {
																args.push(before);
														}

														var wrapped = new Token(token, inside ? _.tokenize(match, inside) : match, alias);

														args.push(wrapped);

														if (after) {
																args.push(after);
														}

														Array.prototype.splice.apply(strarr, args);
												}
										}
								}
						}

						return strarr;
				},

				hooks: {
						all: {},

						add: function add(name, callback) {
								var hooks = _.hooks.all;

								hooks[name] = hooks[name] || [];

								hooks[name].push(callback);
						},

						run: function run(name, env) {
								var callbacks = _.hooks.all[name];

								if (!callbacks || !callbacks.length) {
										return;
								}

								for (var i = 0, callback; callback = callbacks[i++];) {
										callback(env);
								}
						}
				}
		};

		var Token = _.Token = function (type, content, alias) {
				this.type = type;
				this.content = content;
				this.alias = alias;
		};

		Token.stringify = function (o, language, parent) {
				if (typeof o == 'string') {
						return o;
				}

				if (_.util.type(o) === 'Array') {
						return o.map(function (element) {
								return Token.stringify(element, language, o);
						}).join('');
				}

				var env = {
						type: o.type,
						content: Token.stringify(o.content, language, parent),
						tag: 'span',
						classes: ['token', o.type],
						attributes: {},
						language: language,
						parent: parent
				};

				if (env.type == 'comment') {
						env.attributes['spellcheck'] = 'true';
				}

				if (o.alias) {
						var aliases = _.util.type(o.alias) === 'Array' ? o.alias : [o.alias];
						Array.prototype.push.apply(env.classes, aliases);
				}

				_.hooks.run('wrap', env);

				var attributes = '';

				for (var name in env.attributes) {
						attributes += (attributes ? ' ' : '') + name + '="' + (env.attributes[name] || '') + '"';
				}

				return '<' + env.tag + ' class="' + env.classes.join(' ') + '" ' + attributes + '>' + env.content + '</' + env.tag + '>';
		};

		if (!_self.document) {
				if (!_self.addEventListener) {
						// in Node.js
						return _self.Prism;
				}
				// In worker
				_self.addEventListener('message', function (evt) {
						var message = JSON.parse(evt.data),
						    lang = message.language,
						    code = message.code,
						    immediateClose = message.immediateClose;

						_self.postMessage(JSON.stringify(_.util.encode(_.tokenize(code, _.languages[lang]))));
						if (immediateClose) {
								_self.close();
						}
				}, false);

				return _self.Prism;
		}

		// Get current script and highlight
		var script = document.getElementsByTagName('script');

		script = script[script.length - 1];

		if (script) {
				_.filename = script.src;

				if (document.addEventListener && !script.hasAttribute('data-manual')) {
						document.addEventListener('DOMContentLoaded', _.highlightAll);
				}
		}

		return _self.Prism;
}();

if (typeof module !== 'undefined' && module.exports) {
		module.exports = Prism;
}

// hack for components to work correctly in node.js
if (typeof global !== 'undefined') {
		global.Prism = Prism;
}
;
Prism.languages.markup = {
		'comment': /<!--[\w\W]*?-->/,
		'prolog': /<\?[\w\W]+?\?>/,
		'doctype': /<!DOCTYPE[\w\W]+?>/,
		'cdata': /<!\[CDATA\[[\w\W]*?]]>/i,
		'tag': {
				pattern: /<\/?[^\s>\/=.]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\\1|\\?(?!\1)[\w\W])*\1|[^\s'">=]+))?)*\s*\/?>/i,
				inside: {
						'tag': {
								pattern: /^<\/?[^\s>\/]+/i,
								inside: {
										'punctuation': /^<\/?/,
										'namespace': /^[^\s>\/:]+:/
								}
						},
						'attr-value': {
								pattern: /=(?:('|")[\w\W]*?(\1)|[^\s>]+)/i,
								inside: {
										'punctuation': /[=>"']/
								}
						},
						'punctuation': /\/?>/,
						'attr-name': {
								pattern: /[^\s>\/]+/,
								inside: {
										'namespace': /^[^\s>\/:]+:/
								}
						}

				}
		},
		'entity': /&#?[\da-z]{1,8};/i
};

// Plugin to make entity title show the real entity, idea by Roman Komarov
Prism.hooks.add('wrap', function (env) {

		if (env.type === 'entity') {
				env.attributes['title'] = env.content.replace(/&amp;/, '&');
		}
});

Prism.languages.xml = Prism.languages.markup;
Prism.languages.html = Prism.languages.markup;
Prism.languages.mathml = Prism.languages.markup;
Prism.languages.svg = Prism.languages.markup;

Prism.languages.css = {
		'comment': /\/\*[\w\W]*?\*\//,
		'atrule': {
				pattern: /@[\w-]+?.*?(;|(?=\s*\{))/i,
				inside: {
						'rule': /@[\w-]+/
						// See rest below
				}
		},
		'url': /url\((?:(["'])(\\(?:\r\n|[\w\W])|(?!\1)[^\\\r\n])*\1|.*?)\)/i,
		'selector': /[^\{\}\s][^\{\};]*?(?=\s*\{)/,
		'string': /("|')(\\(?:\r\n|[\w\W])|(?!\1)[^\\\r\n])*\1/,
		'property': /(\b|\B)[\w-]+(?=\s*:)/i,
		'important': /\B!important\b/i,
		'function': /[-a-z0-9]+(?=\()/i,
		'punctuation': /[(){};:]/
};

Prism.languages.css['atrule'].inside.rest = Prism.util.clone(Prism.languages.css);

if (Prism.languages.markup) {
		Prism.languages.insertBefore('markup', 'tag', {
				'style': {
						pattern: /<style[\w\W]*?>[\w\W]*?<\/style>/i,
						inside: {
								'tag': {
										pattern: /<style[\w\W]*?>|<\/style>/i,
										inside: Prism.languages.markup.tag.inside
								},
								rest: Prism.languages.css
						},
						alias: 'language-css'
				}
		});

		Prism.languages.insertBefore('inside', 'attr-value', {
				'style-attr': {
						pattern: /\s*style=("|').*?\1/i,
						inside: {
								'attr-name': {
										pattern: /^\s*style/i,
										inside: Prism.languages.markup.tag.inside
								},
								'punctuation': /^\s*=\s*['"]|['"]\s*$/,
								'attr-value': {
										pattern: /.+/i,
										inside: Prism.languages.css
								}
						},
						alias: 'language-css'
				}
		}, Prism.languages.markup.tag);
};
Prism.languages.clike = {
		'comment': [{
				pattern: /(^|[^\\])\/\*[\w\W]*?\*\//,
				lookbehind: true
		}, {
				pattern: /(^|[^\\:])\/\/.*/,
				lookbehind: true
		}],
		'string': /("|')(\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
		'class-name': {
				pattern: /((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[a-z0-9_\.\\]+/i,
				lookbehind: true,
				inside: {
						punctuation: /(\.|\\)/
				}
		},
		'keyword': /\b(if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,
		'boolean': /\b(true|false)\b/,
		'function': /[a-z0-9_]+(?=\()/i,
		'number': /\b-?(?:0x[\da-f]+|\d*\.?\d+(?:e[+-]?\d+)?)\b/i,
		'operator': /--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/,
		'punctuation': /[{}[\];(),.:]/
};

Prism.languages.javascript = Prism.languages.extend('clike', {
		'keyword': /\b(as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|false|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)\b/,
		'number': /\b-?(0x[\dA-Fa-f]+|0b[01]+|0o[0-7]+|\d*\.?\d+([Ee][+-]?\d+)?|NaN|Infinity)\b/,
		// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)
		'function': /[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*(?=\()/i
});

Prism.languages.insertBefore('javascript', 'keyword', {
		'regex': {
				pattern: /(^|[^/])\/(?!\/)(\[.+?]|\\.|[^/\\\r\n])+\/[gimyu]{0,5}(?=\s*($|[\r\n,.;})]))/,
				lookbehind: true
		}
});

Prism.languages.insertBefore('javascript', 'class-name', {
		'template-string': {
				pattern: /`(?:\\`|\\?[^`])*`/,
				inside: {
						'interpolation': {
								pattern: /\$\{[^}]+\}/,
								inside: {
										'interpolation-punctuation': {
												pattern: /^\$\{|\}$/,
												alias: 'punctuation'
										},
										rest: Prism.languages.javascript
								}
						},
						'string': /[\s\S]+/
				}
		}
});

if (Prism.languages.markup) {
		Prism.languages.insertBefore('markup', 'tag', {
				'script': {
						pattern: /<script[\w\W]*?>[\w\W]*?<\/script>/i,
						inside: {
								'tag': {
										pattern: /<script[\w\W]*?>|<\/script>/i,
										inside: Prism.languages.markup.tag.inside
								},
								rest: Prism.languages.javascript
						},
						alias: 'language-javascript'
				}
		});
}

Prism.languages.js = Prism.languages.javascript;