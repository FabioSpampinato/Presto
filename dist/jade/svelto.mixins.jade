
//- =========================================================================
//- Svelto - Accordion
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

mixin accordion
  .accordion&attributes(attributes)
    block


//- =========================================================================
//- Svelto - Base
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

mixin css(url, media)
  - media = media || "all";
  link(rel="stylesheet" href!=url media=media)&attributes(attributes)

mixin js(url)
  script(src!=url)&attributes(attributes)

mixin script
  script&attributes(attributes)
    block


//- =========================================================================
//- Svelto - Breadcrumb
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

mixin breadcrumb
  .breadcrumb&attributes(attributes)
    block

mixin breadcrumb-divider(icon)
  .breadcrumb-divider&attributes(attributes)
    if block
      block
    else
      - icon = icon || "chevron_right";
      +icon(icon)


//- =========================================================================
//- Svelto - Button
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

mixin button(href)
  if href
    if href.slice ( 0, 11 ) === 'javascript:'
      .button(onclick=href)&attributes(attributes)
        block
    else if href[href.length-1] === ')' || href.slice ( -2 ) === ');'
      .button(onclick="javascript:" + href)&attributes(attributes)
        block
    else
      a(href=href)&attributes(attributes).button
        block
  else
    .button&attributes(attributes)
      block

mixin button-sub-left
  .sub&attributes(attributes).left
    block

mixin button-sub-right
  .sub&attributes(attributes).right
    block

mixin button-icon(icon, href)
  +button(href)&attributes(attributes)
    +icon(icon)
    block
  
mixin button-ribbon
  //- TODO: Make the markup lighter
  //- TODO: User transform instead
  +button&attributes(attributes).ribbon
    block
  +button.invisible

mixin button-corner(direction)
  - direction = direction || "top-right";
  if href
    if href.slice ( 0, 11 ) === 'javascript:'
      .button-corner(onclick=href class=direction)&attributes(attributes)
        .button.compact
          block
    else if href[href.length-1] === ')' || href.slice ( -2 ) === ');'
      .button-corner(onclick="javascript:" + href class=direction)&attributes(attributes)
        .button.compact
          block
    else
      a(href=href class=direction)&attributes(attributes).button-corner
        .button.compact
          block
  else
    .button-corner(class=direction)&attributes(attributes)
      .button.compact
        block
  
mixin button-tag
  .button-tag
    +button&attributes(attributes)
      block


//- =========================================================================
//- Svelto - Card
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

mixin card
  .card&attributes(attributes)
    block

mixin card-header
  .card-header&attributes(attributes)
      block

mixin card-block
  .card-block&attributes(attributes)
    block

mixin card-footer
  .card-footer&attributes(attributes)
    block


//- =========================================================================
//- Svelto - Carousel
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

mixin carousel
  .carousel&attributes(attributes)
    block

mixin carousel-indicators(amount)
  .carousel-indicators&attributes(attributes)
    - var nr = 1;
    while nr <= amount
      +carousel-indicator
      - nr++;

mixin carousel-indicator
  .carousel-indicator&attributes(attributes)
    block

mixin carousel-prev
  .carousel-prev&attributes(attributes)
    block

mixin carousel-prev-btn
  .button.compact.rounded.white.z-depth-2.carousel-prev&attributes(attributes)
    +icon("chevron_left")

mixin carousel-next
  .carousel-next&attributes(attributes)
    block

mixin carousel-next-btn
  .button.compact.rounded.white.z-depth-2.carousel-next&attributes(attributes)
    +icon("chevron_right")
    
mixin carousel-items
  .carousel-items&attributes(attributes)
    block


//- =========================================================================
//- Svelto - Chat
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

//- Options
  {
    sender: {
      img: '' // Avatar url
      name: '', //  Nickname
      url: '', // Profile url
    },
    permissions: {
      own: boolean, // Flag that decide if the chat is owned by you
      reply: boolean, // Flat that decide if you can reply it
      edit: boolean, // Flag that decide if you can edit it
      delete: boolean, // Flag that decide if you can delete it
    },
    message: {
      timestamp: number, // Unix timestamp of when the message as been sent
      content: '', // The message content
      group: '', // The ID of the group, useful for joining all the messages
      level: '',
      direction: 'left' // The direction of the message
    }
  }

mixin chat-msg(options)
  - options.message.level = options.message.level || 1;
  - options.message.direction = options.message.direction || 'left';
  - options.sender = options.sender || {};
  - options.sender.name = options.sender.name || "Unknown";
  .chat-msg(class=("level-" + options.message.level + " direction-" + options.message.direction + " sender-" + options.sender.name))&attributes(attributes)
    if options.sender.img
      if options.sender.url
        +a(options.sender.url)(title=options.sender.name).chat-msg-img
          +image(options.sender.img)(title=options.sender.name).rounded
      else
        +image(options.sender.img)(title=options.sender.name).chat-msg-img.rounded
    .chat-msg-content.card.outlined
      +card-header.inherit.outlined.compact
        +sections
          if options.sender.name !== "Unknown"
            +section-left
              if options.sender.url
                a(href=options.sender.url title=options.sender.name).chat-msg-sender-name= options.sender.name
              else
                span= options.sender.name
          +section-right
            +multiple
              +button-icon("access_time")(data-timestamp-title=options.message.timestamp).xsmall.outlined.compact
              if options.permissions
                if options.permissions.own
                  +button-icon("account_circle")(title="You are the owner").xsmall.outlined.compact
                if options.permissions.reply
                  +button-icon("reply")(title="Reply").xsmall.outlined.compact
                if options.permissions.edit
                  +button-icon("mode_edit")(title="Edit").xsmall.outlined.compact
                if options.permissions.delete
                  +button-icon("delete")(title="Delete").xsmall.outlined.compact
      +card-block
        p= options.message.content


//- =========================================================================
//- Svelto - Checkbox
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

//- TODO: the value should be setted to 1 by default if is not provided

//- Options
  {
    name: '', // Input name
    title: '', // Checkbox title
    value: '', // Input value
    checked: '', // Input checked
    colors: { // Colors to use for icons
      on: '', // On color
      off: '' // Off color
    },
    icons: { // Icons to use
      on: '', // On icon
      off: '' // Off icon
    }
  }

mixin checkbox(options)
  //- TODO: Make the markup lighter
  - options = options || {};
  - options.value = options.value || "";
  - options.colors = options.colors || {};
  - options.colors.on = options.colors.on || "";
  - options.colors.off = options.colors.off || "";
  - options.icons = options.icons || {};
  - options.icons.on = options.icons.on || "check_box";
  - options.icons.off = options.icons.off || "check_box_outline_blank";
  +button(class=(options.checked ? "checked" : ""))&attributes(attributes).checkbox
    if options.title
      span= options.title
    +icons
      +icon(options.icons.on)(class=options.colors.on).icon-on
      +icon(options.icons.off)(class=options.colors.off).icon-off
    if options.checked
      if options.name
        input(type="checkbox" name=options.name value=options.value checked)
      else
        input(type="checkbox" value=options.value checked)
    else
      if options.name
        input(type="checkbox" name=options.name value=options.value)
      else
        input(type="checkbox" value=options.value)


//- =========================================================================
//- Svelto - Colorpicker
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

mixin colorpicker
  .colorpicker&attributes(attributes)
    input(type=text name="colorpicker")
    .colorpicker-saturation-brightness-wrp
      .colorpicker-saturation
      .colorpicker-brightness
      .colorpicker-handler
    .colorpicker-hue-wrp
      .colorpicker-hue
      .colorpicker-handler


//- =========================================================================
//- Svelto - Container
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

mixin container
  .container&attributes(attributes)
    block


//- =========================================================================
//- Svelto - Datepicker
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

mixin datepicker
  .datepicker&attributes(attributes)
    input(type=text name="datepicker")
    .datepicker-navigation
      +button-icon("chevron_left")(title="Previous month").datepicker-navigation-prev
      .datepicker-navigation-title
      +button-icon("chevron_right")(title="Next month").datepicker-navigation-next
    .datepicker-calendar
      .datepicker-days-names
        .datepicker-day-name(title="Monday") M
        .datepicker-day-name(title="Tuesday") T
        .datepicker-day-name(title="Wednesday") W
        .datepicker-day-name(title="Thursday") T
        .datepicker-day-name(title="Friday") F
        .datepicker-day-name(title="Saturday") S
        .datepicker-day-name(title="Sunday") S
      .datepicker-days
        .datepicker-day-prev 23
        .datepicker-day-prev 24
        .datepicker-day-prev 25
        .datepicker-day-prev 26
        .datepicker-day-prev 27
        .datepicker-day-prev 28
        .datepicker-day-prev 29
        .datepicker-day-prev 30
        .datepicker-day-prev 31
        .datepicker-day 1
        .datepicker-day 2
        .datepicker-day 3
        .datepicker-day 4
        .datepicker-day 5
        .datepicker-day 6
        .datepicker-day 7
        .datepicker-day 8
        .datepicker-day 9
        .datepicker-day 10
        .datepicker-day 11
        .datepicker-day 12
        .datepicker-day 13
        .datepicker-day 14
        .datepicker-day 15
        .datepicker-day 16
        .datepicker-day 17
        .datepicker-day 18
        .datepicker-day 19
        .datepicker-day 20
        .datepicker-day 21
        .datepicker-day 22
        .datepicker-day 23
        .datepicker-day 24
        .datepicker-day 25
        .datepicker-day 26
        .datepicker-day 27
        .datepicker-day 28
        .datepicker-day 29
        .datepicker-day 30
        .datepicker-day 31
        .datepicker-day-next 1
        .datepicker-day-next 2
        .datepicker-day-next 3
        .datepicker-day-next 4
        .datepicker-day-next 5
        .datepicker-day-next 6


//- =========================================================================
//- Svelto - Divider
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

mixin divider
  .divider&attributes(attributes)
    block

mixin divider-block
  .divider.block
    .divider-content&attributes(attributes)
      block

mixin divider-text
  .divider&attributes(attributes).text
    block

mixin divider-spacer
  .divider&attributes(attributes).spacer
    block


//- =========================================================================
//- Svelto - Dropdown
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

//- TODO: automatically recognize if we are passing a title or an icon (if the icon is in the allowed arrays then ok, if not print it as a title)

//- Options
  {
    id: '', // Dropdown id
    title: '', // Button title
    icon: '' // Button icon
  }

mixin dropdown-btn(options)
  - options.icon = options.icon || "expand_more";
  +button(data-dropdown=options.id)&attributes(attributes).dropdown-trigger
    if options.title
      span= options.title
    if options.icon
      +icon(options.icon)

mixin dropdown(id)
  .container(id=id)&attributes(attributes).dropdown
    block


//- =========================================================================
//- Svelto - Embedded
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

//- EMBEDDED

mixin embedded(src, allowfullscreen)
  .embedded&attributes(attributes)
    if src
      +iframe(src, allowfullscreen)
    block

//- EMBEDDABLES

mixin iframe(src, allowfullscreen)
  if allowfullscreen
    iframe(src=src allowfullscreen)&attributes(attributes)
  else
    iframe(src=src)&attributes(attributes)

mixin embed(src)
  embed(src=src)&attributes(attributes)

mixin video(sources, type)
  video&attributes(attributes)
    if type
      sources(src=sources type=type)
    else
      each src, type in sources
        source(src=src type=type)

mixin object(data)
  object(data=data)&attributes(attributes)


//- =========================================================================
//- Svelto - Flippable
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

mixin flippable
  //- TODO: Make the markup lighter, remove the need for that "flippable-sizes"
  .flippable&attributes(attributes)
    .flippable-sides
      block

mixin flippable-front
  .flippable-front&attributes(attributes)
    block

mixin flippable-back
  .flippable-back&attributes(attributes)
    block


//- =========================================================================
//- Svelto - Flags
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

mixin flag(flag)
  i(class="flag-" + flag)&attributes(attributes)
    block


//- =========================================================================
//- Svelto - Footer
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

mixin footer
  footer&attributes(attributes)
    block


//- =========================================================================
//- Svelto - Form
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

mixin form
  form&attributes(attributes)
    block

mixin form-button
  button(type="submit")&attributes(attributes).label.button.actionable
    block

mixin form-button-icon(icon)
  button(type="submit")&attributes(attributes).label.button.actionable
    +icon(icon)
    block


//- =========================================================================
//- Svelto - Header
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

//- FIXME: Make it more general, so that not just an image url can be set as a background but pretty much everything... but maybe we can do it manually without a mixin, there cannot be a mixin for everything (sure?)...

mixin header
  header&attributes(attributes)
    block

mixin header-bg(url)
  img(src=url).header-background


//- =========================================================================
//- Svelto - Icons
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

mixin icon(icon)
  i&attributes(attributes).icon
    if icon
      = icon
    block

mixin icons
  .icons&attributes(attributes)
    block


//- =========================================================================
//- Svelto - Image
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

mixin image(url)
  //- TODO: Make the markup lighter
  .image-wrp&attributes(attributes)
    img(src=url)
    block

mixin image-caption
  .image-caption&attributes(attributes)
    block

mixin image-sample
  +image("/sample.png")&attributes(attributes)
    block


//- =========================================================================
//- Svelto - Infobar
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

//- Options
  {
    icon: '', // Infobar icon
    title: '', // Infobar title
    subtitle: '', // Infobar subtitle
  }

mixin infobar(options)
  - options = options || {};
  .infobar&attributes(attributes)
    if options.icon
      +infobar-left
        +icon(options.icon)(class=((options.title && options.subtitle) ? "xxxlarge" : ""))
    if options.title || options.subtitle
      +infobar-center
        if options.title
          +infobar-title(options.title)
        if options.subtitle
          +infobar-subtitle(options.subtitle)
    block
  
mixin infobar-left
  .infobar-left&attributes(attributes)
    block

mixin infobar-center
  .infobar-center&attributes(attributes)
    block

mixin infobar-title(title)
  if title
    .infobar-title&attributes(attributes)= title
  else
    .infobar-title&attributes(attributes)
      block

mixin infobar-subtitle(subtitle)
  if subtitle
    .infobar-subtitle&attributes(attributes)= subtitle
  else
    .infobar-subtitle&attributes(attributes)
      block

mixin infobar-right
  .infobar-right&attributes(attributes)
    block

mixin infobar-bottom
  .infobar-bottom&attributes(attributes)
    block


//- =========================================================================
//- Svelto - Input
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

//- Options
  {
    type: '', // Input type
    name: '', // Input name
    value: '', // Input value
    label: '' // Label
  }

mixin input(options)
  //- TODO: Make the markup lighter
  - options = options || {};
  - options.type = options.type || "text";
  - options.name = options.name || "";
  - options.value = options.value === undefined ? "" : options.value;
  .input-wrp(class=(options.label ? '' : 'no-floating'))&attributes(attributes)
    input(type=options.type value=options.value name=options.name required).text-field
    if options.label
      label= options.label
    .text-field-bar


//- =========================================================================
//- Svelto - Label
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

mixin label
  .label&attributes(attributes)
    block

mixin label-sub-left
  .sub&attributes(attributes).left
    block
      
mixin label-sub-right
  .sub&attributes(attributes).right
    block

mixin label-icon(icon)
  +label&attributes(attributes)
    +icon(icon)
    block
  
mixin label-ribbon
  //- TODO: Make the markup lighter
  +label&attributes(attributes).ribbon
    block
  +label.invisible

mixin label-corner(direction)
  - direction = direction || "top-right";
  .label-corner(class=direction)&attributes(attributes)
    +label.compact
      block
      
mixin label-tag
  .label-tag
    +label&attributes(attributes)
      block


//- =========================================================================
//- Svelto - Modal
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

//- Options
  {
    id: '', // Modal id
    title: '' // Title
    icon: '', // Icon to use
  }

mixin modal-btn(options)
  +button(data-modal="modal-" + options.id)&attributes(attributes).modal-trigger
    if options.title
      span= options.title
    if options.icon
      +icon(options.icon)

mixin modal(id)
  .modal(id="modal-" + id)&attributes(attributes)
    block


//- =========================================================================
//- Svelto - Multiple
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

mixin multiple
  .multiple&attributes(attributes)
    block


//- =========================================================================
//- Svelto - Navbar
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

//- Options
  {
    id: '', // Navbar id
    title: '', // Title
    icon: '' // Icon to use
  }

mixin navbar-btn(options)
  +button(data-navbar=options.id)&attributes(attributes).navbar-trigger
    if options.title
      span= options.title
    if options.icon
      +icon(options.icon)

//- Options
  {
    id: '', // Navbar id
    direction: '', // Navbar direction
    slim: '', // Use a slim version or not
    attached: '', // True or attached-* class
    flickable: '' // Defined if the navbar can be triggered with a flick gesture
  }

mixin navbar(options)
  - options.direction = options.direction || "left";
  - options.slim = options.slim || false;
  .navbar(id=options.id class=(options.direction + " " + ( options.slim ? "slim" : "" ) + " " + ( options.flickable ? "flickable" : "" )  + " " + (options.attached ? ( options.attached === true ? "attached-xs" : options.attached ) : "" )) data-direction=options.direction)&attributes(attributes)
    block


//- =========================================================================
//- Svelto - Noty
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

//- Options: See noty component

mixin noty(options)
  +script&attributes(attributes) $(function () { $.noty ( !{JSON.stringify(options)} ); });


//- =========================================================================
//- Svelto - Notification
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

//- Options
  {
    title: '', // Notification title
    body: '', // Notification body
    img: '' // Notification image
  }

mixin notification(options)
  +script&attributes(attributes) $(function () { $.notification ( !{JSON.stringify(options)} ); });


//- =========================================================================
//- Svelto - Others
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

//- TODO: add optional third parameter that toggles the randomization process

//- Options
  {
    type: '', // Input name
    amount: '' // Amount of type
  }

mixin lorem-ipsum(options)
  - options = options || {};
  - options.type = options.type || "paragraph";
  - options.amount = options.amount || 1;
  
  - var returnLI = '';
  - var LIText = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur aliquet tincidunt turpis, in pharetra mi convallis ut. Vivamus eget sodales nibh, eu placerat erat. Vivamus massa urna, volutpat non tempus eget, placerat quis elit. Nullam pretium id arcu sed eleifend. Phasellus sollicitudin quis ante nec ornare. Maecenas nibh eros, vehicula vel eros eget, viverra semper nisi. Nulla facilisi. Praesent pretium porttitor arcu, sit amet consequat neque luctus non. Cras sodales, justo quis tempus dignissim, diam est commodo orci, eget accumsan sem ante vitae sem. Curabitur quam ipsum, porta id sapien in, consectetur auctor nibh. Vivamus egestas ante vel cursus aliquet. In non ante nec velit tempus lacinia nec sollicitudin ex. Phasellus semper lorem a diam scelerisque, sed accumsan erat molestie. Mauris vulputate lacinia erat. Nunc urna risus, facilisis at posuere in, pulvinar quis odio. Maecenas et sollicitudin arcu.\n Proin maximus dui ac felis blandit luctus. Fusce consectetur, nisl vitae blandit viverra, mi nisl posuere lorem, a interdum nisl leo quis massa. Donec et pretium mi. Quisque bibendum urna quis eleifend blandit. Donec pulvinar est eu diam tempus bibendum. Aenean iaculis mi vel magna viverra, ut facilisis velit luctus. Aenean blandit, erat a cursus dignissim, lectus lacus vehicula orci, ut vestibulum risus purus quis libero. Fusce vestibulum risus a erat varius facilisis. Donec tincidunt interdum mattis. Nam mi sapien, dictum a egestas in, efficitur sed sem. Cras dignissim neque dignissim arcu suscipit pellentesque. Praesent euismod vel dui at imperdiet. Vestibulum rhoncus dolor sed bibendum hendrerit. Sed malesuada dolor sed ex porttitor euismod. In id laoreet dui.\n Donec maximus ante vel erat sagittis varius. Quisque auctor varius rhoncus. Nunc efficitur, magna eu venenatis placerat, odio dui sodales nisi, sit amet ultricies sapien eros vel erat. Maecenas tincidunt dolor sit amet nibh gravida, eu iaculis enim hendrerit. Fusce porttitor arcu magna, quis convallis enim suscipit eget. Mauris id lacus pharetra, auctor leo at, pulvinar leo. Sed ex augue, tristique posuere augue sed, aliquet dictum erat.\n Sed lobortis purus non eros bibendum, nec ornare erat euismod. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Suspendisse potenti. Quisque ut nulla cursus, vehicula dui vitae, consectetur urna. Sed tincidunt est purus, id auctor risus fringilla in. Vivamus rutrum dictum ligula, scelerisque elementum orci fringilla eget. Suspendisse potenti.\n Phasellus molestie quam a urna ultrices suscipit. Fusce eu elit rutrum dui elementum malesuada. Curabitur porta tincidunt tristique. Nam tellus enim, sodales id est auctor, lobortis elementum sem. Curabitur pharetra convallis bibendum. Curabitur consectetur rhoncus dignissim. Sed vehicula est et lacinia dapibus. Nunc efficitur diam vel mattis posuere.";

  if options.type === 'characters'
    - returnLI = LIText.substr ( 0, options.amount );
  else if options.type === 'words'
    - var LIWords;
    - LIText = LIText.toLowerCase ();
    - LIText = LIText.split ( '.' ).join ( '' );
    - LIText = LIText.split ( ',' ).join ( '' );
    - lipsumArray = LIText.split ( ' ' );
    - for ( var i = 0; i < options.amount; i++ ) {
      - returnLI += lipsumArray[i] + ' ';
    - }
    - returnLI = returnLI.charAt ( 0 ).toUpperCase () + returnLI.slice ( 1 );
    - returnLI = returnLI.substr ( 0, returnLI.length - 1 );
  else if options.type === 'paragraph'
    - var LISentences = LIText.split ( '\n ' );
    - for ( var i = 0; i < options.amount; i++ ) {
      - returnLI += LISentences[i] + '\n';
    - }
    - returnLI = returnLI.substr ( 0, returnLI.length - 1 );

  = returnLI

//- Options
  [
    0: '', // Rectangle width
    1: '' // Rectangle width
    ...
  ]

mixin paragraph-sample(options)
  - options = options || ['95%', '92%', '100%', '87%', '97%', '93%', '97%'];
  each width in options
    +placeholder({ width: width, height: 10, empty: true })&attributes(attributes)

mixin spacer
  .spacer&attributes(attributes)
    block

mixin centerer
  .centerer&attributes(attributes)
    block


//- =========================================================================
//- Svelto - Overlay
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

mixin overlay
  .overlay&attributes(attributes)
    block


//- =========================================================================
//- Svelto - Pager
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

//- Options
  {
    url: '', // The url to transform wih the page number (eighter by appending or or by replacing <page-nr>)
    total: '', // The total number of pages, or infinite (for example when the content is generated randomly)
    current: '', // The current page number
    classes: '' // Extra classes to add to buttons
  }

mixin pager(options)
  //- TODO: Don't use multiple here, just .pager
  - options.classes = options.classes || "";
  +multiple&attributes(attributes).pager.centered

    if options.total == 1 || options.total == 0
      block

    else

      - var url_to_substitute = ( options.url.indexOf ( '<page-nr>' ) !== -1 );

      if options.current > 1
        - var page_nr = options.current - 1;
        - var page_url = url_to_substitute ? options.url.replace ( "<page-nr>", page_nr) : options.url + page_nr;
        +button(page_url)(title="Previous page" class=options.classes).prev
          i.icon chevron_left
          span Prev

      if options.current < options.total
        - var page_nr = options.current + 1;
        - var page_url = url_to_substitute ? options.url.replace ( "<page-nr>", page_nr) : options.url + page_nr;
        +button(page_url)(title="Next page" class=options.classes).next
          span Next
          i.icon chevron_right

    block


//- =========================================================================
//- Svelto - Pagination
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

//- Options
  {
    url: '', // The url to transform wih the page number (eighter by appending or or by replacing <page-nr>)
    total: '', // The total number of pages, or infinite (for example when the content is generated randomly)
    current: '', // The current page number
    blocks: '', // The number of blocks to fill
    classes: '' // Extra classes to add to buttons
  }

mixin pagination(options)
  //- TODO: Don't use multiple here, just .pagination
  - options.classes = options.classes || "";
  +multiple&attributes(attributes).pagination.centered

    if options.total == 1 || options.total == 0
      block

    else if options.total == 'infinite'
      +button(options.url)(class=options.classes) Load more
      block

    else
      if options.blocks >= 2

        - var url_to_substitute = ( options.url.indexOf ( '<page-nr>' ) !== -1 );

        if options.current > 1
          - var page_nr = options.current - 1;
          - var page_url = url_to_substitute ? options.url.replace ( "<page-nr>", page_nr) : options.url + page_nr;
          +button-icon("chevron_left", page_url)(title="Previous page" class=options.classes).prev
          - options.blocks -= 1;

        if options.current < options.total
          - var need_next_button = true;
          - options.blocks -= 1;
        else
          - var need_next_button = false;

        if options.blocks > 0
          - var need_current_button = true;
          - options.blocks -= 1;
        else
          - need_current_button = false;

        - var left_blocks = options.current - 1;
        - var right_blocks = options.total - options.current;
        - var required_left_blocks = Math.floor ( options.blocks / 2 );
        - var required_right_blocks = options.blocks - required_left_blocks;

        if left_blocks <= required_left_blocks && right_blocks <= required_right_blocks
          - var outputed_left_blocks = left_blocks;
          - var outputed_right_blocks = right_blocks;
        else if left_blocks <= required_left_blocks
          - var outputed_left_blocks = left_blocks;
          - var outputed_right_blocks = Math.min ( right_blocks, options.blocks - outputed_left_blocks );
        else if right_blocks <= required_right_blocks
          - var outputed_right_blocks = right_blocks;
          - var outputed_left_blocks = Math.min ( left_blocks, options.blocks - outputed_right_blocks );
        else
          - var outputed_left_blocks = required_left_blocks;
          - var outputed_right_blocks = required_right_blocks;

        while outputed_left_blocks > 0
          - var page_nr = options.current - outputed_left_blocks;
          - var page_url = url_to_substitute ? options.url.replace ( "<page-nr>", page_nr) : options.url + page_nr;
          +button(page_url)(title="Page " + page_nr class=options.classes)= page_nr
          - outputed_left_blocks--;

        if need_current_button
          +label(title="Current page" class=options.classes).current.highlight.highlight-bottom= options.current

        - var counter = 1;
        while counter <= outputed_right_blocks
          - var page_nr = options.current + counter;
          - var page_url = url_to_substitute ? options.url.replace ( "<page-nr>", page_nr) : options.url + page_nr;
          +button(page_url)(title="Page " + page_nr class=options.classes)= page_nr
          - counter++;

        if need_next_button
          - var page_nr = options.current + 1;
          - var page_url = url_to_substitute ? options.url.replace ( "<page-nr>", page_nr) : options.url + page_nr;
          +button-icon("chevron_right", page_url)(title="Next page" class=options.classes).next

      block


//- =========================================================================
//- Svelto - Parallax
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

mixin parallax
  .parallax&attributes(attributes)
    block

mixin parallax-layers
  .parallax-layers&attributes(attributes)
    block

mixin parallax-layer
  .parallax-layer&attributes(attributes)
    block

mixin parallax-content-sample
  .parallax-content-sample&attributes(attributes)
    block

//- Layers levels

mixin parallax-layer-deep
  +parallax-layer&attributes(attributes).parallax-layer-deep
    block

mixin parallax-layer-background
  +parallax-layer&attributes(attributes).parallax-layer-background
    block

mixin parallax-layer-base
  +parallax-layer&attributes(attributes).parallax-layer-base
    block

mixin parallax-layer-foreground
  +parallax-layer&attributes(attributes).parallax-layer-foreground
    block


//- =========================================================================
//- Svelto - Placeholder
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

//- Options
  {
    width: '', // Placeholder width
    height: '', // Placeholder height
    empty: '' // Placeholder is empty or not
  }

mixin placeholder(options)
  - options = options || {};
  - options.width = options.width || 0;
  - options.width = isNaN ( options.width ) ? options.width : options.width + 'px';
  - options.height = options.height || 0;
  - options.height = isNaN ( options.height ) ? options.height : options.height + 'px';
  - options.empty = options.empty || false;
  .placeholder(style="width:" + options.width + "; height:" + options.height + ";")&attributes(attributes)
    if !options.empty
      if block
        block
      else
        = options.width + " - " + options.height


//- =========================================================================
//- Svelto - Syntax
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

mixin syntax(language)
  code(class="language-" + language)&attributes(attributes)
    block


//- =========================================================================
//- Svelto - Progressbar
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

//- Options
  {
    value: '', // Percentage
    colors: { // Colors to use for the progressbar
      on: '', // Color of the highlight part
      off: '' // Color of the unhighlighted part
    },
    decimals: '' // Amount of decimals to round the label value to
  }

mixin progressbar(options)
  - options = typeof options === "number" ? { value: options } : ( options || {} );
  - options.colors = options.colors || {};
  - options.colors.on = options.colors.on || "";
  - options.colors.off = options.colors.off || "";
  - options.decimals = options.decimals || 0;
  .progressbar(class=options.colors.off data-value=options.value, data-decimals=options.decimals)&attributes(attributes)
    .progressbar-highlight(class=options.colors.on, style="min-width: " + options.value + "%;")


//- =========================================================================
//- Svelto - Radio
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

//- Options
  {
    name: '', // Input name
    title: '', // Checkbox title
    value: '', // Input value
    checked: '', // Input checked
    colors: { // Colors to use for icons
      on: '', // On color
      off: '' // Off color
    },
    icons: { // Icons to use
      on: '', // On icon
      off: '' // Off icon
    }
  }
  
mixin radio(options)
  //- TODO: Make the markup lighter
  - options = options || {};
  - options.value = options.value || "";
  - options.colors = options.colors || {};
  - options.colors.on = options.colors.on || "";
  - options.colors.off = options.colors.off || "";
  - options.icons = options.icons || {};
  - options.icons.on = options.icons.on || "radio_button_checked";
  - options.icons.off = options.icons.off || "radio_button_unchecked";
  +button(class=(options.checked ? "checked" : ""))&attributes(attributes).radio
    if options.title
      span= options.title
    .icons
      +icon(options.icons.on)(class=options.colors.on).icon-on
      +icon(options.icons.off)(class=options.colors.off).icon-off
    if options.checked
      if options.name
        input(type="radio" name=options.name value=options.value checked)
      else
        input(type="radio" value=options.value checked)
    else
      if options.name
        input(type="radio" name=options.name value=options.value)
      else
        input(type="radio" value=options.value)


//- =========================================================================
//- Svelto - Rater
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

//- Options
  {
    amount: '', //INFO: Number of starts
    value: '' //INFO: The value the rater is currently setted to
  }

mixin rater(options)
  - options = options || {};
  - options.value = options.value || 0;
  - options.amount = options.amount || 5;
  .rater&attributes(attributes)
    - var current = 1;
    while current <= options.amount
      .rater-star(class=(options.value >= current ? "active" : ( options.value >= current - 0.5 ? "half-active" : "" )))
      - current++;


//- =========================================================================
//- Svelto - Sections
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

mixin sections
  .sections&attributes(attributes)
    block

mixin section-left
  .section-left&attributes(attributes)
    block

mixin section-center
  .section-center&attributes(attributes)
    block

mixin section-right
  .section-right&attributes(attributes)
    block


//- =========================================================================
//- Svelto - Select
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

//- FIXME: Add support for arbitrary number of optgroups levels
//- TODO: Make the mixin set the defualt value at the compilation time

//- Options
  {
    options: '', // Select options
    selected: '', // Selected option
    id: '', // Select id
    name: '', // Select name
    title: '', // Button title
    icon: '', // Button icon
    placeholder: '' // Select placeholder
  }

mixin select-btn(options)
  - options.icon = options.icon || "reorder";
  +button(data-select=options.id)&attributes(attributes).select-btn.select-trigger
    if options.title
      .select-label= options.title
    if options.icon
      +icon(options.icon)
    +select(options)

mixin select(options)
  - options.placeholder = options.placeholder || "Select a value...";
  select(id=options.id name=options.name, placeholder=options.placeholder)
    each val, prop in options.options
      if typeof val === "object"
        optgroup(label=prop)
          each subval, subprop in val
            if subprop === selected
              option(value=subprop selected)= subval
            else
              option(value=subprop)= subval
      else
        if subprop === selected
          option(value=prop selected)= val
        else
          option(value=prop)= val


//- =========================================================================
//- Svelto - Shapes
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

//- TRIANGLES

mixin triangle
  .triangle&attributes(attributes)
    block

mixin triangle-up
  .triangle&attributes(attributes).up
    block

mixin triangle-down
  .triangle&attributes(attributes).down
    block

mixin triangle-left
  .triangle&attributes(attributes).left
    block
      
mixin triangle-right
  .triangle&attributes(attributes).right
    block

//- SQUARES

mixin square
  .square&attributes(attributes)
    block

mixin square-sample
  .square-sample&attributes(attributes)
    p
      +lorem-ipsum({ type: 'words', amount: 10 })
    block

//- CIRCLE

mixin circle
  .circle&attributes(attributes)
    block


//- =========================================================================
//- Svelto - Slider
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

//- Options
  {
    name: '', // Input name
    min: '', // Min value
    value: '', // Value
    max: '', // Max value
    step: '' // Step amount
  }

mixin slider(options)
  - options = options || {};
  - options.min = options.min || 0;
  - options.value = options.value || options.min;
  - options.max = options.max || 100;
  - options.step = options.step || 1;
  .slider(data-step=options.step)&attributes(attributes)
    if options.name
      input(type="number" name=options.name value=options.value)
    else
      input(type="number" value=options.value)
    .slider-min(title="Decrease" data-min=options.min)
    .slider-bar
      .slider-unhighlight
        .slider-highlight
      .slider-handler-wrp
        .slider-handler
          .slider-label= options.value
    .slider-max(title="Increase" data-max=options.max)


//- =========================================================================
//- Svelto - Spinner
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

mixin spinner
  svg.spinner&attributes(attributes)
    circle(cx="1.625em" cy="1.625em" r="1.25em")

mixin spinner-label
  .spinner-label&attributes(attributes)
    +spinner


//- =========================================================================
//- Svelto - Stepper
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

//- Options
  {
    name: '', // Input name
    min: '', // Min value
    value: '', // Value
    max: '', // Max value
    step: '' // Decreasing step
  }

mixin stepper(options)
  - options = options || {};
  - options.min = options.min || 0;
  - options.value = options.value === undefined ? options.min : options.value;
  - options.max = options.max || 100;
  - options.step = options.step || 1;
  +multiple(data-min=options.min data-max=options.max data-step=options.step)&attributes(attributes).stepper.joined
    +button-icon("remove").compact.stepper-decreaser
    if options.name
      +input({ name: options.name, value: options.value }).no-initial-bar.autogrow.compact
    else
      +input({ value: options.value }).stepper-input.autogrow.compact
    +button-icon("add").compact.stepper-increaser


//- =========================================================================
//- Svelto - Statistic
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

mixin statistic
  .statistic&attributes(attributes)
    block
      
mixin statistic-primary
  .statistic-primary&attributes(attributes)
    block
      
mixin statistic-secondary
  .statistic-secondary&attributes(attributes)
    block


//- =========================================================================
//- Svelto - Switch
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

//- Options
  {
    name: '', // Input name
    value: '', // Input value
    checked: '', // Input checked
    colors: { // Colors to use
      on: '', // On color
      off: '' // Off color
    },
    icons: { // Icons to use
      on: '', // On icon
      off: '' // Off icon
    }
  }

mixin switch(options)
  - options = options || {};
  - options.colors = options.colors || {};
  - options.colors.on = options.colors.on || "secondary";
  - options.colors.off = options.colors.off || "gray";
  - options.icons = options.icons || {};
  - options.icons.on = options.icons.on || "false";
  - options.icons.off = options.icons.off || "false";
  .switch(data-color-on=options.colors.on data-color-off=options.colors.off)&attributes(attributes)
    if options.name
      if options.value
        if options.checked
          input(type="checkbox" name=options.name value=options.value checked=options.checked)
        else
          input(type="checkbox" name=options.name value=options.value)
      else
        input(type="checkbox" name=options.name)
    else
      input(type="checkbox")
    .switch-bar(class=options.colors.off)
    .switch-handler(class=options.colors.off)
      if options.icons.on !== "false"
        +icon(options.icons.on).icon-on
      if options.icons.off !== "false"
        +icon(options.icons.off).icon-off


//- =========================================================================
//- Svelto - Table
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

mixin table-row-empty(empty_str)
  tr&attributes(attributes).table-row-empty.hidden
    td(colspan="100%")
      if block
        block
      else
        if empty_str
          = empty_str
        else
          = "Empty"


//- =========================================================================
//- Svelto - Tabs
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

mixin tabs
  .tabs&attributes(attributes)
    block

mixin tabs-triggers
  .tabs-triggers&attributes(attributes)
    block

mixin tabs-containers
  .tabs-containers&attributes(attributes)
    block


//- =========================================================================
//- Svelto - Tagbox
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

//- Options
  {
    name: '', // Input name
    tags: '', // Comma (by default) separated list of tags
    label: '' // New tag input partial
  }

mixin tagbox(options)
  - options = options || {};
  - options.tags = options.tags || "";
  - options.label = options.label || "Add tag...";
  .tagbox&attributes(attributes)
    if options.name
      input(type="text" name=options.name value=options.tags).hidden
    else
      input(type="text" value=options.tags).hidden
    +multiple.tagbox-tags
      if options.name
        +input({ name: "partial_" + options.name, label: options.label }).tagbox-partial.autogrow.compact.no-floating.no-bar
      else
        +input({ name: "partial", label: options.label }).tagbox-partial.autogrow.compact.no-floating.no-bar


//- =========================================================================
//- Svelto - Textarea
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

//- Options
  {
    name: '', // Textarea name
    label: '', // Label
  }

mixin textarea(options)
  //- TODO: Make the markup lighter
  - options = options || {};
  - options.name = options.name || "";
  .textarea-wrp(class=(options.label ? "" : "no-floating"))&attributes(attributes)
    textarea(name=options.name required).text-field
      block
    if options.label
      label= options.label
    .text-field-bar


//- =========================================================================
//- Svelto - Toolbar
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

mixin toolbar
  .toolbar&attributes(attributes)
    block


//- =========================================================================
//- Svelto - Tooltip
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

//- Options
  {
    id: '', // Tooltip id
    title: '', // Button title
    icon: '' // Button icon
  }
  
mixin tooltip-btn(options)
  - options.icon = options.icon || "info_outline";
  +button(data-tooltip=options.id)&attributes(attributes).tooltip-trigger
    if options.title
      span= options.title
    if options.icon
      +icon(options.icon)

mixin tooltip(id)
  .container(id=id)&attributes(attributes).tooltip
    block


//- =========================================================================
//- Svelto - Typography
//- =========================================================================
//- Copyright (c) 2015 Fabio Spampinato
//- Licensed under MIT (https://github.com/svelto/svelto/blob/master/LICENSE)
//- =========================================================================

//- Link

mixin a(href)
  - href = href || "#";
  a(href=href)&attributes(attributes)
    block

//- Abbr

mixin abbr(title)
  abbr(title=title)&attributes(attributes)
    block
